<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TonyCrane&#39;s Blog</title>
  
  <subtitle>鹤翔万里的博客</subtitle>
  <link href="https://blog.tonycrane.cc/atom.xml" rel="self"/>
  
  <link href="https://blog.tonycrane.cc/"/>
  <updated>2022-02-16T15:15:43.078Z</updated>
  <id>https://blog.tonycrane.cc/</id>
  
  <author>
    <name>TonyCrane</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>「生活」2022 寒假总结</title>
    <link href="https://blog.tonycrane.cc/p/78cef964.html"/>
    <id>https://blog.tonycrane.cc/p/78cef964.html</id>
    <published>2022-02-16T07:47:55.000Z</published>
    <updated>2022-02-16T15:15:43.078Z</updated>
    
    <content type="html"><![CDATA[<p>一个月的寒假这么快就过完了，闲来无聊，还是写点东西记录一下这个假期干的事情吧 _(:з」∠)_</p><p>手机里的待办一点点变多，然后又一点点变少（<del>不想干了/不会做了，所以删了，乐</del>），总归还是做了点东西的</p><span id="more"></span><h2 id="摸鱼方面"><a href="#摸鱼方面" class="headerlink" title="摸鱼方面"></a>摸鱼方面</h2><p>当然还是先写点轻松愉快的</p><p>这个假期玩<del>通</del>了两个游戏，很像，也很震撼，很能给我惊喜</p><h3 id="baba-is-you"><a href="#baba-is-you" class="headerlink" title="baba is you"></a>baba is you</h3><p>也算是经典游戏了（？<br>在几次 CTF 里都见到了以 baba 为背景的游戏，所以就打算来玩一玩原版了</p><p>直播打了好几次，关卡越来越多，又不断解锁新玩法，新的隐藏地图，在隐藏地图里又开启一个另一个隐藏的地图<br>烧脑，但是好玩，打通了又很有成就感<br><img src="/p/78cef964/baba.jpg"><br>打通之后才发现还有两个官方关卡包，还有更多新玩法，又要继续肝了（这游戏买的真的值2333</p><h3 id="文字游戏"><a href="#文字游戏" class="headerlink" title="文字游戏"></a>文字游戏</h3><p>在打 baba is you 的时候才听说的，打了预览版还挺有意思，就开始等发售了</p><p>发售当晚买了下来，从七点一直直播打到凌晨两点，打通了（其实没有）<br>玩法当然新奇又有趣，剧情也超赞，而且 be 后的反转也搞得我浑身鸡皮疙瘩（<del>是不是说太多了</del></p><p>之后隔了一天，又继续打了二周目，这回解锁了真结局，真的感动<br>然后去搞到了全成就<br>这个游戏就完结了<br><img src="/p/78cef964/wordgame.jpg"><br>说多了剧透，反正强推就完事了</p><h3 id="番-剧-电影"><a href="#番-剧-电影" class="headerlink" title="番/剧/电影"></a>番/剧/电影</h3><p>这个学期补完了 EVA TV 版和旧剧场版<br>怕影响考试周，就没再接着看新剧场版<br>这个假期又是看 B 站又是找资源，看完了 序、Q、破、终 新剧场版<br>虽然依旧一脸懵逼，但是回味一下，还是很好的</p><p>我是个从来不看剧的人，但是在 GZTime 和同学的推荐下还是去看了《开端》<br>算是颠覆了我对电视剧的认识（毕竟是网文改<br>第一晚上看了三集上头了，第二天直接从吃完晚饭看到凌晨两点多一口气看完了<br>剧情没得说，演技也全员在线（<del>除了准备药检2333</del>）<br>牛的</p><p>电影嘛，电影院新上映的一部也没看<br>在 B 站补了《烈日灼心》《我们的父辈》<br>都相当好了（嗯.jpg<br><del>语言能力尚未达到人类标准，不详细评价了</del></p><h2 id="技术方面"><a href="#技术方面" class="headerlink" title="技术方面"></a>技术方面</h2><h3 id="Notebook"><a href="#Notebook" class="headerlink" title="Notebook"></a>Notebook</h3><p>起因是看到了 <a href="https://github.com/zjuchenyuan">chenyuan</a> 大佬的 <a href="https://blog.chenyuan.me/">notebook</a>，群友 <a href="https://github.com/zmx0142857">fran (zmx0142857)</a> 的 <a href="https://zmx0142857.gitee.io/note/">note</a>，还有 <a href="https://github.com/widcardw">widcardw</a> 的个人笔记。<br>都很全、很震撼、很羡慕<br>而且感觉自己好像也缺一个这样的东西，好多学到的东西不进脑子，学完就忘，还要到原来的地方再查一遍<br>于是就也自己开始拿 mkdocs 搭了一个，链接在：<a href="https://note.tonycrane.cc/">https://note.tonycrane.cc/</a><br><img src="/p/78cef964/note.jpg"></p><p>在这个博客之前用的也是 mkdocs，所以还是比较熟悉的<br>但是这次又详细地看了 mkdocs、pymarkdown、material 的文档，感觉 pymarkdown 的特性要比 hexo 的渲染器多得多，功能也多，调整空间也很大<br>material 增加的特性也很多很好用，香的一批，写的也舒适</p><p>为了和这个博客的主题匹配，我花了很长时间来重写了字体样式和配色主题，然后又从 <a href="https://facelessuser.github.io/pymdown-extensions/">pymdown-extensions 的文档</a><del>抄</del>学来了暗色主题和按钮的配置（比我当时给这个博客瞎写的高到不知道哪里去了2333）</p><p>搭完了之后又补充了很多东西进去，把这个博客里曾经写过的一些系列文章和 writeup 丢了进去，现在看上去还是比较完善了</p><p>这个 mkdocs 的 repo 也公开了，在 <a href="https://github.com/TonyCrane/note/">TonyCrane/note</a>，<del>快去 Star</del></p><h3 id="Q-群机器人"><a href="#Q-群机器人" class="headerlink" title="Q 群机器人"></a>Q 群机器人</h3><p>mk 的闲聊群里有一个机器人喵呜，很好玩（很可爱），打算自己也写一个玩一玩</p><p>然后在 GitHub 上逛到了 <a href="https://github.com/djkcyl/ABot-Graia">djkcyl/ABot-Graia</a> 这个项目，就去看了看 mirai 和 girai-ariadne<br>随手写了写，加了点类似显示 B 站视频信息、复读、咕咕咕、生成图片表情包、查天气、渲染 LaTeX、查 cdecl 之类的功能，写了一坨屎山<br>然后跑了起来，加到班级群里反响还不错，同学玩得都挺有意思（</p><p>之后又去看了 girai-saya，整理了结构，又写了最近大火的 wordle、handle 两个游戏，都放到了服务器上跑了<br>（虽然但是，这也是第一次用 screen，第一次用 vsc ssh 远程连接服务器，<del>老火星人了</del>）</p><p>现在代码还很乱，或许以后收拾收拾也扔到 GitHub 上（？</p><h3 id="ManimGL"><a href="#ManimGL" class="headerlink" title="ManimGL"></a>ManimGL</h3><p>本来是打算这个假期用 manim 做视频来着，结果却变成了修 manim / 改 manim<br><img src="/p/78cef964/manimgl.jpg"><br>总共开了 7 个 pull request，review 了 13 个 pr，发了 3 个 release<br>鸽兰特也给力，基本上 review 之后的当晚十二点就会给 merge</p><p>主要干的事呢，有两个</p><ul><li>修 SVGMobject，之前也专门发过文章 <a href="/p/81940d35.html">修复 ManimGL 中的 SVGMobject</a>，学到的 SVG 也放到了 <a href="https://note.tonycrane.cc/cs/web/svg/">notebook</a> 里。基本上完善了基本的 SVG 需要，包括样式和复杂路径的处理（虽然之后<a href="https://github.com/YishiMichael">忆拾</a>用<a href="https://github.com/3b1b/manim/pull/1731">更好的方法</a>(指调库)来改进了 SVGMobject）</li><li>写类型注解，主要是为了方便用 vsc 的时候提示，以及方便后续写文档。就花了三天多时间爆肝，给 ManimGL 里的所有类方法、函数都添加了类型注解，在 <a href="https://github.com/3b1b/manim/pull/1736">#1736</a> 这个 pr 里，竟然写了 2791+ 1401-，我都觉得不可思议（</li></ul><p><img src="/p/78cef964/1736.png"><br>大概还需要很长时间来检查，然后再 merge<br>之后还打算给所有文件添加 __all__，然后规范一下代码格式，再根据一些网站改进一下代码质量<br>鸽了，有时间就搞 _(:з」∠)_</p><h2 id="任务方面"><a href="#任务方面" class="headerlink" title="任务方面"></a>任务方面</h2><h3 id="暖冬宣讲"><a href="#暖冬宣讲" class="headerlink" title="暖冬宣讲"></a>暖冬宣讲</h3><p>算是这个假期的一个主要任务（？<br>宣讲队一共六个人，也不是太打得起精神<br>就边摆边干活，糊弄糊弄过去了</p><p>虽然但是，效果看上去还是可以的，群里收了 350+ 人，宣讲线上会议也有 110+ 人在听<br>希望没有给浙大丢脸（笑</p><h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><p>新的一期视频打算和 GZTime、NanoApe 一起讲二维码<br>然后刚考完试就去看了 QRCode 这个包<br>然后按照自己的习惯拿 manim 重写了一个二维码生成器<br>又改了改就成为了新视频的轮子</p><p>之后开始写文案<br>和 GZTime 讨论了一下整体的安排之后花了两天写完了全部的文案（“两天”，其中穿插了打 baba、打文字游戏、看开端，乐）<br>大概 260 条，5k+ 字左右</p><p>然后做了第一个场景之后<del>累了</del>，就鸽了，留着慢慢做</p><h3 id="CTF"><a href="#CTF" class="headerlink" title="CTF"></a>CTF</h3><p>假期也没打几场比赛，HGAME 没参加，RealWorldCTF 没起到什么作用</p><p>VNCTF 个人赛倒是打了打，太拉垮了，所以 writeup 就没往这里发，扔到 note 里留着了：<a href="https://note.tonycrane.cc/writeups/vnctf2022/">VNCTF 2022 Writeup</a></p><h2 id="生活方面"><a href="#生活方面" class="headerlink" title="生活方面"></a>生活方面</h2><p>正常过了个年（此处略去……）</p><p><del>作息还是没调整过来，天天一点多睡，早上十点多醒</del>（悲）</p><h2 id="学习方面"><a href="#学习方面" class="headerlink" title="学习方面"></a>学习方面</h2><p>？<br>？？<br>寒假学什么习<br>数分线代想重学，没学上<br>汇编语言也没完整看完一遍<br>下学期的数逻也一点也没看上<br>Rust 想重新学好久了，也没学上</p><p>我怎么这么弱啊.jpg</p><p>shya 次一定，shya 次一定</p><hr><p>这么一看这个假期做的事情还是挺多的？(´▽｀)<br>马上开学了，希望我能从一大堆硬课和南方的气候中活下来 _(´ཀ`」 ∠)__ </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;一个月的寒假这么快就过完了，闲来无聊，还是写点东西记录一下这个假期干的事情吧 _(:з」∠)_&lt;/p&gt;
&lt;p&gt;手机里的待办一点点变多，然后又一点点变少（&lt;del&gt;不想干了/不会做了，所以删了，乐&lt;/del&gt;），总归还是做了点东西的&lt;/p&gt;</summary>
    
    
    
    <category term="生活" scheme="https://blog.tonycrane.cc/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="生活" scheme="https://blog.tonycrane.cc/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>修复 ManimGL 中的 SVGMobject</title>
    <link href="https://blog.tonycrane.cc/p/81940d35.html"/>
    <id>https://blog.tonycrane.cc/p/81940d35.html</id>
    <published>2022-01-25T15:18:14.000Z</published>
    <updated>2022-02-16T07:45:57.544Z</updated>
    
    <content type="html"><![CDATA[<p>今天一天都在修 ManimGL 里的 SVGMobject，还是比较有收获的，写篇文章记录一下<br>起因是 fran 给了一个在 ManimGL 里表现怪异的 svg 文件：<a href="/81940d35/formula.svg">formula.svg</a></p><span id="more"></span><p>它在 ManimGL 下表现的是：<br><img src="/p/81940d35/formula.png"><br>不难发现几个问题：</p><ul><li>整体上下翻转了</li><li>左边多了一条粗线</li><li>矩阵大括号中间断开了</li><li>角标没有缩放，不在正确位置上</li></ul><p>通过检查 svg 源码可以发现主要是两个问题，一个是直接从嵌套在内层的 svg 元素中提取出了物件，二是没有正确处理 svg 的 transform</p><h2 id="只从最外层-svg-提取物件"><a href="#只从最外层-svg-提取物件" class="headerlink" title="只从最外层 svg 提取物件"></a>只从最外层 svg 提取物件</h2><p>这个问题产生的原因是在 <code>SVGMobject.init_points</code> 这个方法中，原来的代码是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">doc = minidom.parse(self.file_path)</span><br><span class="line">self.ref_to_element = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> svg <span class="keyword">in</span> doc.getElementsByTagName(<span class="string">&quot;svg&quot;</span>):</span><br><span class="line">    mobjects = self.get_mobjects_from(svg)</span><br><span class="line">    <span class="keyword">if</span> self.unpack_groups:</span><br><span class="line">        self.add(*mobjects)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        self.add(*mobjects[<span class="number">0</span>].submobjects)</span><br><span class="line">doc.unlink()</span><br></pre></td></tr></table></figure><p>很明显，这里的 for 循环提取了全部的 svg 标签，然后从中提取出 mobjects</p><p>但是这样的话如果有嵌套在 svg 内部的 svg 就也会从中提取 mobjects，但这时就没有了外层的约束，导致重复生成，而且生成的位置错误</p><blockquote><p>在上面那个 svg 中就是这样，大括号分为三个部分，其中中间的一段是复用了一个元素，并且使用的是 svg 标签</p></blockquote><p>解决方法也很直接，直接遍历 doc 的子节点 childNodes，并且判断其 tagName 是否是 “svg”，不是就跳过<br>但这样仍存在一个问题，doc 的子节点可能不是 Element，比如注释，就是 Comment，它并没有 tagName 属性，所以还需要先判断一下这个节点是不是 Element</p><p>最终的解决办法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> child <span class="keyword">in</span> doc.childNodes:</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(child, minidom.Element): <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> child.tagName != <span class="string">&#x27;svg&#x27;</span>: <span class="keyword">continue</span> </span><br><span class="line">    mobjects = self.get_mobjects_from(child)</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h2 id="正确处理-transforms"><a href="#正确处理-transforms" class="headerlink" title="正确处理 transforms"></a>正确处理 transforms</h2><p>上面 svg 中，角标没有缩放、放到正确位置的原因是，这两个操作在这个 svg 中都使用了 transform 来达成，所以它的值是 “translate(…) scale(…)”，前者负责平移，后者负责缩放</p><p>但是 ManimGL 中原来的处理方法是直接使用 “matrix(…)” “translate(…)” “scale(…)” 进行匹配，将中间内容当作参数，如果中途任何环节出现报错，都直接忽略掉<br>但是这样它会将这个 transform 解析成参数为 “…) scale(…” 的一个 translate，这显然会在后面抛出异常</p><p>然后就尝试了使用空格分割<br>效果倒是出现了，但是还是有一点问题，角标距离元素的距离太近，对比发现，可能是因为缩放和平移的施加顺序不同导致的</p><p>svg 标准中也有说明，transform 应该从右向左依次施加，所以临时的修正写法是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">transforms = element.getAttribute(<span class="string">&#x27;transform&#x27;</span>).split(<span class="string">&quot; &quot;</span>)[::-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> transform <span class="keyword">in</span> transforms:</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>但是这样也有问题，因为标准中对于 transform 串的规定很宽松，两个 transform 中间可以不加空格，也可以有任意多空格，名字和左括号中间也可以有空格……</p><p>然后参考了 ManimCE，发现了里面有一个链接，是一个 python 写的 svg 解析器：<a href="https://github.com/cjlano/svg">https://github.com/cjlano/svg</a></p><p>按照里面的写法，使用了正则表达式来匹配名称和参数，根据规范，svg 仅支持 css transform 中的 matrix translate scale rotate skewX skewY，但我顺手还加了 translateX/Y scaleX/Y<br>全部的正则和匹配方法是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">transform_names = [</span><br><span class="line">    <span class="string">&quot;matrix&quot;</span>, </span><br><span class="line">    <span class="string">&quot;translate&quot;</span>, <span class="string">&quot;translateX&quot;</span>, <span class="string">&quot;translateY&quot;</span>, </span><br><span class="line">    <span class="string">&quot;scale&quot;</span>, <span class="string">&quot;scaleX&quot;</span>, <span class="string">&quot;scaleY&quot;</span>, </span><br><span class="line">    <span class="string">&quot;rotate&quot;</span>, </span><br><span class="line">    <span class="string">&quot;skewX&quot;</span>, <span class="string">&quot;skewY&quot;</span></span><br><span class="line">]</span><br><span class="line">transform_pattern = re.<span class="built_in">compile</span>(<span class="string">&quot;|&quot;</span>.join([x + <span class="string">r&quot;[^)]*\)&quot;</span> <span class="keyword">for</span> x <span class="keyword">in</span> transform_names]))</span><br><span class="line">number_pattern = re.<span class="built_in">compile</span>(<span class="string">r&quot;[-+]?(?:\d+(?:\.\d*)?|\.\d+)(?:[eE][-+]?\d+)?&quot;</span>)</span><br><span class="line">transforms = transform_pattern.findall(element.getAttribute(<span class="string">&#x27;transform&#x27;</span>))[::-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> transform <span class="keyword">in</span> transforms:</span><br><span class="line">    op_name, op_args = transform.split(<span class="string">&quot;(&quot;</span>)</span><br><span class="line">    op_name = op_name.strip()</span><br><span class="line">    op_args = [<span class="built_in">float</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> number_pattern.findall(op_args)]</span><br></pre></td></tr></table></figure><p>其中第一个正则表达式很显然，匹配每一个名称，后面接任意多个非右括号的字符，然后是右括号<br>第二个字符比较复杂，可视化后还是比较清晰的：<br><img src="/p/81940d35/regex.png"><br>然后根据标准依次解决就好了：</p><ul><li>matrix 直接保留原来写好的就可以</li><li>translate 平移，translateX 时 y=0，translateX 时 x=0</li><li>scale 缩放，注意可能有负的情况，但是 ManimGL 已经禁止 scale 的时候 factor 小于等于 0，所以需要先 flip 一下（这也是为什么上面的公式上下颠倒了，因为有一个 scale(1, -1) 没有施加）</li><li>rotate 旋转，和 css 里不一样，这里的角度单位都是 deg，并且省去了 deg，而且可能会接受 3 个参数，这时后两个会做为一个坐标，表示旋转的中心点</li><li>skewX skewY 倾斜，可以直接转为 matrix：<ul><li>skewX(a): [1., 0., tana, 1., 0., 0.]</li><li>skewY(a): [1., tana, 0., 1., 0., 0.]</li></ul></li></ul><p>这之后上面的 svg 就可以正确渲染了：<br><img src="/p/81940d35/formula_.png"></p><hr><p>但是这之后还是有 bug，其中一个是老问题，在 path 元素的 string 中，有些时候会省略掉空格，导致原来的 ManimGL 无法处理，另一个是当 M 指令后紧接着 S 指令时，会因为点集内只有一个点而引起错误</p><h2 id="正确解析-path-string"><a href="#正确解析-path-string" class="headerlink" title="正确解析 path string"></a>正确解析 path string</h2><p>这个问题使用上面的那个正则表达式可以解决一部分，但是还有一个神奇的情况：两个 0 连着出现，也就是 “00”<br>这时后上面的正则会认为这是一个 0.0，而实际上，这是两个 0.0 并在了一起</p><p>然后 fran 改了改正则，在前面加了 “0|” 解决了这个问题</p><p>但是另一个更神奇的情况出现了：<code>A1.098 1.098 0 11.777 1.875z</code><br>看到这个第一反应肯定是五个数对吧，但是 A 指令只接受七个数</p><p>看了浏览器解析的结果后发现，参数实际上是 1.098 1.098 0 1 1 0.777 1.875<br>而这个是 1 1 .777 三个数而不是 11.777 一个数的原因是，A 指令的第 4、5 个参数是 flag，一定是 0 或 1</p><p>这样的话使用正则就很复杂了<br>一顿查找后发现了另一个解析 svg path 的库：<a href="https://github.com/regebro/svg.path/">https://github.com/regebro/svg.path/</a></p><p>按照里面的思路，重新写了一个 path 的解析器，即按照规则一个一个读取需要的数据，并且随时删掉开头的空格/逗号<br>其中读取单个浮点数用的还是上边的正则表达式</p><p>在重写了 path 解析之后，就很少因为这里出问题了</p><h2 id="正确处理-S-指令"><a href="#正确处理-S-指令" class="headerlink" title="正确处理 S 指令"></a>正确处理 S 指令</h2><p>对于下一个问题，报错出现在 <code>VMobject.get_reflection_of_last_handle</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_smooth_cubic_curve_to</span>(<span class="params">self, handle, point</span>):</span></span><br><span class="line">    self.throw_error_if_no_points()</span><br><span class="line">    new_handle = self.get_reflection_of_last_handle()</span><br><span class="line">    self.add_cubic_bezier_curve_to(new_handle, handle, point)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_reflection_of_last_handle</span>(<span class="params">self</span>):</span></span><br><span class="line">    points = self.get_points()</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * points[-<span class="number">1</span>] - points[-<span class="number">2</span>]</span><br></pre></td></tr></table></figure><p>这里这样做的原因是，S 指令会把前一个点的控制点关于前一个点中心对称，作为当前点的控制点。而这里仅有一个当前点 point[-1]，而没有控制点 point[-2]，导致了 IndexError</p><p>而标准里也说了，如果 S 指令前面没有其他生成路径的指令，直接把当前点当作控制点，所以改一下就好：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> self.get_num_points() == <span class="number">1</span>:</span><br><span class="line">    new_handle = self.get_points()[-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    new_handle = self.get_reflection_of_last_handle()</span><br></pre></td></tr></table></figure><hr><p>至此 SVGMobject 的 bug 基本上没剩多少了，但是还有几个标签没有实现，以及没有处理样式</p><p>而在样式处理这方面，ManimCE 做的已经很好了，打算有时间去借鉴过来 _(:з」∠)_</p><p>今天修 bug 的全部更改详见：<a href="https://github.com/3b1b/manim/pull/1712">3b1b/manim#1712</a></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://www.w3.org/TR/SVG/">SVG Standard</a></li><li><a href="https://github.com/cjlano/svg">cjlano/svg</a></li><li><a href="https://github.com/regebro/svg.path/">regebro/svg.path</a></li><li><a href="https://github.com/3b1b/manim/pull/1712">3b1b/manim#1712</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;今天一天都在修 ManimGL 里的 SVGMobject，还是比较有收获的，写篇文章记录一下&lt;br&gt;起因是 fran 给了一个在 ManimGL 里表现怪异的 svg 文件：&lt;a href=&quot;/81940d35/formula.svg&quot;&gt;formula.svg&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="manim" scheme="https://blog.tonycrane.cc/categories/manim/"/>
    
    <category term="笔记" scheme="https://blog.tonycrane.cc/categories/manim/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="笔记" scheme="https://blog.tonycrane.cc/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="github" scheme="https://blog.tonycrane.cc/tags/github/"/>
    
    <category term="manim" scheme="https://blog.tonycrane.cc/tags/manim/"/>
    
    <category term="python" scheme="https://blog.tonycrane.cc/tags/python/"/>
    
    <category term="bug" scheme="https://blog.tonycrane.cc/tags/bug/"/>
    
  </entry>
  
  <entry>
    <title>「QRCode 标准阅读」#3 解码纠错过程</title>
    <link href="https://blog.tonycrane.cc/p/12ee036b.html"/>
    <id>https://blog.tonycrane.cc/p/12ee036b.html</id>
    <published>2021-12-01T14:14:41.000Z</published>
    <updated>2021-12-01T14:45:57.109Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/p/f956b4.html">&lt; #2</a></p><h2 id="解码（11、Annex-B）"><a href="#解码（11、Annex-B）" class="headerlink" title="解码（11、Annex B）"></a>解码（11、Annex B）</h2><p>简要的解码过程：</p><ol><li>定位并获取图像中的二维码，并把图像中的黑白块提取为 1 和 0</li><li>读取格式信息<span id="more"></span><ul><li>释放掩码 <code>101010000010010</code></li><li>进行纠错</li><li>如果纠错失败则将二维码镜面对称再尝试</li></ul></li><li>读取版本信息（如果有的话）</li><li>读取格式信息中的掩码编号，并释放掩码</li><li>读取并恢复数据字和纠错字</li><li>纠错，如果检测到了错误就纠正</li><li>把数据字解码得到结果</li></ol><h3 id="纠错（Annex-B）"><a href="#纠错（Annex-B）" class="headerlink" title="纠错（Annex B）"></a>纠错（Annex B）</h3><p>Annex B 讲的纠错过程很简略，而且符号说明不全，很难看懂</p><p>去学了学 PGZ 解码：<a href="https://en.wikipedia.org/wiki/Reed%E2%80%93Solomon_error_correction#Peterson%E2%80%93Gorenstein%E2%80%93Zierler_decoder">Reed–Solomon_error_correction#Peterson–Gorenstein–Zierler_decoder</a></p><p>设当前版本下每块中有 $n$ 个字，$k$ 个数据字，$n-k$ 个纠错字，纠错容量为 $\nu$</p><p>首先定义原来的完整数据（即数据字和纠错字）从高位到低位为 $c_{n-1},c_{n-2},\cdots,c_0$ ，对应多项式为：</p><p>$$s(x)=\sum_{i=0}^{n-1}c_ix^i=c_{n-1}x^{n-1}+c_{n-2}x^{n-2}+\cdots+c_0$$</p><p>而且根据纠错码生成原理，$s(x)$ 可以被生成多项式 $g(x)$ 整除，其中</p><p>$$g(x)=\prod_{i=0}^{n-k-1}(x-\alpha^i)$$</p><p>所以 $s(x)$ 也有根 $s(\alpha^i)=0, i=0,1,\dots n-k-1$</p><p>再设接收到的消息多项式（可能有错）为 $r(x)$ ，误差多项式为 $e(x)$ ，满足：</p><p>$$r(x)=s(x)+e(x),\quad e(x)=\sum_{i=0}^{n-1}e_ix^i$$</p><p>先设一共有 $\nu$ 个错误，且每个错误的位置为 $i_k,k=0,1,\dots \nu-1$，所以有：</p><p>$$e(x)=\sum_{k=0}^{\nu-1}e_{i_k}x^{i_k}$$</p><p>最终的目标就是找到错误个数 $\nu$，错误位置 $i_k$，以及错误大小 $e_{i_k}$</p><h4 id="计算典型值"><a href="#计算典型值" class="headerlink" title="计算典型值"></a>计算典型值</h4><p>首先定义典型值（syndromes）为把 $\alpha^j$ 传入 $r(x)$ 得到的值 $S_j$，有：</p><p>$$S_j=r(\alpha^j)=s(\alpha^j)+e(\alpha^j)=e(\alpha^j)=\sum_{k=0}^{\nu-1}e_{i_k}(\alpha^j)^{i_k},j=0,1,\dots,n-k-1$$</p><p>此时如果得到的典型值都为 0，那说明没有错误</p><p>为了方便，再令 $X_k=\alpha^{i_k},Y_k=e_{i_k}$，这样 $X_k$ 也能用来定位错误，同时也有：</p><p>$$S_j=\sum_{k=0}^{\nu-1}Y_kX_k^j$$</p><p>写成矩阵形式就是：</p><p>$$<br>\begin{bmatrix}<br>X_0^0 &amp;X_2^0 &amp;\cdots &amp;X_{\nu-1}^0\\<br>X_0^1 &amp;X_1^1 &amp;\cdots &amp;X_{\nu-1}^1\\<br>\vdots &amp;\vdots &amp; &amp;\vdots\\<br>X_0^{n-k-1} &amp;X_1^{n-k-1} &amp;\cdots &amp;X_{\nu-1}^{n-k-1}<br>\end{bmatrix}<br>\begin{bmatrix}<br>Y_0\\Y_1\\\vdots\\Y_{\nu-1}<br>\end{bmatrix}=<br>\begin{bmatrix}<br>S_0\\S_1\\\vdots\\S_{n-k-1}<br>\end{bmatrix}<br>$$</p><p>所以只要求得位置 $X_k$ 就能得到错误大小，但是此时并不是线性的</p><h4 id="错误定位多项式"><a href="#错误定位多项式" class="headerlink" title="错误定位多项式"></a>错误定位多项式</h4><p>定义一个错误定位多项式（error locator polynomial）$\Lambda(x)$：</p><p>$$\Lambda(x)=\prod_{k=0}^{\nu-1}(1-xX_k)=1+\Lambda_1x+\Lambda_2x^2+\cdots+\Lambda_\nu x^\nu$$</p><p>可以看出 $\Lambda(X_k^{-1})=0$，所以对于 $0\leq j\leq\nu-1$ 有：</p><p>$$<br>Y_kX_k^{j+\nu}\Lambda(X_k^{-1}) =0<br>$$</p><p>$$<br>Y_{k}X_{k}^{j+\nu }(1+\Lambda _{1}X_{k}^{-1}+\Lambda _{2}X_{k}^{-2}+\cdots +\Lambda _{\nu }X_{k}^{-\nu })=0<br>$$</p><p>$$<br>Y_{k}X_{k}^{j+\nu }+\Lambda _{1}Y_{k}X_{k}^{j+\nu }X_{k}^{-1}+\Lambda _{2}Y_{k}X_{k}^{j+\nu }X_{k}^{-2}+\cdots +\Lambda _{\nu }Y_{k}X_{k}^{j+\nu }X_{k}^{-\nu }=0<br>$$</p><p>$$<br>Y_{k}X_{k}^{j+\nu }+\Lambda _{1}Y_{k}X_{k}^{j+\nu -1}+\Lambda _{2}Y_{k}X_{k}^{j+\nu -2}+\cdots +\Lambda _{\nu }Y_{k}X_{k}^{j}=0<br>$$</p><p>所以把 $k$ 从 $0$ 到 $\nu-1$ 累加起来也为 0：</p><p>$$\sum_{k=0}^{\nu-1}\left(Y_{k}X_{k}^{j+\nu }+\Lambda _{1}Y_{k}X_{k}^{j+\nu -1}+\Lambda _{2}Y_{k}X_{k}^{j+\nu -2}+\cdots +\Lambda _{\nu }Y_{k}X_{k}^{j}\right)=0$$</p><p>然后转换为每项累加并提取出 $\Lambda_i$：</p><p>$$\left(\sum _{k=1}^{\nu }Y_{k}X_{k}^{j+\nu }\right)+\Lambda _{1}\left(\sum _{k=1}^{\nu }Y_{k}X_{k}^{j+\nu -1}\right)+\cdots +\Lambda _{\nu }\left(\sum _{k=1}^{\nu }Y_{k}X_{k}^{j}\right)=0$$</p><p>根据典型值的定义有：</p><p>$$S_{j+\nu}+\Lambda_1S_{j+\nu-1}+\cdots+\Lambda_\nu S_k=0$$</p><p>把 $S_{j+\nu}$ 移到右边，并展开所有 $j$ 可以得到矩阵形式：</p><p>$$<br>\begin{bmatrix}<br>S_{0}&amp;S_{1}&amp;\cdots &amp;S_{\nu-1}\\S_{1}&amp;S_{2}&amp;\cdots &amp;S_{\nu}\\\vdots &amp;\vdots &amp;&amp;\vdots \\S_{\nu-1}&amp;S_{\nu}&amp;\cdots &amp;S_{2\nu -2}<br>\end{bmatrix}<br>\begin{bmatrix}\Lambda _{\nu }\\\Lambda _{\nu -1}\\\vdots \\\Lambda _{1}<br>\end{bmatrix}<br>=<br>\begin{bmatrix}<br>-S_{\nu}\\-S_{\nu +1}\\\vdots \\-S_{2\nu-1 }<br>\end{bmatrix}<br>$$</p><p>此时是一个线性方程组，而且 $S_i$ 全部已知，可以解得 $\Lambda_i$</p><h4 id="得到错误位置和大小"><a href="#得到错误位置和大小" class="headerlink" title="得到错误位置和大小"></a>得到错误位置和大小</h4><p>此时多项式 $\Lambda(x)$  已经完全已知，所以可以求得其根（用 Chien search 算法在伽罗瓦域上求根）</p><p>再算其倒数即可得到 $X_k$ ，然后可以寻找到错误位置 $i_k$</p><p>这时也就可以带入第一个方程组求得错误大小 $Y_k$（或者利用 Forney algorithm）</p><p>得到了 $e(x)$ 后就可以根据 $r(x)$ 算出原始信息 $s(x)$ 了</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;/p/f956b4.html&quot;&gt;&amp;lt; #2&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;解码（11、Annex-B）&quot;&gt;&lt;a href=&quot;#解码（11、Annex-B）&quot; class=&quot;headerlink&quot; title=&quot;解码（11、Annex B）&quot;&gt;&lt;/a&gt;解码（11、Annex B）&lt;/h2&gt;&lt;p&gt;简要的解码过程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;定位并获取图像中的二维码，并把图像中的黑白块提取为 1 和 0&lt;/li&gt;
&lt;li&gt;读取格式信息&lt;/li&gt;&lt;/ol&gt;</summary>
    
    
    
    
    <category term="笔记" scheme="https://blog.tonycrane.cc/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="CTF" scheme="https://blog.tonycrane.cc/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>「QRCode 标准阅读」#2 纠错码编码与图像生成</title>
    <link href="https://blog.tonycrane.cc/p/f956b4.html"/>
    <id>https://blog.tonycrane.cc/p/f956b4.html</id>
    <published>2021-12-01T14:14:17.000Z</published>
    <updated>2021-12-01T15:02:30.141Z</updated>
    
    <content type="html"><![CDATA[<div style="display: flex; justify-content: space-between;"><p><a href="/p/1c1e6bbc.html">&lt; #1</a></p><p><a href="/p/12ee036b.html">#3 &gt;</a></p></div><h2 id="纠错码编码（7-5）"><a href="#纠错码编码（7-5）" class="headerlink" title="纠错码编码（7.5）"></a>纠错码编码（7.5）</h2><h3 id="纠错容量（7-5-1）"><a href="#纠错容量（7-5-1）" class="headerlink" title="纠错容量（7.5.1）"></a>纠错容量（7.5.1）</h3><p>纠错字（error correction codewords）可以纠正两种错误，一种是比如无法扫描或无法解码的已知位置的错误字（erasures），一种是未知位置的错误字（errors），一个 erasures 可以由一个纠错字纠错，而一个 errors 需要两个纠错字来纠错</p><span id="more"></span><p>可以纠错的 erasures 和 errors 的数量满足：</p><p>$$e+2t\leq d-p$$</p><p>其中 $e$ 是 erasures 的数量，$t$ 是 errors 的数量，$d$ 是纠错字的数量，$p$ 是被错误解析的保护字数量</p><p>其中 $p$ 由版本决定：</p><ul><li>$p=3$：版本 1-L</li><li>$p=2$：版本 1-M、2-L</li><li>$p=1$：版本 1-Q、1-H、3-L</li><li>$p=0$：其他所有版本</li></ul><h4 id="分块编码纠错码"><a href="#分块编码纠错码" class="headerlink" title="分块编码纠错码"></a>分块编码纠错码</h4><p>根据版本号及纠错等级，数据序列需要被分成 1 个或多个块，每块内需要单独编码纠错码</p><p>如果需要补充的话一律全部补充 0 比特到需要的长度</p><p>具体不同版本的分块块数和每块中数量安排以及纠错容量都在文档中 P38-44（pdf 中 P46-52）的大表格 Table 9 中</p><h3 id="生成纠错码（7-5-2）"><a href="#生成纠错码（7-5-2）" class="headerlink" title="生成纠错码（7.5.2）"></a>生成纠错码（7.5.2）</h3><h4 id="伽罗瓦域"><a href="#伽罗瓦域" class="headerlink" title="伽罗瓦域"></a>伽罗瓦域</h4><p>生成纠错码之前要先将所有数据字转换成一个多项式，使其限制于伽罗瓦域 $GF(2^3)\bmod 100011101$ 中，而且后续的四则运算也都是该伽罗瓦域中的运算</p><p>具体伽罗瓦域的生成原理可以看：<a href="https://www.codenong.com/cs105738710/">https://www.codenong.com/cs105738710/</a></p><p>简单来说就是多项式的加减法都是异或，乘除法要每一个比特模 2，每一个字节模 100011101（即该伽罗瓦域中的本原多项式 $x^8+x^4+x^3+x^2+1$）</p><p>具体多项式 mod 运算的方法可以看：<a href="https://blog.csdn.net/yaongtime/article/details/17200401">https://blog.csdn.net/yaongtime/article/details/17200401</a></p><p>简单来说就是多项式的长除法取模，而且注意这里的加减都是伽罗瓦域中的加减，即异或</p><h4 id="生成多项式（Annex-A）"><a href="#生成多项式（Annex-A）" class="headerlink" title="生成多项式（Annex A）"></a>生成多项式（Annex A）</h4><p>纠错码生成多项式的一般表达形式是：</p><p>$$g(x)=(x-\alpha^0)(x-\alpha^1)\cdots(x-\alpha^{n-1})$$</p><p>其中 $n$ 为纠错码字的个数，其中 $\alpha=2$， $\alpha^k$ 的是在伽罗瓦域下的运算，即：</p><p>$\alpha^0 = 1;\ \alpha^1=2;\ \alpha^2=4;\ \cdots;\ \alpha^7=128$</p><p>$\alpha^8=256\bmod 285=256\oplus 285=29;\ \alpha^9=29\times2=58;\ \cdots$</p><p>具体计算 $\alpha^k$ 的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">alpha</span>(<span class="params">k</span>):</span></span><br><span class="line">    res = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">        res *= <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> res &gt;= <span class="number">256</span>:</span><br><span class="line">            res ^= <span class="number">285</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>文档附录 A 中已经展开了所有可能 $n$ 值下的36个生成多项式</p><h4 id="生成纠错码"><a href="#生成纠错码" class="headerlink" title="生成纠错码"></a>生成纠错码</h4><p>文档里给了一个感觉比较晦涩难懂的图来展示生成纠错码的过程：</p><p><img src="/p/f956b4/ecgen.png"></p><p>不是很容易理解，于是找了另一篇文章：<a href="https://blog.csdn.net/ljm1995/article/details/88819664">https://blog.csdn.net/ljm1995/article/details/88819664</a></p><p>举个例子，比如要编码 12345678 这八个数字</p><p>版本 1-L，查 Table 9 得到分为 1 块，且该块内总字数为 26，数据字数为 19，纠错字数为 26-19=7</p><p>根据前面所说，比特流应该是： <code>0001 0000001000 0001111011 0111001000 1001110 0000</code></p><p>补成 8 的倍数长度： <code>00010000 00100000 01111011 01110010 00100111 00000000</code></p><p>添加 padding bits（补到 19 个字节）： <code>00010000 00100000 01111011 01110010 00100111 00000000 11101100 00010001 11101100 00010001 11101100 00010001 11101100 00010001 11101100 00010001 11101100 00010001 11101100</code></p><p>写成多项式形式，次数是 19 次，整体乘 $x^7$：</p><p>$$16x^{25}+32x^{24}+123x^{23}+114x^{22}+39x^{21}+236x^{19}+\\17x^{18}+236x^{17}+17x^{16}+236x^{15}+17x^{14}+236x^{13}+\\17x^{12}+236x^{11}+17x^{10}+236x^{9}+17x^{8}+236x^{7}$$</p><p>再查附录 A 得到次数为 7 的生成多项式，并整体乘 $x^{18}$：</p><p>$$x^{25}+\alpha^{87}x^{24}+\alpha^{229}x^{23}+\alpha^{146}x^{22}+\alpha^{149}x^{21}+\\\alpha^{238}x^{20}+\alpha^{102}x^{19}+\alpha^{21}x^{18}$$</p><p>然后把第一个多项式除第二个多项式取余数</p><p>可以这样计算，把第二个多项式整体乘 16 即 $\alpha^4$：</p><p>$$\alpha^4x^{25}+\alpha^{91}x^{24}+\alpha^{233}x^{23}+\alpha^{150}x^{22}+\alpha^{153}x^{21}+\\\alpha^{242}x^{20}+\alpha^{106}x^{19}+\alpha^{25}x^{18}$$</p><p>计算出系数的值：</p><p>$$16x^{25}+163x^{24}+243x^{23}+85x^{22}+146x^{21}+\\176x^{20}+52x^{19}+3x^{18}$$</p><p>之后与第一个多项式异或得到：</p><p>$$131x^{24}+136x^{23}+197x^{22}+181x^{21}+216x^{19}+18x^{18}+\\236x^{17}+17x^{16}+236x^{15}+17x^{14}+236x^{13}+\\17x^{12}+236x^{11}+17x^{10}+236x^{9}+17x^{8}+236x^{7}$$</p><p>这之后最高次就变成了 24 次，重复整个过程直到结果只剩下 7 项（即最高次为 6 次）时即可得到：</p><p>$$188x^6+247x^5+62x^4+248x^3+53x^2+170x+224$$</p><p>所以纠错码就是：<code>188 247 62 248 53 170 224</code></p><p>转为二进制： <code>10111100 11110111 00111110 11111000 00110101 10101010 11100000</code></p><blockquote><p>所以整个二维码的编码区域（除格式信息外）全部内容就是： <code>00010000 00100000 01111011 01110010 00100111 00000000 11101100 00010001 11101100 00010001 11101100 00010001 11101100 00010001 11101100 00010001 11101100 00010001 11101100 10111100 11110111 00111110 11111000 00110101 10101010 11100000</code></p></blockquote><p>纠错码可以直接用 python 的 reedsolo 包来求解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> reedsolo <span class="keyword">import</span> RSCodec, ReedSolomonError</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>rsc = RSCodec(<span class="number">7</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(rsc.encode([<span class="number">16</span>, <span class="number">32</span>, <span class="number">123</span>, <span class="number">114</span>, <span class="number">39</span>, <span class="number">0</span>, <span class="number">236</span>, <span class="number">17</span>, <span class="number">236</span>, <span class="number">17</span>, <span class="number">236</span>, <span class="number">17</span>, <span class="number">236</span>, <span class="number">17</span>, <span class="number">236</span>, <span class="number">17</span>, <span class="number">236</span>, <span class="number">17</span>, <span class="number">236</span>]))</span><br><span class="line">[<span class="number">16</span>, <span class="number">32</span>, <span class="number">123</span>, <span class="number">114</span>, <span class="number">39</span>, <span class="number">0</span>, <span class="number">236</span>, <span class="number">17</span>, <span class="number">236</span>, <span class="number">17</span>, <span class="number">236</span>, <span class="number">17</span>, <span class="number">236</span>, <span class="number">17</span>, <span class="number">236</span>, <span class="number">17</span>, <span class="number">236</span>, <span class="number">17</span>, <span class="number">236</span>, <span class="number">188</span>, <span class="number">247</span>, <span class="number">62</span>, <span class="number">248</span>, <span class="number">53</span>, <span class="number">170</span>, <span class="number">224</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(rsc.encode([<span class="number">16</span>, <span class="number">32</span>, <span class="number">123</span>, <span class="number">114</span>, <span class="number">39</span>, <span class="number">0</span>, <span class="number">236</span>, <span class="number">17</span>, <span class="number">236</span>, <span class="number">17</span>, <span class="number">236</span>, <span class="number">17</span>, <span class="number">236</span>, <span class="number">17</span>, <span class="number">236</span>, <span class="number">17</span>, <span class="number">236</span>, <span class="number">17</span>, <span class="number">236</span>]))[-<span class="number">7</span>:]</span><br><span class="line">[<span class="number">188</span>, <span class="number">247</span>, <span class="number">62</span>, <span class="number">248</span>, <span class="number">53</span>, <span class="number">170</span>, <span class="number">224</span>]</span><br></pre></td></tr></table></figure><h2 id="剩余步骤（7-6-7-10）"><a href="#剩余步骤（7-6-7-10）" class="headerlink" title="剩余步骤（7.6~7.10）"></a>剩余步骤（7.6~7.10）</h2><h3 id="合成序列（7-6）"><a href="#合成序列（7-6）" class="headerlink" title="合成序列（7.6）"></a>合成序列（7.6）</h3><p>首先按照 2 中所述给完整信息编码成数据序列，其中也包含 padding bits，且长度为 8 的倍数</p><p>然后根据 3.1.1 中所说对数据序列进行分块，然后对每块分别生成纠错码</p><p>最后把数据序列的所有块按照字节依次交错合成新的数据序列，然后把纠错码的所有块按照字节交错合成纠错码序列。把新的数据序列和纠错码序列连接在一起，如果总长度不够二维码的容量，则在后面补充 3/4/7 个 0 比特（需要补多少在 Table 1 中有定义）</p><p>而且这样也要保证最短的数据块在最前面（已经由 Table 9 定义）</p><p>比如 5-H 版本的序列，需要分为 4 块，前两块是 11 个数据字、22 个纠错字，后两块是 12 个数据字、22 个纠错字：</p><p><img src="/p/f956b4/a.png"></p><p>最后的序列就是 $D_1,D_{12},D_{23},D_{35},\cdots,D_{45},D_{34},D_{46},E_1,E_{23},\cdots,E_{88}$</p><h3 id="填充数据（7-7）"><a href="#填充数据（7-7）" class="headerlink" title="填充数据（7.7）"></a>填充数据（7.7）</h3><p>把前面合成的完整消息序列填到二维码中，首先要先填充功能图案，然后预留出格式信息、版本信息的位置</p><p>填充时以两列为单位，即每次交替填充两列。从最右下角开始是最高位的比特，然后从右向左从下向上交替填充，到了上界时左转向下继续填充，遇到对齐图案直接穿过，遇到对齐图案边界则变为一行</p><p>也可以按照字节来依次填充，如果是向上填充，则最高位在下端，反之在上段。每个字节块内的最高位尽量取最右侧的，但如果最下(上)端只有一个比特的位置，则选它作为最高比特的位置</p><p>反正按顺序正常填就行了，遇到东西就绕</p><p><img src="/p/f956b4/Untitled%206.png"></p><p><img src="/p/f956b4/Untitled%207.png"></p><p><img src="/p/f956b4/Untitled%208.png"></p><p><img src="/p/f956b4/Untitled%209.png"></p><p><img src="/p/f956b4/Untitled%2010.png"></p><h3 id="掩码遮盖（7-8）"><a href="#掩码遮盖（7-8）" class="headerlink" title="掩码遮盖（7.8）"></a>掩码遮盖（7.8）</h3><p>填充后的数据还要遮盖一层掩码（异或）来平衡黑白块的数量，以及减少容易产生扫描错误的大块和形似功能图案的部分出现</p><p>QR 码一共有 8 种掩码，每个掩码有一个 3 bits 的编号，和一个生成公式。这个公式用来生成掩码图样，以左上为原点，向右、下为正方向，坐标满足这个公式的点在图样中是黑色（1），不满足的是白色（0）。在版本 1 中的掩码图像表现为：</p><p><img src="/p/f956b4/Untitled%2011.png"></p><p>进行掩码操作就是把除去功能图案和版本信息、格式信息之外的数据部分每一块的值与掩码图样异或</p><p>整个操作需要生成分别使用不同掩码的 8 个图样，然后计算出损失分数（penalty points score），然后采用损失分数最小的掩码模式作为最终的掩码模式</p><h4 id="计算损失分数（7-8-3）"><a href="#计算损失分数（7-8-3）" class="headerlink" title="计算损失分数（7.8.3）"></a>计算损失分数（7.8.3）</h4><p>虽然进行掩码操作时仅对非功能图案、非版本信息格式信息的数据区域进行掩码，但是计算损失分数时按照整个二维码计算</p><p>计算损失分有四个规则：</p><ul><li>相邻一行或一列内出现连续五个相同颜色块时损失分 +3，之后连续块数每加一，损失分 +1</li><li>寻找内部颜色相同的 2*2 的块，每出现一个损失分 +3</li><li>在每行和每列中寻找 <code>10111010000</code> 和 <code>00001011101</code> ，每出现一个损失分 +40</li><li>评估黑色块占全部块数的比例，如果在 45%~55% 间则不增加损失分，在 40%~45%、55%~60% 间则损失分 +10，在 35%~40%、60%~65% 间则损失分 +10*2，以此类推</li></ul><p>更详细的例子可以看：<a href="https://www.thonky.com/qr-code-tutorial/data-masking">https://www.thonky.com/qr-code-tutorial/data-masking</a></p><p>然后对所有掩码结果计算损失分数后选择分数最低的一个作为最终结果</p><h3 id="格式信息（7-9）"><a href="#格式信息（7-9）" class="headerlink" title="格式信息（7.9）"></a>格式信息（7.9）</h3><p>QRCode 的格式信息是 15 bits 的序列，其中前 5 位是数据，后 10 位是针对格式信息的纠错码（由 (15, 5) BCH 码生成）</p><p>5 bits 的数据前 2 位是纠错等级标识符，分别是 L -&gt; <code>01</code> 、M -&gt; <code>00</code> 、Q -&gt; <code>11</code> 、H -&gt; <code>10</code></p><p>后 3 位是上面说到的掩码编号</p><p>然后后接 10 bits 纠错码，最后整体异或 <code>101010000010010</code> 防止产生全零数据序列</p><h4 id="生成纠错码（Annex-C）"><a href="#生成纠错码（Annex-C）" class="headerlink" title="生成纠错码（Annex C）"></a>生成纠错码（Annex C）</h4><p>先得到前 5 bits 的数据，然后化为多项式，整体乘 $x^{10}$，再除以生成多项式 $G(x)=x^{10}+x^8+x^5+x^4+x^2+x+1$ 得到余数转换为后 10 bits 的纠错码</p><ul><li><strong>例子</strong><ul><li>纠错等级 M，掩码编号 101</li><li>5 bits 数据： <code>00101</code></li><li>写为多项式： $x^2+1$</li><li>整体乘 $x^{10}$： $x^{12}+x^{10}$</li><li>除以 $G(x)$： 商 $x^2$，余数 $x^7+x^6+x^4+x^3+x^2$</li><li>余数转为 10 bits 纠错码： <code>0011011100</code></li><li>加上原数据： <code>001010011011100</code></li><li>异或 <code>101010000010010</code>： <code>100000011001110</code></li></ul></li></ul><p>因为 5 bits 的数据一共只有 32 种情况，所以附录 C 中直接给出了完整的表格：</p><p><img src="/p/f956b4/TableC1.png" alt="Table C.1 全部可能格式信息"></p><p><strong>纠错</strong>：最多可以纠正 3 bits 的错误，先把格式信息异或 <code>101010000010010</code> 得到原始序列，然后与 Table C.1 中的有效格式信息进行对比，如果找不到说明有错误。此时仅选择 Table C.1 中与错误格式信息相差比特最少的一个作为纠正后的格式信息即可，如果相差少于等于 3 个比特，则视为纠正成功</p><h4 id="填入二维码"><a href="#填入二维码" class="headerlink" title="填入二维码"></a>填入二维码</h4><p>左上角的格式信息区域填充一份完整的格式信息（最高位在左），左下角和右上角合起来是一份完整的格式信息（最高位在左下角的最下，最低位在右上角的最右）。并且左下角的格式信息上方（位置<code>(4V+9,8)</code>）有一块始终是黑色：</p><p><img src="/p/f956b4/Untitled%2018.png"></p><h3 id="版本信息（7-10）"><a href="#版本信息（7-10）" class="headerlink" title="版本信息（7.10）"></a>版本信息（7.10）</h3><p>在版本 7 及以上的二维码中需要填入版本信息来确保准确度</p><p>版本信息只储存了该二维码的版本号（7～40），一共 18 bits，前 6 bits 为版本号的二进制（从 <code>000111</code> 到 <code>101000</code>），后 12 bits 为由 (18, 6) Golay code 生成的纠错码</p><p>不同于格式信息，因为版本号不会出现全零，所以不需要进行掩码操作</p><h4 id="生成纠错码（Annex-D）"><a href="#生成纠错码（Annex-D）" class="headerlink" title="生成纠错码（Annex D）"></a>生成纠错码（Annex D）</h4><p>和格式信息的纠错码类似，先把前 6 bits 转为多项式，然后整体乘 $x^{12}$，得到的结果除以生成多项式 $G(x)=x^{12}+x^{11}+x^{10}+x^9+x^8+x^5+x^2+x^1$ ，把余数转为 12 bits 二进制就是纠错码了</p><p>因为只有 34 个版本有版本信息，所以也就只有 34 种有效的版本信息序列，附录 D 的 Table D.1 中给出了完整的 34 个版本信息序列</p><p><img src="/p/f956b4/TableD1.png" alt="Table D.1 全部有效版本信息序列"></p><p>和格式信息一样，纠错时对照表格选择相差比特数最小的即可。并且版本信息也只能纠正小于等于 3 个错误</p><h4 id="填入二维码-1"><a href="#填入二维码-1" class="headerlink" title="填入二维码"></a>填入二维码</h4><p>在版本 7 以上的二维码中已经预留出了两个 6*3 大小的区域，一个位于左下分割线的上方时序图案左侧，一个位于右上分割线左侧时序图案的上方</p><p>按照下图顺序填入即可：</p><p><img src="/p/f956b4/Untitled%2020.png"></p><hr><p>未完待续……<a href="/p/12ee036b.html">「QRCode 标准阅读」#3 解码纠错过程</a></p>]]></content>
    
    
    <summary type="html">&lt;div style=&quot;display: flex; justify-content: space-between;&quot;&gt;

&lt;p&gt;&lt;a href=&quot;/p/1c1e6bbc.html&quot;&gt;&amp;lt; #1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/p/12ee036b.html&quot;&gt;#3 &amp;gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;纠错码编码（7-5）&quot;&gt;&lt;a href=&quot;#纠错码编码（7-5）&quot; class=&quot;headerlink&quot; title=&quot;纠错码编码（7.5）&quot;&gt;&lt;/a&gt;纠错码编码（7.5）&lt;/h2&gt;&lt;h3 id=&quot;纠错容量（7-5-1）&quot;&gt;&lt;a href=&quot;#纠错容量（7-5-1）&quot; class=&quot;headerlink&quot; title=&quot;纠错容量（7.5.1）&quot;&gt;&lt;/a&gt;纠错容量（7.5.1）&lt;/h3&gt;&lt;p&gt;纠错字（error correction codewords）可以纠正两种错误，一种是比如无法扫描或无法解码的已知位置的错误字（erasures），一种是未知位置的错误字（errors），一个 erasures 可以由一个纠错字纠错，而一个 errors 需要两个纠错字来纠错&lt;/p&gt;</summary>
    
    
    
    
    <category term="笔记" scheme="https://blog.tonycrane.cc/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="CTF" scheme="https://blog.tonycrane.cc/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>「QRCode 标准阅读」#1 构成及数据编码</title>
    <link href="https://blog.tonycrane.cc/p/1c1e6bbc.html"/>
    <id>https://blog.tonycrane.cc/p/1c1e6bbc.html</id>
    <published>2021-11-29T16:20:06.000Z</published>
    <updated>2021-12-01T15:02:30.141Z</updated>
    
    <content type="html"><![CDATA[<div style="display: flex; justify-content: space-between;"><p><a href="/p/409d352d.html">&lt; #0</a></p><p><a href="/p/f956b4.html">#2 &gt;</a></p></div><h2 id="基础描述及结构（6-1、6-3）"><a href="#基础描述及结构（6-1、6-3）" class="headerlink" title="基础描述及结构（6.1、6.3）"></a>基础描述及结构（6.1、6.3）</h2><h3 id="基础描述（5-3、6-1）"><a href="#基础描述（5-3、6-1）" class="headerlink" title="基础描述（5.3、6.1）"></a>基础描述（5.3、6.1）</h3><ul><li>块位置：左上角为原点 (0, 0) 向下x+，向右y+</li><li>版本表示：Version V-E（其中V是版本号，E是纠错等级）</li><li>数据表示：黑块-1 白块-0（可以带背景全部反色）</li><li>大小：从版本1到版本40依次是 21x21 ～ 177x177（每增加一个版本，边长增加4）<span id="more"></span></li><li>支持的最多字符数（版本40）<ul><li>数字模式：7089</li><li>字母模式：4296</li><li>字节模式：2953</li><li>日文模式：1817</li></ul></li><li>纠错等级允许的恢复比例<ul><li>L：7%</li><li>M：15%</li><li>Q：25%</li><li>H：30%</li></ul></li></ul><h3 id="二维码结构（6-3）"><a href="#二维码结构（6-3）" class="headerlink" title="二维码结构（6.3）"></a>二维码结构（6.3）</h3><ul><li>功能图案（function patterns）<ul><li>特征符（finder pattern）7x7黑圈 5x5白圈 3x3黑块</li><li>分割线（separator）在特征符周围的一圈全白区域</li><li>时序图案（timing patterns）第7行第7列的两条黑白条纹</li><li>对齐图案（alignment patterns）版本1无，版本2-6 1个，版本7-13 6个……（附录E）</li><li>静默区（quiet zone）至少4个单位宽</li></ul></li><li>编码区域（encoding region）<ul><li>格式信息（format information）左上角分割线外一圈，左下角分割线右侧，右上角分割线下侧</li><li>版本信息（version information）版本7后才有，在左下分割线上侧，右上分割线左侧</li><li>数据及纠错码区域</li></ul></li></ul><p><img src="/p/1c1e6bbc/structure.png"></p><h2 id="数据编码（7-4）"><a href="#数据编码（7-4）" class="headerlink" title="数据编码（7.4）"></a>数据编码（7.4）</h2><h3 id="数据序列（7-4-1）"><a href="#数据序列（7-4-1）" class="headerlink" title="数据序列（7.4.1）"></a>数据序列（7.4.1）</h3><p>默认的 ECI 模式下，比特流以模式标识符开始。如果不是默认 ECI 模式，则需要从 ECI 头开始：</p><ul><li>（4 bits）ECI 模式标识符</li><li>（8/16/24 bits）ECI Designator</li></ul><p>比特流的剩余部分由下面几部分组成：</p><ul><li>（4 bits）模式标识符</li><li>字符数量标识符（长度见下第二个表）</li><li>数据比特流</li></ul><table><thead><tr><th align="center">模式</th><th align="center">标识符</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">ECI</td><td align="center">0111</td><td align="left"></td></tr><tr><td align="center">数字模式</td><td align="center">0001</td><td align="left">只包含数字0-9，3个数字 10 bits</td></tr><tr><td align="center">字母数字模式</td><td align="center">0010</td><td align="left">45个字符，0-9A-Z 及9个符号 空格$%*+-./:，2个字符 11 bits</td></tr><tr><td align="center">字节模式</td><td align="center">0100</td><td align="left">每个字符 8 bits</td></tr><tr><td align="center">日本汉字模式</td><td align="center">1000</td><td align="left"></td></tr><tr><td align="center">结构添加模式</td><td align="center">0011</td><td align="left"></td></tr></tbody></table><table><thead><tr><th align="center">版本</th><th align="center">数字模式字符数量标识符长度</th><th align="center">字母模式……</th><th>字节模式……</th><th align="center">日文模式……</th></tr></thead><tbody><tr><td align="center">1～9</td><td align="center">10</td><td align="center">9</td><td>8</td><td align="center">8</td></tr><tr><td align="center">10～26</td><td align="center">12</td><td align="center">11</td><td>16</td><td align="center">10</td></tr><tr><td align="center">27～40</td><td align="center">14</td><td align="center">13</td><td>16</td><td align="center">12</td></tr></tbody></table><h3 id="ECI-模式（7-4-2）"><a href="#ECI-模式（7-4-2）" class="headerlink" title="ECI 模式（7.4.2）"></a>ECI 模式（7.4.2）</h3><p>ECI 模式即使用某些特定的字符映射来把字符转换为比特流</p><p>而且都使用字节模式来表示数据（即在 ECI 头后的模式标识符为字节模式的 0100）</p><p>每个 ECI 都有一个六位数编号（assignment value），可能占 1、2、3 个 codewords，具体标识方式见下表（占1个 codewords 时开头一定是0，占2个时开头一定是10，占3个时开头一定是110）表中 xxxxxxxx 表示编号的二进制</p><table><thead><tr><th align="center">ECI Assignment Value</th><th>Codewords values</th></tr></thead><tbody><tr><td align="center">000000 ～ 000127</td><td>0xxxxxxx</td></tr><tr><td align="center">000000 ～ 016383</td><td>10xxxxxx xxxxxxxx</td></tr><tr><td align="center">000000 ～ 999999</td><td>110xxxxx xxxxxxxx xxxxxxxx</td></tr></tbody></table><p>而且 ECI 模式下中途可以更换 ECI 指示器，一个 5C（01011100）表示换新的 ECI，后面要接6个 codewords 即6个数字（十六进制30～39）表示编号，而不是用上表中的表示方法。而 5C 正常情况下表示 \ ，所以表示 \ 这个原数据需要用两个 5C</p><ul><li><strong>例子 1</strong><ul><li>使用 ISO/IEC 8859-7（ECI 000009）来表示希腊字母ΑΒΓΔΕ（该 ECI 下表示为十六进制 A1 A2 A3 A4 A5）</li><li>比特流：<ul><li>ECI 标识符：<code>0111</code></li><li>ECI 编号：<code>00001001</code></li><li>字节模式标识符：<code>0100</code></li><li>字符数量：<code>00000101</code>（5个字符）</li><li>数据：<code>10100001 10100010 10100011 10100100 10100101</code></li></ul></li><li>所以最终的比特流：<code>0111 00001001 0100 00000101 10100001 10100010 10100011 10100100 10100101</code></li></ul></li><li><strong>例子 2（14.3）</strong><ul><li>需要编码的数据：ABC\123456<ul><li>数据流中十六进制（字节模式标识符0100后）：41 42 43 5C 5C 31 32 33 34 35 36</li></ul></li><li>需要编码的数据：ABC&lt;后接 ECI 123456 下的数据……&gt;<ul><li>数据流中十六进制（字节模式标识符0100后）：41 42 43 5C 31 32 33 34 35 36 ……</li></ul></li></ul></li></ul><h3 id="数字模式（7-4-3）"><a href="#数字模式（7-4-3）" class="headerlink" title="数字模式（7.4.3）"></a>数字模式（7.4.3）</h3><p>输入的数字字符串（因为开头可以是0）要被分成3个一组，每组会转换为 10 bits 的二进制串（999 -&gt; <code>1111100111</code>）。剩余不到3个的部分，如果剩2个数字，则将其转换为 7 bits 的二进制串（99 -&gt; <code>1100011</code>）如果剩1个数字，则将其转换为 4 bits 的二进制串（9 -&gt; <code>1001</code>）</p><p>然后开头加上数字模式标识符 <code>0001</code> 和数量标识符（字符个数转为二进制，并开头补0至长度，长度由版本决定，见上 7.4.1 部分的第二个表）</p><ul><li><strong>例子</strong><ul><li>数据内容： <code>01234567</code>（保留开头0）</li><li>数据流部分：<ul><li>数字模式标识符： <code>0001</code></li><li>数量标识符： <code>0000001000</code>（8，且版本1下规定为 10 bits）</li><li>数据：<ul><li>012 -&gt; <code>0000001100</code></li><li>345 -&gt; <code>0101011001</code></li><li>67 -&gt; <code>1000011</code></li></ul></li></ul></li><li>完整数据比特流： <code>0001 0000001000 0000001100 0101011001 1000011</code></li></ul></li></ul><p>数字模式下的比特流长度为：</p><p>$$B=M+C+10\times\lfloor\frac{D}{3}\rfloor+R$$</p><p>其中 M 为 4，C 为数量标识符长度（版本1～9为 10，版本10～26为 12，版本27～40为 14），D为输入字符个数，R为剩余部分（若 D mod 3 = 0 则为 0，若 D mod 3 = 1 则为 4，若 D mod 3 = 2 则为 7）</p><h3 id="字母数字模式（7-4-4）"><a href="#字母数字模式（7-4-4）" class="headerlink" title="字母数字模式（7.4.4）"></a>字母数字模式（7.4.4）</h3><p>数字字母模式（Alphanumeric mode）下支持的编码字符有45个，把它们从0编号至44。其中 0-9 对应数字 0-9，10-35 对应字母 A-Z，36-44 对应9个符号：</p><p><img src="/p/1c1e6bbc/alnum.png"></p><p>输入的字符先按照上表转换为数值，然后分为两个一组，每一组内把 第一个数值 × 45 + 第二个数值，再转换为长度为 11 bits 的二进制串（最大为 44×45+44=2024 -&gt; <code>11111101000</code>）。如果字符长度为奇数，则会剩余出一个字符，需要将其值转换为长度为 6 bits 的二进制串（最大为 11 -&gt; <code>101100</code>）</p><p>然后开头加上字母数字模式标识符 <code>0010</code> 和数量标识符（长度由 7.4.1 第二个表规定）</p><ul><li><strong>例子</strong><ul><li>数据内容：AC-42</li><li>数据流部分：<ul><li>字母数字模式标识符： <code>0010</code></li><li>数量标识符： <code>000000101</code>（5，且版本1下规定长度为9）</li><li>数据：AC-42 -&gt; 10 12 41 4 2 -&gt; (10 12)(41 4)(2)<ul><li>10 12 -&gt; 10*45+12=462 -&gt; <code>00111001110</code></li><li>41 4 -&gt; 41*45+4=1849 -&gt; <code>11100111001</code></li><li>2 -&gt; 2 -&gt; <code>000010</code> </li></ul></li></ul></li><li>完整数据比特流： <code>0010 000000101 00111001110 11100111001 000010</code></li></ul></li></ul><p>字母数字模式下的比特流长度为：</p><p>$$B=M+C+11\times\lfloor\frac{D}{2}\rfloor+6\times(D\bmod 2)$$</p><p>其中 M 为 4，C 为数量标识符长度，D 为原数据长度</p><h3 id="字节模式（7-4-5）"><a href="#字节模式（7-4-5）" class="headerlink" title="字节模式（7.4.5）"></a>字节模式（7.4.5）</h3><p>字节模式（Byte mode）下把每个字符根据 Latin-1（ISO/IEC 8859-1）编码成 8 bits（1字节），直接接在字节模式标识符 <code>0100</code> 和数量标识符（长度由 7.4.1 第二个表规定）的后面。</p><p><img src="/p/1c1e6bbc/Latin-1.png" alt="Latin-1"></p><p>字节模式下的比特流长度：</p><p>$$B=M+C+8\times D$$</p><p>其中 M 为 4，C 为数量标识符长度，D 为原数据长度</p><h4 id="中文编码"><a href="#中文编码" class="headerlink" title="中文编码"></a>中文编码</h4><p>中文在转换成比特流的时候也使用字节模式，需要用 UTF-8 编码，每个字符会被编码成 3 个字节</p><h3 id="混合模式（7-4-7）"><a href="#混合模式（7-4-7）" class="headerlink" title="混合模式（7.4.7）"></a>混合模式（7.4.7）</h3><p>一个二维码的数据流中也可以使用多种模式，且不需要特别表示。更换新的模式时只需要正常添加 模式标识符+数量标识符+数据 即可</p><p><img src="/p/1c1e6bbc/multi.png"></p><ul><li><strong>例子</strong><ul><li>原始数据：123测试</li><li>数据流：<ul><li>数字模式：<ul><li>标识符： <code>0001</code></li><li>数量标识符： <code>0000000011</code>（3，长度10）</li><li>数据：123 -&gt; <code>0001111011</code></li></ul></li><li>字节模式：测试 -&gt; E6 B5 8B / E8 AF 95<ul><li>标识符： <code>0100</code></li><li>数量标识符： <code>00000110</code>（6，长度8）</li><li>数据：<ul><li>测 -&gt; <code>11100110 10110101 10001011</code></li><li>试 -&gt; <code>11101000 10101111 10010101</code></li></ul></li></ul></li></ul></li><li>完整数据比特流： <code>0001 0000000011 0001111011 0100 00000110 11100110 10110101 10001011 11101000 10101111 10010101</code></li></ul></li></ul><h3 id="结束符（7-4-9）"><a href="#结束符（7-4-9）" class="headerlink" title="结束符（7.4.9）"></a>结束符（7.4.9）</h3><p>在数据的末尾要填充4个0作为结束符，如果容量不足的话可以缩短或省略<br>即能填下则加4个0，填不下则能加几个0就加几个0</p><h3 id="填充-padding-bits（7-4-10）"><a href="#填充-padding-bits（7-4-10）" class="headerlink" title="填充 padding bits（7.4.10）"></a>填充 padding bits（7.4.10）</h3><p>转换后的数据比特流还需要填充至二维码的数据容量</p><ol><li>首先先用 <code>0</code> 补充比特流长度到 8 的整数倍</li><li>然后用 <code>11101100</code> 和 <code>00010001</code> 交替填补到二维码数据容量</li></ol><p>具体的数据容量由版本号和纠错等级决定，且数据容量（比特）一定为8的倍数，完整数据见文档的 33～36 页（整个 pdf 的第 41～44 页）</p><p>注：这个地方 QRazyBox 网站存在 bug，有时无法正常识别填充的 0 比特和 padding bits（即可能把填充的 0 中前四个视为一个 terminator，把后面的 0 才视为属于 padding bits ）</p><hr><p>未完待续……<a href="/p/f956b4.html">「QRCode 标准阅读」#2 纠错码编码与图像生成</a></p>]]></content>
    
    
    <summary type="html">&lt;div style=&quot;display: flex; justify-content: space-between;&quot;&gt;

&lt;p&gt;&lt;a href=&quot;/p/409d352d.html&quot;&gt;&amp;lt; #0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/p/f956b4.html&quot;&gt;#2 &amp;gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;基础描述及结构（6-1、6-3）&quot;&gt;&lt;a href=&quot;#基础描述及结构（6-1、6-3）&quot; class=&quot;headerlink&quot; title=&quot;基础描述及结构（6.1、6.3）&quot;&gt;&lt;/a&gt;基础描述及结构（6.1、6.3）&lt;/h2&gt;&lt;h3 id=&quot;基础描述（5-3、6-1）&quot;&gt;&lt;a href=&quot;#基础描述（5-3、6-1）&quot; class=&quot;headerlink&quot; title=&quot;基础描述（5.3、6.1）&quot;&gt;&lt;/a&gt;基础描述（5.3、6.1）&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;块位置：左上角为原点 (0, 0) 向下x+，向右y+&lt;/li&gt;
&lt;li&gt;版本表示：Version V-E（其中V是版本号，E是纠错等级）&lt;/li&gt;
&lt;li&gt;数据表示：黑块-1 白块-0（可以带背景全部反色）&lt;/li&gt;
&lt;li&gt;大小：从版本1到版本40依次是 21x21 ～ 177x177（每增加一个版本，边长增加4）&lt;/li&gt;&lt;/ul&gt;</summary>
    
    
    
    
    <category term="笔记" scheme="https://blog.tonycrane.cc/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="CTF" scheme="https://blog.tonycrane.cc/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>「QRCode 标准阅读」#0 总章</title>
    <link href="https://blog.tonycrane.cc/p/409d352d.html"/>
    <id>https://blog.tonycrane.cc/p/409d352d.html</id>
    <published>2021-11-29T16:03:39.000Z</published>
    <updated>2022-01-25T15:25:22.048Z</updated>
    
    <content type="html"><![CDATA[<p>最近几次比赛遇到过好几次二维码的题目，打算好好来读一读标准文档 <a href="https://cdn.jsdelivr.net/gh/tonycrane/tonycrane.github.io/p/409d352d/ISO_IEC18004-2015.pdf">ISO/IEC 18004:2015</a><br>文档 6.1 前面的内容不多，就从它后面开始记了</p><h2 id="Table-of-Content"><a href="#Table-of-Content" class="headerlink" title="Table of Content"></a>Table of Content</h2><ul><li><a href="/p/1c1e6bbc.html">「QRCode 标准阅读」#1 构成及数据编码</a><br>  对应文档中的 6.1~7.4 部分</li><li><a href="/p/f956b4.html">「QRCode 标准阅读」#2 纠错码编码与图像生成</a><br>  对应文档中的 7.5～7.10 部分</li><li><a href="/p/12ee036b.html">「QRCode 标准阅读」#3 解码纠错过程</a><br>  对应文档中的 11 部分以及补充了 PGZ 解码相关内容</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近几次比赛遇到过好几次二维码的题目，打算好好来读一读标准文档 &lt;a href=&quot;https://cdn.jsdelivr.net/gh/tonycrane/tonycrane.github.io/p/409d352d/ISO_IEC18004-2015.pdf&quot;&gt;ISO/</summary>
      
    
    
    
    
    <category term="笔记" scheme="https://blog.tonycrane.cc/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="CTF" scheme="https://blog.tonycrane.cc/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>「Hackergame 2021」#4 Writup 持续破防篇 1</title>
    <link href="https://blog.tonycrane.cc/p/d11ec8ed.html"/>
    <id>https://blog.tonycrane.cc/p/d11ec8ed.html</id>
    <published>2021-10-29T12:41:06.000Z</published>
    <updated>2021-10-30T05:06:00.775Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/p/f152ab1f.html">&lt; #3</a></p><p>这里接<a href="/p/fd872e78.html">上一篇</a>，Writeup 的有：阵列恢复、马赛克、minecRaft、密码生成器<br>（其实 minecRaft 应该算“开局上分”篇，但是不好塞了，就放这里了）<br>剩下的就是做不上的了，看官方 Writeup 了（</p><span id="more"></span><h2 id="阵列恢复大师"><a href="#阵列恢复大师" class="headerlink" title="阵列恢复大师"></a>阵列恢复大师</h2><p>（这题整整做了我两天多，每天晚上都对着磁盘阵列……）</p><blockquote><p>以下是两个压缩包，分别是一个 RAID 0 阵列的磁盘压缩包，和一个 RAID 5 阵列的磁盘压缩包，对应本题的两小问。你需要解析得到正确完整的磁盘阵列，挂载第一个分区后在该分区根目录下使用 Python 3.7 或以上版本执行 getflag.py 脚本以获取 flag。磁盘数据保证无损坏。</p></blockquote><h3 id="RAID-5"><a href="#RAID-5" class="headerlink" title="RAID 5"></a>RAID 5</h3><p>虽然 RAID 5 是第二问，而且分数高，但是更好做，而且做出的人也多。<br>因为数据保证无损坏，所以要做的仅仅是找出五个磁盘的顺序和块大小</p><p>顺序可以先简单地看看 strings *.img 输出的内容<br>逐个文件看，可以发现每个文件比较靠前的地方会有一段是 git 历史记录的一部分:<br><img src="/p/d11ec8ed/raid5.png"><br>根据里面的时间可以推断出磁盘的顺序大致是：</p><p style="text-align: center;">Qj... -> 60... -> 3R... -> Ir... -> 3D...</p>只是，这个顺序应该是一个环，谁在第一还没区分出来<p>在看每个文件的头部，只有 60… 和 3R… 有 “EFI PART”:<br><img src="/p/d11ec8ed/raid5_.png"><br>所以应该是一个在开头，一个在结尾。所以最终的顺序是：</p><p style="text-align: center;">3R... -> Ir... -> 3D... -> Qj... -> 60...</p><p>然后需要找到块大小<br>直接丢到 DiskGenius 里组建虚拟 RAID，选左同步，然后可以试出来当块大小是 64k 的时候正好可以拼出完整磁盘<br>然后克隆磁盘生成 img 文件，再挂载，进入，执行 getflag.py 就得到了 flag </p><h3 id="RAID-0"><a href="#RAID-0" class="headerlink" title="RAID 0"></a>RAID 0</h3><p>在做 RAID 5 的时候还发现了一个叫 Raid Reconstructor 的软件，可以爆破 RAID 阵列顺序和块大小<br>所以这问也就懒得看了，直接丢给 Raid Reconstructor 来爆破，得到最推荐的顺序：</p><p style="text-align: center;">wl. -> jC. -> 1G. -> 5q. -> d3. -> eR. -> RA. -> ID.</p>和块大小 128k<p>然后直接用 Raid Reconstructor 的 Copy 导出 img 文件，提取后又得到一个新的 img 文件<br>通过 file 可以看到结果的文件系统是 XFS</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ file MyDisk.img</span><br><span class="line">MyDisk.img: SGI XFS filesystem data (blksz 4096, inosz 512, v2 <span class="built_in">dirs</span>)</span><br></pre></td></tr></table></figure><p>但是始终无法挂载（搞了一天）<br>可能是 Raid Reconstructor 的问题，所以又用 DiskGenius 试了下<br>因为 win 和 DiskGenius 读不了 XFS 文件系统，所以拼起来之后直接克隆出 img 文件<br>然后拖到 Kali Linux 里挂载，成功挂载后进入、运行 getflag.py 就得到了 flag </p><hr><h2 id="马赛克"><a href="#马赛克" class="headerlink" title="马赛克"></a>马赛克</h2><p>（这道题已经做破防了，本以为是个青铜，结果是个王者……）<br>我做的肯定不是正解，利用二维码纠错能力勉强拿到了 flag，所以就不详细写 writeup 了，主要还是要看官方 wp（逃</p><p>大概步骤就是：</p><ol><li>读图片</li><li>把已知的像素提取出来</li><li>把四个小定位块填上</li><li>挨个马赛克块寻找使还原的数据平均数与原马赛克值差的绝对值小于1的填补方法<ul><li>如果只有一种就填上，并且标注已经填好，以后不再搜寻</li><li>如果有多种就先放下不填</li></ul></li><li>重复4的过程，这是还会有唯一确定的填补方案。重复4次大概就不剩唯一解了</li><li>这时重复4，找出仅有2中填补方法的，选误差最小的填上</li><li>然后再重复4</li><li>然后重复6</li><li>然后重复4 </li><li>这时可以看到已经还原得差不多了，剩下的不管直接扫码也可以扫出 flag 了 <div style="text-align: center;"><img src="/p/d11ec8ed/msc.jpg" width="35%" height="35%"></div></li></ol><p><del>看，做法很烂对吧</del></p><hr><h2 id="minecRaft"><a href="#minecRaft" class="headerlink" title="minecRaft"></a>minecRaft</h2><blockquote><p>kk 同学很喜欢玩 Minecraft，他最近收到了一张 MC 地图，地图里面有三盏灯，还有很多奇奇怪怪的压力板。</p><p>但他发现这些灯好像不太符合 MC 电磁学（Red stone），你能帮他把灯全部点亮吗？</p><p>注：本题解法与原版 Minecraft 游戏无关。</p><p>补充说明：flag 花括号内为让三盏灯全部点亮的最短的输入序列。例如，如果踩踏压力板输入的最短的序列为 abc，则答案为 flag{abc}。</p></blockquote><p>还挺好玩的题，在网页中模拟了一个mc出来<br>看源码看到了引入了 flag.js 文件，所以可能就是要通过它来得到答案：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jsm/miscs/flag.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可以看到，最终判断是否正确是通过调用 <code>gyflagh(input)</code> 是否为 true 来判断，而 gyflagh 也在 flag.js 中，所以还是要看 flag.js </p><p>但是 flag.js 是经过简单混淆过的，还是要费点时间读一下</p><p>其中有四个转换 Str4 Base16 和 Long 的函数可以略掉不管<br>注意到了 <code>_0x381b()</code> 这个函数里有一个列表，而且比较简单，其实它返回的就是这个列表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;encrypt&#x27;, &#x27;33MGcQht&#x27;, &#x27;6fbde674819a59bfa12092565b4ca2a7a11dc670c678681daf4afb6704b82f0c&#x27;, &#x27;14021KbbewD&#x27;, &#x27;charCodeAt&#x27;, &#x27;808heYYJt&#x27;, &#x27;5DlyrGX&#x27;, &#x27;552oZzIQH&#x27;, &#x27;fromCharCode&#x27;, &#x27;356IjESGA&#x27;, &#x27;784713mdLTBv&#x27;, &#x27;2529060PvKScd&#x27;, &#x27;805548mjjthm&#x27;, &#x27;844848vFCypf&#x27;, &#x27;4bIkkcJ&#x27;, &#x27;1356853149054377&#x27;, &#x27;length&#x27;, &#x27;slice&#x27;, &#x27;1720848ZSQDkr&#x27;]</span><br></pre></td></tr></table></figure><p>但是在 Console 里面调用 _0x381b 得到的却是以 ‘slice’ 开头、’length’ 结尾的列表，将这个列表记为 lst 方便表述<br>而且源码中只有最开头的调用匿名函数里面有 <code>[&#39;push&#39;]</code> 和 <code>[&#39;shift&#39;]</code>，所以推测这个匿名函数就是将这个列表循环右移两个位置<br>那这个匿名函数也不用看了</p><p>再来看 <code>_0x2c9e()</code> 这个函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_0x2c9e</span>(<span class="params">_0x49e6ff, _0x310d40</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> _0x381b4c = _0x381b();</span><br><span class="line">    <span class="keyword">return</span> _0x2c9e = <span class="function"><span class="keyword">function</span>(<span class="params">_0x2c9ec6, _0x2ec3bd</span>) </span>&#123;</span><br><span class="line">        _0x2c9ec6 = _0x2c9ec6 - <span class="number">0x1a6</span>;</span><br><span class="line">        <span class="keyword">let</span> _0x4769df = _0x381b4c[_0x2c9ec6];</span><br><span class="line">        <span class="keyword">return</span> _0x4769df;</span><br><span class="line">    &#125;</span><br><span class="line">    ,</span><br><span class="line">    _0x2c9e(_0x49e6ff, _0x310d40);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 <code>_0x381b4c</code> 是刚刚说的那个列表 lst。然后 return 里面重新定义了 <code>_0x2c9e</code>，但是新的定义里第二个参数并没有用，然后调用返回，所以整个函数就相当于：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_0x2c9e</span>(<span class="params">_0x2c9ec6, ...</span>) </span>&#123;</span><br><span class="line">    _0x2c9ec6 = _0x2c9ec6 - <span class="number">0x1a6</span>;</span><br><span class="line">    <span class="keyword">return</span> lst[_0x2c9ec6];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>0x1a6 是 422，所以整个函数也就相当于 function(x) { return lst[x - 422]; }<br>同时根据第一行，程序中所有 <code>_0x22517d</code> 也是这个函数</p><p>然后看判断答案的 <code>gyflagh</code> 函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gyflagh</span>(<span class="params">_0x111955</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> _0x50051f = _0x22517d;</span><br><span class="line">    <span class="keyword">let</span> _0x3b790d = _0x111955[_0x50051f(<span class="number">0x1a8</span>)](_0x50051f(<span class="number">0x1b7</span>));</span><br><span class="line">    <span class="keyword">if</span> (_0x3b790d === _0x50051f(<span class="number">0x1aa</span>))</span><br><span class="line">        <span class="keyword">return</span> !![];</span><br><span class="line">    <span class="keyword">return</span> ![];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没啥特别的，结合 lst 可以得到：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gyflagh</span>(<span class="params">ans</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (ans[<span class="string">&quot;encrypt&quot;</span>](<span class="string">&quot;1356853149054377&quot;</span>) === <span class="string">&quot;6fbde674819a59bfa12092565b4ca2a7a11dc670c678681daf4afb6704b82f0c&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就可以结合 lst 中的值和索引，翻译出最重要的函数<br>再进行一些运算，用注释标注一下已知的值就可以得到：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>[<span class="string">&quot;prototype&quot;</span>][<span class="string">&quot;encrypt&quot;</span>] = <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123; <span class="comment">// key = &quot;1356853149054377&quot;</span></span><br><span class="line">    <span class="keyword">const</span> left = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">const</span> right = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">let</span> res = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    ans = <span class="built_in">escape</span>(<span class="built_in">this</span>); <span class="comment">// this := ans</span></span><br><span class="line">    right = [<span class="number">909456177</span>, <span class="number">825439544</span>, <span class="number">892352820</span>, <span class="number">926364468</span>]</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ans[<span class="string">&quot;length&quot;</span>]; i = i + <span class="number">8</span>) &#123;</span><br><span class="line">      left[<span class="number">0</span>] = Str4ToLong(ans[<span class="string">&quot;slice&quot;</span>](i, i + <span class="number">4</span>));</span><br><span class="line">      left[<span class="number">1</span>] = Str4ToLong(ans[<span class="string">&quot;slice&quot;</span>](i + <span class="number">4</span>, i + <span class="number">8</span>));</span><br><span class="line">      code(left, right);</span><br><span class="line">      res = res + (LongToBase16(left[<span class="number">0</span>]) + LongToBase16(left[<span class="number">1</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;  <span class="comment">// 6fbde674819a59bfa12092565b4ca2a7a11dc670c678681daf4afb6704b82f0c</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>再来看 <code>code</code> 函数，根据 &lt;&lt; 4、 ^、 &gt;&gt;&gt; 5 可以大胆推测类似 TEA，然后解码就直接翻过来就好了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dec</span>(<span class="params">left, right</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">2654435769</span> * <span class="number">32</span>; i != <span class="number">0</span>;) &#123;</span><br><span class="line">        left[<span class="number">1</span>] -= ((left[<span class="number">0</span>] &lt;&lt; <span class="number">4</span> ^ left[<span class="number">0</span>] &gt;&gt;&gt; <span class="number">5</span>) + left[<span class="number">0</span>] ^ i + right[i &gt;&gt;&gt; <span class="number">11</span> &amp; <span class="number">3</span>]);</span><br><span class="line">        i -= <span class="number">2654435769</span>;</span><br><span class="line">        left[<span class="number">0</span>] -= ((left[<span class="number">1</span>] &lt;&lt; <span class="number">4</span> ^ left[<span class="number">1</span>] &gt;&gt;&gt; <span class="number">5</span>) + left[<span class="number">1</span>] ^ i + right[i &amp; <span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(left);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后把要得到的 res 分块，每 8 个一组：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6fbde674 819a59bf a1209256 5b4ca2a7 a11dc670 c678681d af4afb67 04b82f0c</span><br></pre></td></tr></table></figure><p>然后从后往前，每两个执行 Base16ToLong，然后作为 left 传给 dec 函数解码，然后再 LongToStr4 得到四个字符:<br><img src="/p/d11ec8ed/minecRaft.jpg"><br>拼起来就是 flag 了：<code>flag&#123;McWebRE_inMlnCrA1t_3a5y_1cIuop9i&#125;</code></p><hr><h2 id="密码生成器"><a href="#密码生成器" class="headerlink" title="密码生成器"></a>密码生成器</h2><blockquote><p>小 T 最近又写了一个 web 应用。</p><p>他发现很多用户都喜欢设置弱密码，于是决定让所有用户的密码都必须是 16 位长，并且各种符号都要有。为了让大家可以方便生成这样的密码，他还写了一个密码生成器，让用户可以生成符合规则的密码。</p><p>但这样果真安全吗？</p></blockquote><p>（感觉这次 Hackergame 题的 tag 都很诡异。这题明明是 misc(general) 为什么打了 binary 的 tag）</p><p>看到 binary tag 直接先往 IDA 里面丢，然后报错了，大概是因为部分 winapi 导入不进去的问题（？）<br>然后就不会了…… 对着 IDA 干瞪眼</p><p>看题，题目给了一个网站，用来发布展板，看起来只有 admin 用户，而且没有注册系统，所以应该就是要搞到 admin 的密码了<br>再细看网站，特意提到 “网页显示<strong>时间</strong>”，而且展板后面都有发布时间，点进 admin 的用户页面发现也有注册时间，着实有些许诡异（<br>所以时间应该是一个提示</p><p>而写代码的时候设置随机数种子又常以当前时间作为种子，所以生成的密码可能是和时间有关系的<br>通过调系统时间，可以发现在同一秒点下生成，产生的密码是一样的<br>所以只需要把系统时间调到 admin 的注册时间左右，然后每秒生成密码，再挨个输进去爆破即可</p><p>最后得到 2021-09-22 23:10:53 时生成的密码 <code>$Z=CBDL7TjHu~mEX</code> 就是 admin 的密码<br>然后登录即可在“我的”里看到一条私密展板，内容是 flag</p><p>（其实这题搞得闹心的是每秒生成密码，像我这样的原始人只会反复调时间然后手动生成、复制粘贴，然后再复制粘贴检验密码）<br>（而且其实这个时间也试了很长时间，试了 23:11 的所有秒，15:11 的所有秒（考虑到了提到的时区问题））<br>（然后一共 120s 里也没有正确密码，就很闹心，最后的时间是 23:11 的前一分钟里的……我当时甚至想了，这些操作在一分钟之内都能完成，然后就没考虑前一分钟生成密码、后一分钟注册的问题……）<br>（于是就有了：</p><div style="text-align: center;"><img src="/p/d11ec8ed/generator.png" width="15%" height="15%"></div><hr><p>好了，我做上的题也就这些了，勉勉强强混了 4k2pt<br>没做上的题也好多：Amnesia2、赛博厨房23、灯、只读、一石二鸟、GPA、链上预言家、助记词2、Co-Program、外星人、befun、fzuu、wish、OI逆向<br>（草，好多qwq）<br>剩下的就看官方 Writeup 了（</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li>RAID 相关的好多文章，没留作记录</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;/p/f152ab1f.html&quot;&gt;&amp;lt; #3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里接&lt;a href=&quot;/p/fd872e78.html&quot;&gt;上一篇&lt;/a&gt;，Writeup 的有：阵列恢复、马赛克、minecRaft、密码生成器&lt;br&gt;（其实 minecRaft 应该算“开局上分”篇，但是不好塞了，就放这里了）&lt;br&gt;剩下的就是做不上的了，看官方 Writeup 了（&lt;/p&gt;</summary>
    
    
    
    <category term="Writeup" scheme="https://blog.tonycrane.cc/categories/Writeup/"/>
    
    
    <category term="CTF" scheme="https://blog.tonycrane.cc/tags/CTF/"/>
    
    <category term="Writeup" scheme="https://blog.tonycrane.cc/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>「Hackergame 2021」#3 Writup 持续破防篇 0</title>
    <link href="https://blog.tonycrane.cc/p/f152ab1f.html"/>
    <id>https://blog.tonycrane.cc/p/f152ab1f.html</id>
    <published>2021-10-29T06:41:49.000Z</published>
    <updated>2021-10-29T13:51:02.097Z</updated>
    
    <content type="html"><![CDATA[<div style="display: flex; justify-content: space-between;"><p><a href="/p/f54b44c.html">&lt; #2</a></p><p><a href="/p/d11ec8ed.html">#4 &gt;</a></p></div><p>完成了前面两篇说到的那些题后，剩下的就开始反复折磨我了qwq<br>每天基本都肝到一点左右，甚至四五个小时毫无成果_(´ཀ`」 ∠)__<br>其中有些题回过头来看其实很简单，但是做的时候就是死活想不出来（</p><p>这篇 Writeup 里面有：Amnesia1、RSA、LUKS、MicroWorld</p><span id="more"></span><hr><h2 id="Amnesia"><a href="#Amnesia" class="headerlink" title="Amnesia"></a>Amnesia</h2><h3 id="轻度失忆"><a href="#轻度失忆" class="headerlink" title="轻度失忆"></a>轻度失忆</h3><blockquote><p>你的程序只需要输出字符串 Hello, world!（结尾有无换行均可）并正常结束。</p><p>编译指令：<code>gcc -O file.c -m32</code></p><p>运行指令：<code>./a.out</code></p><p>编译后 ELF 文件的 .data 和 .rodata 段会被清零。</p></blockquote><p>ELF（Executable and Linkable Format）是 Linux 下常用的可执行文件格式，其中有很多不同的节：</p><ul><li><code>.text</code> 节：程序运行需要的代码</li><li><code>.data</code> 节：存放可修改的数据，一般是非 const 全局变量和静态变量</li><li><code>.rodata</code> 节：即 read only data，一般是常量或者字符串</li><li><code>.bss</code> 节：没有被初始化的变量</li><li>……</li></ul><p>而这道题目则是在编译生成可执行文件 a.out 后，清空 .data 和 .rodata<br>首先不妨正常编写一个输出 “Hello, world!” 的程序：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello, world!\n&quot;</span>);</span><br></pre></td></tr></table></figure><p>然后编译，再拖到 IDA 里<br><img src="/p/f152ab1f/amn1.png"><br>可以发现，此时的 “Hello, world!” 被放到了 .rodata 节中，会被清除掉，所以这样写不行</p><p>直接使用字符串会被放到 .rodata 中清除，写成全局变量又会放到 .data 中<br>但是，如果写成局部变量呢：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> str[] = <span class="string">&quot;Hello, world!\n&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(str);</span><br></pre></td></tr></table></figure><p>编译，拖到 IDA 里<br><img src="/p/f152ab1f/amn2.png"><br>可以看出，这次的字符串直接写到了 .text 节中，删掉了 .data .rodata 也没有影响<br>所以把这个代码交上去就可以输出 “Hello, world!“ 拿到 flag 了 </p><p>清除记忆直接把 .text 节全删掉了，想了很久也不知道咋搞，虽然可以 __attribute__ ((section (“…”))) 来把函数或变量塞到指定的节中。但还是不清楚要怎么解决段错误的问题qwq </p><hr><h2 id="Easy-RSA"><a href="#Easy-RSA" class="headerlink" title="Easy RSA"></a>Easy RSA</h2><blockquote><p>自从 Hackergame 2018 公然揭露了大整数可以被神童口算分解的事实，RSA 在 hackergame 中已经只能处于低分值的地位了。如果不在其名称前面加上 Easy 这个单词，似乎就会显得完全对不起其他题目。</p><p>更何况，在本题的附件中，你还获得了构造 p 和 q 的方式。数理基础扎实的你应该可以轻松解决这些问题吧。</p></blockquote><p><del>谢邀，没有数理基础</del></p><p>看代码！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_p</span>():</span></span><br><span class="line">    x = <span class="number">11124440021748127159092076861405454814981575144744508857178576572929321435002942998531420985771090167262256877805902135304112271641074498386662361391760451</span></span><br><span class="line">    y = <span class="number">11124440021748127159092076861405454814981575144744508857178576572929321435002942998531420985771090167262256877805902135304112271641074498386662361391661439</span></span><br><span class="line">    value_p = sympy.nextprime((math.factorial(y)) % x)  <span class="comment"># Hint：这里直接计算会溢出，请你仔细观察 x 和 y 的特征</span></span><br><span class="line">    <span class="keyword">return</span> value_p</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_q</span>():</span></span><br><span class="line">    value = [getPrime(<span class="number">256</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">        value.append(sympy.nextprime(value[i - <span class="number">1</span>]))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;value[-1] = &quot;</span>, value[-<span class="number">1</span>])</span><br><span class="line">    <span class="comment"># value[-1] = 80096058210213458444437404275177554701604739094679033012396452382975889905967</span></span><br><span class="line">    n = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        n = n * value[i]</span><br><span class="line">    q = getPrime(<span class="number">512</span>)</span><br><span class="line">    value_q = <span class="built_in">pow</span>(q, e, n)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;value_q = &quot;</span>, value_q)</span><br><span class="line">    <span class="comment"># value_q = 5591130088089053683141520294620171646179623062803708281023766040254675625012293743465254007970358536660934858789388093688621793201658889399155357407224541324547522479617669812322262372851929223461622559971534394847970366311206823328200747893961649255426063204482192349202005330622561575868946656570678176047822163692259375233925446556338917358118222905050574458037965803154233167594946713038301249145097770337253930655681648299249481985768272321820718607757023350742647019762122572886601905212830744868048802864679734428398229280780215896045509020793530842541217790352661324630048261329493088812057300480085895399922301827190211956061083460036781018660201163819104150988531352228650991733072010425499238731811243310625701946882701082178190402011133439065106720309788819</span></span><br><span class="line">    <span class="keyword">return</span> sympy.nextprime(q)</span><br><span class="line"></span><br><span class="line"><span class="comment"># this destroyes the rsa cryptosystem</span></span><br><span class="line">p = get_p()</span><br><span class="line">q = get_q()</span><br><span class="line"></span><br><span class="line">m = <span class="built_in">int</span>.from_bytes(<span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>).read(), <span class="string">&quot;big&quot;</span>)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, p * q)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c = &quot;</span>, c)</span><br><span class="line"><span class="comment"># c = 110644875422336073350488613774418819991169603750711465190260581119043921549811353108399064284589038384540018965816137286856268590507418636799746759551009749004176545414118128330198437101472882906564195341277423007542422286760940374859966152871273887950174522820162832774361714668826122465471705166574184367478</span></span><br></pre></td></tr></table></figure><p>可以看到，其中要解决的就是 <code>get_p()</code> 中 y! % x 溢出的问题，以及 <code>get_q()</code> 中 q 是哪个随机的512位质数的问题</p><h3 id="get-p"><a href="#get-p" class="headerlink" title="get_p"></a>get_p</h3><p>代码里也给了 Hint，观察 x 和 y 的特征。x 和 y 都很大，但是两个的差并不大；而且可以丢到 python 里验证出 x 是一个质数<br>所以可以使用<a href="https://en.wikipedia.org/wiki/Wilson's_theorem"><strong>威尔逊定理</strong></a><br>也查到了威尔逊定理在 RSA 题目中的应用：<a href="https://blog.csdn.net/xiao_han_a/article/details/118974504">BUU-RSA [RoarCTF2019]babyRSA</a></p><p>要求 y! % x（x是质数）<br>根据威尔逊定理，有</p><p>$$<br>(x - 1)! \equiv -1\pmod{x}<br>$$</p><p>所以：</p><p>$$<br>y!\times \frac{(x - 1)!}{y!}\equiv -1\pmod{x}<br>$$</p><p>令 $k = \dfrac{(x - 1)!}{y!} = (y+1)(y+2)…(x-1)x$ ，所以有：</p><p>$$<br>y!\equiv -\mathrm{inv}(k, x)\pmod{x}<br>$$</p><p>（其中 $\mathrm{inv}(k, x)$ 表示模 x 下 k 的逆元）<br>所以重写 get_p() 即可正确的得到 p：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_p</span>():</span></span><br><span class="line">    x = ...</span><br><span class="line">    y = ...</span><br><span class="line">    k = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(y + <span class="number">1</span>, x):</span><br><span class="line">        k = (k * i) % x </span><br><span class="line">    res = (-gmpy2.invert(k, x)) % x </span><br><span class="line">    <span class="keyword">return</span> sympy.nextprime(res)</span><br></pre></td></tr></table></figure><h3 id="get-q"><a href="#get-q" class="headerlink" title="get_q"></a>get_q</h3><p>相比来说，get_q 就没那么需要技巧了<br>给出了 value[-1] 的值，所以可以直接用 <code>sympy.prevprime</code> 逆推出整个 value 数组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">value = [<span class="number">80096058210213458444437404275177554701604739094679033012396452382975889905967</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">    value.append(sympy.prevprime(value[i - <span class="number">1</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;value[-1] = &quot;</span>, value[-<span class="number">1</span>])</span><br></pre></td></tr></table></figure><p>后面计算 value_q 细看其实也是一个 RSA 算法：</p><ul><li>q：密文</li><li>e：私钥</li><li>value_q：明文</li><li>n：就是 n，只不过不是两个质数相乘，是十个质数相乘 </li></ul><p>十个质数相乘得到 n 的 RSA 算法也一样，因为 RSA 的正确性并没有要求 n 一定是两个大质数相乘，这样只是难以破解保证安全性<br>解决这个同样也是需要公钥 d，所以需要 phi(n)<br>根据<a href="https://en.wikipedia.org/wiki/Euler%27s_totient_function">欧拉函数</a>的性质，phi(n) 等于 n 的所有质因数减一的积<br>即 phi(n) = (value[0] - 1) * (value[1] - 1) * … * (value[9] - 1)</p><p>再解密即可得到密文 q，然后也就得到了 get_q 的结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">n = phi = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    n = n * value[i]</span><br><span class="line">    phi *= (value[i] - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">value_q = ...</span><br><span class="line">d = <span class="built_in">pow</span>(e, -<span class="number">1</span>, phi) </span><br><span class="line">q = <span class="built_in">pow</span>(value_q, d, n)</span><br><span class="line"><span class="keyword">return</span> sympy.nextprime(q)</span><br></pre></td></tr></table></figure><h3 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h3><p>搞定了 get_p 和 get_q 之后就可以直接解出 flag 了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">e = <span class="number">65537</span></span><br><span class="line">p = get_p()</span><br><span class="line">q = get_q()</span><br><span class="line"></span><br><span class="line">c = ...</span><br><span class="line">d = <span class="built_in">pow</span>(e, -<span class="number">1</span>, (p-<span class="number">1</span>) * (q-<span class="number">1</span>))</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, p * q)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>.to_bytes(m, <span class="number">30</span>, byteorder=<span class="string">&quot;big&quot;</span>))</span><br></pre></td></tr></table></figure><hr><h2 id="加密的-U-盘"><a href="#加密的-U-盘" class="headerlink" title="加密的 U 盘"></a>加密的 U 盘</h2><p>（本来挺好做的一道题，怎么题给的提示我就硬是没领会到）</p><blockquote><p>这是一个关于 LUKS (Linux Unified Key Setup) 的故事。</p><p>第一天<br>小 T：「你要的随机过程的课件我帮你拷好了，在这个 U 盘里，LUKS 加密的密码是 suijiguocheng123123。」<br>小 Z：「啊，你又搞了 Linux 文件系统加密，真拿你没办法。我现在不方便用 Linux，我直接把这块盘做成磁盘镜像文件再回去处理吧。」</p><p>第二天<br>小 Z：「谢谢你昨天帮我拷的课件。你每次都搞这个加密，它真的安全吗？」<br>小 T：「当然了！你看，你还给我之后，我已经把这块盘的弱密码改掉了，现在是随机生成的强密码，这样除了我自己，世界上任何人都无法解密它了。」<br>小 Z：「我可不信。」<br>小 T：「你不信？你看，我现在往 U 盘里放一个 flag 文件，然后这个 U 盘就给你了，你绝对解密不出来这个文件的内容。当初搞 LUKS 的时候我可研究了好几天，班上可没人比我更懂加密！」</p></blockquote><p>一共给了两个 img 文件，通过 file 可以看出都是 DOS/MBR boot sector</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ file *.img </span><br><span class="line">day1.img:      DOS/MBR boot sector; partition 1 : ID=0xee, start-CHS (0x0,0,2), end-CHS (0x3ff,255,63), startsector 1, 40959 sectors, extended partition table (last)</span><br><span class="line">day2.img:      DOS/MBR boot sector; partition 1 : ID=0xee, start-CHS (0x0,0,2), end-CHS (0x3ff,255,63), startsector 1, 40959 sectors, extended partition table (last)</span><br></pre></td></tr></table></figure><p>所以先直接 7z 提取，得到两个新的 img，再 file：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ file *.img </span><br><span class="line">My Disk.img:   LUKS encrypted file, ver 2 [, , sha256] UUID: e9a660d5-4a91-4dca-bda5-3f6a49eea998</span><br><span class="line">My Disk 2.img: LUKS encrypted file, ver 2 [, , sha256] UUID: e9a660d5-4a91-4dca-bda5-3f6a49eea998</span><br></pre></td></tr></table></figure><p>发现都是 LUKS encrypted file</p><p>在 Kali Linux 里尝试直接挂载第一个 img，要求输入密码，把题给的密码输入就可以看到 “课件”</p><p>以上都是已知的试验部分，真正要做的是解开第二个未知密码的 LUKS img<br>已知磁盘的加密使用的是 luks2，在网上查了破解 luks2 之类的都说 luks2 <strong>不可破解</strong>，或者是使用已知的密码字典来爆破<br>但是题里说了 “<strong>随机生成</strong>的强密码”，所以也是没有密码字典的</p><p>其实这道题的最大提示就在于它给了两个 img，既然第一个 img 打开后仅仅是一个课件，如果它的用处仅仅是用来试验 luks 怎么打开的话，根本它没必要给出<br>所以第一个 img 肯定还是有用的。</p><p>再看题目，反复说了 U 盘，所以这两个 img 应该是同一个 U 盘的镜像文件，只是更改了密码而已（file 看到的 uuid 也是一致的）<br>于是继续必应，发现同一个磁盘的 <code>master-key</code> 是一样的，而且可以用 master-key 来添加密码恢复磁盘（见：<a href="https://www.thegeekstuff.com/2016/03/cryptsetup-lukskey/">10 Linux cryptsetup Examples for LUKS Key Management</a>）</p><p>所以就跟着文章里的做法，从第一个 img 中提取出 master-key，然后用它来提供 AddKey 的权限。添加了新 passphrase 后就可以用新密码打开磁盘了：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ cryptsetup luksDump --dump-master-key MyDisk.img  <span class="comment"># 输出 master-key</span></span><br><span class="line">...</span><br><span class="line">MK dump:    be 97 db 91 5c 30 47 ce 1c 59 c5 c0 8c 75 3c 40 </span><br><span class="line">            72 35 85 9d fe 49 c0 52 c4 f5 26 60 af 3e d4 2c </span><br><span class="line">            ec a3 60 53 aa 96 70 4d f3 f2 ff 56 8f 49 a1 82 </span><br><span class="line">            60 18 7c 58 d7 6a ec e8 00 c1 90 c1 88 43 f8 9a</span><br><span class="line">$ cat <span class="string">&quot;be...9a&quot;</span> &gt; master_key.txt <span class="comment"># 存入文件</span></span><br><span class="line">$ xxd -r -p master_key.txt master_key.bin <span class="comment"># 转为二进制</span></span><br><span class="line">$ cryptsetup luksAddKey MyDisk2.img --master-key-file &lt;(cat master_key.bin) <span class="comment"># 添加密码</span></span><br><span class="line">Enter new passphrase <span class="keyword">for</span> key slot:    <span class="comment"># 输入新密码即可，因为master-key-file相当于提供了原始密码</span></span><br><span class="line">Verify passphrase: </span><br></pre></td></tr></table></figure><p>（一定要用 root 权限才可以加密码）<br>然后挂载、输入密码，就可以看到 flag.txt 了</p><hr><h2 id="Micro-World"><a href="#Micro-World" class="headerlink" title="Micro World"></a>Micro World</h2><blockquote><p>宇宙中某一片极其微小的区域里的粒子被一股神秘力量初始化设置成了 flag 的形状，程序忠实地记录了一段时间之后这片区域的粒子运动情况。</p></blockquote><p>拿到了 exe 文件，看起来挺精致，运行起来是一些点运动碰撞的场景<br>拖到 IDA 里看看，发现了 __main__ 以及 .rdata 里一些 py 有关的字符串：<br><img src="/p/f152ab1f/microworld.png"><br>所以推测是使用 python 编写的，然后用 pyinstaller 打包</p><p>这样的话试着用 <a href="https://github.com/extremecoders-re/pyinstxtractor">pyinstxtractor</a> 解包 .exe，成功得到一个文件夹<br>里面是一堆 .pyc .pyd .dll 文件，从名字就可以看出大部分是 import 的包，只有一个特别的 2.pyc<br>所以这个应该就是编译后的源码了</p><p>接下来用 <a href="https://github.com/rocky/python-uncompyle6/">uncompyle6</a> 来反编译 pyc 文件，输出得到了源码 2.py<br>尝试运行，发现跑起来之后只有一个点在运动，应该是反编译时出了些问题<br>于是开始看源码 </p><p>基本上简单说就是，初始有一些数据，表示每个点的位置和速度，然后运行，每次运行都检测碰撞，然后获得新的点位置，再绘制出来<br>调试一下，输出每次的 pointlist，发现第一次是所有点，第二次变成2个，第三次往后就只有一个了<br>所以问题大概就出在了 next_pos_list 函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">next_pos_list</span>(<span class="params">Pointlist</span>):</span></span><br><span class="line">    pointlist = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(Pointlist)):</span><br><span class="line">        <span class="keyword">for</span> point <span class="keyword">in</span> Pointlist[i + <span class="number">1</span>:]:</span><br><span class="line">            times = checkcrush(Pointlist[i], point)</span><br><span class="line">            <span class="keyword">if</span> times != <span class="literal">None</span>:</span><br><span class="line">                a, b = get_new_point(times, Pointlist[i], point)</span><br><span class="line">                pointlist.extend([a, b])</span><br><span class="line">                Pointlist[i].flag = <span class="number">0</span></span><br><span class="line">                point.flag = <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> item <span class="keyword">in</span> Pointlist:</span><br><span class="line">                <span class="keyword">if</span> item.flag != <span class="number">0</span>:</span><br><span class="line">                    pointlist.append(Point((item.x + item.vx, item.y + item.vy), item.vx, item.vy))</span><br><span class="line">                <span class="keyword">for</span> poi <span class="keyword">in</span> pointlist:</span><br><span class="line">                    poi.x = poi.x % WIDTH</span><br><span class="line">                    poi.y = poi.y % HEIGHT</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">return</span> pointlist</span><br></pre></td></tr></table></figure><p>仔细读一读，可以发现这里面的 for-else 块很奇怪，导致循环结束和 return 都早了，所以根据函数的意思改一改：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">next_pos_list</span>(<span class="params">Pointlist</span>):</span></span><br><span class="line">    pointlist = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(Pointlist)):</span><br><span class="line">        <span class="keyword">for</span> point <span class="keyword">in</span> Pointlist[i + <span class="number">1</span>:]:</span><br><span class="line">            ...</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> Pointlist:</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">return</span> pointlist</span><br></pre></td></tr></table></figure><p>这样就可以成功运行了</p><p>但是画面仍然是杂乱的。因为题里说了 “记录了<strong>一段时间之后</strong>这片区域的粒子运动情况”<br>所以需要将轨迹往前推，最方便的方法就是更改每个点的速度方向：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Pointlist = []</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> list_:</span><br><span class="line">    Pointlist.append(Point((item[<span class="number">0</span>], item[<span class="number">1</span>]), -item[<span class="number">2</span>], -item[<span class="number">3</span>]))</span><br></pre></td></tr></table></figure><p>运行后等待一小会儿就可以看到点逐渐有序，在某一刻汇成了 flag：<br><img src="/p/f152ab1f/mwans.jpg"><br>虽然不太清晰，但是也可以猜个大概</p><hr><p>又写了蛮长的，剩下的放在<a href="/p/d11ec8ed.html">下一篇</a><em>(:з」∠)</em></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://en.wikipedia.org/wiki/Wilson's_theorem">Wilson’s theorem - wikipedia</a></li><li><a href="https://blog.csdn.net/xiao_han_a/article/details/118974504">BUU-RSA [RoarCTF2019]babyRSA - CSDN</a></li><li><a href="https://en.wikipedia.org/wiki/Euler%27s_totient_function">Euler’s totient function - wikipedia</a></li><li><a href="https://gitlab.com/cryptsetup/LUKS2-docs/blob/master/luks2_doc_wip.pdf">LUKS2 doc pdf</a></li><li><a href="https://www.thegeekstuff.com/2016/03/cryptsetup-lukskey/">10 Linux cryptsetup Examples for LUKS Key Management</a></li><li><a href="https://github.com/extremecoders-re/pyinstxtractor">pyinstxtractor</a></li><li><a href="https://github.com/rocky/python-uncompyle6/">uncompyle6</a></li></ul><div style="display: flex; justify-content: space-between;"><p><a href="/p/f54b44c.html">&lt; #2</a></p><p><a href="/p/d11ec8ed.html">#4 &gt;</a></p></div>]]></content>
    
    
    <summary type="html">&lt;div style=&quot;display: flex; justify-content: space-between;&quot;&gt;

&lt;p&gt;&lt;a href=&quot;/p/f54b44c.html&quot;&gt;&amp;lt; #2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/p/d11ec8ed.html&quot;&gt;#4 &amp;gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;完成了前面两篇说到的那些题后，剩下的就开始反复折磨我了qwq&lt;br&gt;每天基本都肝到一点左右，甚至四五个小时毫无成果_(´ཀ`」 ∠)__&lt;br&gt;其中有些题回过头来看其实很简单，但是做的时候就是死活想不出来（&lt;/p&gt;
&lt;p&gt;这篇 Writeup 里面有：Amnesia1、RSA、LUKS、MicroWorld&lt;/p&gt;</summary>
    
    
    
    <category term="Writeup" scheme="https://blog.tonycrane.cc/categories/Writeup/"/>
    
    
    <category term="CTF" scheme="https://blog.tonycrane.cc/tags/CTF/"/>
    
    <category term="Writeup" scheme="https://blog.tonycrane.cc/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>「Hackergame 2021」#2 Writup 开局上分篇 1</title>
    <link href="https://blog.tonycrane.cc/p/f54b44c.html"/>
    <id>https://blog.tonycrane.cc/p/f54b44c.html</id>
    <published>2021-10-29T03:14:46.000Z</published>
    <updated>2021-10-29T13:50:53.139Z</updated>
    
    <content type="html"><![CDATA[<div style="display: flex; justify-content: space-between;"><p><a href="/p/fd872e78.html">&lt; #1</a></p><p><a href="/p/f152ab1f.html">#3 &gt;</a></p></div><p>这里接<a href="/p/fd872e78.html">上一篇</a>，Writeup 的有：大砍刀、图之上、赛博厨房01、助记词1、p😭q<br>有些虽然偏后、分值高，但是总体并不难</p><span id="more"></span><hr><h2 id="FLAG-助力大红包"><a href="#FLAG-助力大红包" class="headerlink" title="FLAG 助力大红包"></a>FLAG 助力大红包</h2><blockquote><p>参与活动，助力抽奖！集满 1 个 flag，即可提取 1 个 flag。</p><p>恭喜你积攒到 0.5…… 个 flag，<br>剩余时间：10分00秒</p><p>已有 0 位好友为您助力。</p><p>将如下链接分享给好友，可以获得好友助力，获得更多 flag：……</p></blockquote><p><del>老并夕夕了</del>，经过一些测试和看规则可以知道，ip 在同一 /8 网段的用户被视为同一用户，即 ip 地址的第一个点前面的数字不一样才是不同用户<br>再用虚拟机和手机试一下，发现每个用户增加的 flag 数量很小<br>所以推测需要200+个 ip 地址，肯定不会要真的转发，而且也很难凑出很多不在同一 /8 网段的 ip</p><p>于是在 BurpSuite 里面抓包可以看到，每次点击“助力”都会发送一个到助力链接的 POST，内容为 ip 地址<br><img src="/p/f54b44c/burp.png"><br>然后将其发送到 Repeater 中，尝试更改 ip 地址，得到的 Response 中说 “失败！检测到前后端检测 IPv4 地址不匹配”</p><p>所以仅仅更改 POST 内容的 ip 是不够的，而提供给检测的内容也仅仅是一个 POST，所以可以更改 POST 头，添加 <strong>X-Forwarded-For</strong><br>然后使用 python 就可以循环发送 POST 并伪造 ip 地址得到256个助力了，刚好达到1个flag：<br>（要注意 sleep 一段时间，不然会出现操作过快拒绝的情况；也不要 sleep 过长，否则超过10分钟 flag 就无效了）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests </span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://202.38.93.111:10888/invite/...&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tqdm(total=<span class="number">256</span>) <span class="keyword">as</span> pbar:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        res = requests.post(url, data=&#123;<span class="string">&quot;ip&quot;</span>: <span class="string">f&quot;<span class="subst">&#123;i&#125;</span>.0.0.0&quot;</span>&#125;, headers=&#123;<span class="string">&quot;X-Forwarded-For&quot;</span>: <span class="string">f&quot;<span class="subst">&#123;i&#125;</span>.0.0.0&quot;</span>&#125;)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;成功&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;[x] 失败&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(res.text)</span><br><span class="line">        time.sleep(<span class="number">1.5</span>)</span><br><span class="line">        pbar.update(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="图之上的信息"><a href="#图之上的信息" class="headerlink" title="图之上的信息"></a>图之上的信息</h2><blockquote><p>小 T 听说 GraphQL 是一种特别的 API 设计模式，也是 RESTful API 的有力竞争者，所以他写了个小网站来实验这项技术。</p><p>你能通过这个全新的接口，获取到没有公开出来的管理员的邮箱地址吗？</p></blockquote><p>题目信息给的很充分，用的是 GraphQL，要用其得到 admin 的邮箱</p><p>没接触过 GraphQL，所以直接必应（逃<br>查到了很多有用的东西：</p><ul><li><a href="https://graphql.cn/">GraphQL官网</a>：了解一下 GraphQL 是干什么的，要怎么用</li><li><a href="https://www.electronjs.org/apps/graphiql">GraphiQL</a>：一个进行 GraphQL 查询的 GUI</li><li><a href="https://zhuanlan.zhihu.com/p/390876937">【安全记录】玩转GraphQL - DVGA靶场（上）- 知乎</a></li><li><a href="https://apis.guru/graphql-voyager/">GraphQL Voyager</a>：可视化现实 GraphQL 内省出的结构</li></ul><p>简而言之，GraphQL 就是一个可以通过一次 query 请求查询多个资源的 API 模式，只要 <code>网址/graphql?query=...</code> 就可以实现查询<br>有些使用 GraphQL 的网站可以直接通过访问 <code>网址/graphiql</code> 得到查询的 GUI<br>但是本题中禁止了，但可以使用 GraphiQL 软件来进行查询</p><p>在第三个链接中可以了解到，可以利用 GraphQL 的内省查询来泄露出内部的结构，把其中的查询语句丢到 GraphiQL 中可以得到结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">query IntrospectionQuery &#123; __schema &#123; queryType &#123; name &#125; mutationType &#123; name &#125; subscriptionType &#123; name &#125; types &#123; ...FullType &#125; directives &#123; name description locations args &#123; ...InputValue &#125; &#125; &#125;&#125;fragment FullType on __Type &#123; kind name description fields(includeDeprecated: true) &#123; name description args &#123; ...InputValue &#125; type &#123; ...TypeRef &#125; isDeprecated deprecationReason &#125; inputFields &#123; ...InputValue &#125; interfaces &#123; ...TypeRef &#125; enumValues(includeDeprecated: true) &#123; name description isDeprecated deprecationReason &#125; possibleTypes &#123; ...TypeRef &#125;&#125;fragment InputValue on __InputValue &#123; name description type &#123; ...TypeRef &#125; defaultValue&#125;fragment TypeRef on __Type &#123; kind name ofType &#123; kind name ofType &#123; kind name ofType &#123; kind name ofType &#123; kind name ofType &#123; kind name ofType &#123; kind name ofType &#123; kind name &#125; &#125; &#125; &#125; &#125; &#125; &#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="/p/f54b44c/graphiql.png"></p><p>然后把结果丢到 GraphQL Voyager 中就可以得到可视化的结构：<br><img src="/p/f54b44c/graphql.png"></p><p>所以只需要根据 id query 一下 user 就可以了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">query &#123; user(<span class="built_in">id</span>: <span class="number">1</span>) &#123; privateEmail, &#125; &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;</span><br><span class="line">  <span class="string">&quot;data&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;user&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;privateEmail&quot;</span>: <span class="string">&quot;flag&#123;...&#125;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="赛博厨房"><a href="#赛博厨房" class="headerlink" title="赛博厨房"></a>赛博厨房</h2><blockquote><p>虽然这是你的餐厅，但只有机器人可以在厨房工作。机器人精确地按照程序工作，在厨房中移动，从物品源取出食材，按照菜谱的顺序把食材依次放入锅内。</p><p>机器人不需要休息，只需要一个晚上的时间来学习你教给它的程序，在此之后你就可以在任何时候让机器人执行这个程序，程序的每一步执行都会被记录下来，方便你检查机器人做菜的过程。</p><p>另外为了符合食品安全法的要求，赛博厨房中的机器人同一时间手里只能拿一种食物，每次做菜前都必须执行清理厨房的操作，把各处的食物残渣清理掉，然后回到厨房角落待命。</p><p>每天的菜谱可能不同，但也许也存在一些规律。</p><p>对机器人编程可以使用的指令有（n, m 为整数参数，程序的行号从 0 开始，注意指令中需要正确使用空格）：</p><blockquote><p>向上 n 步<br>向下 n 步<br>向左 n 步<br>向右 n 步<br>放下 n 个物品<br>拿起 n 个物品<br>放下盘子<br>拿起盘子<br>如果手上的物品大于等于 n 向上跳转 m 行<br>如果手上的物品大于等于 n 向下跳转 m 行</p></blockquote><p>赶紧进入赛博厨房开始做菜吧！</p></blockquote><p>刚看题还是挺懵的，想了好半天才明白<br>简单说来就是，每天可以编写新的程序，但是只能运行一个之前编写过的程序<br>每个程序只有几种指令可以使用，需要在其中满足菜谱的顺序要求</p><p>而问题在于，编写程序后的第二天的菜谱可能会不同，导致前面编写的程序无法使用<br>所以就需要<em>预测</em>第二天的菜谱</p><h3 id="Level-0"><a href="#Level-0" class="headerlink" title="Level 0"></a>Level 0</h3><p>可以看到第 0 天的菜谱是 1, 0，也就是要在同一个程序中依次向锅(1,0)中放入 1 号食物(0,2)和 0 号食物(0,1)<br>随便编写程序保存，直接到下一天，可以发现菜谱发生了变化<br>多次尝试之后发现菜谱<strong>只有 0,0 / 0,1 / 1,0 / 1,1 四种</strong></p><p>所以在第 0 天编写学习四个程序，到下一天就可以根据菜谱来执行了<br>例如程序 1,0 就可以编写为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">向右 2 步</span><br><span class="line">拿起 1 个物品</span><br><span class="line">向左 2 步</span><br><span class="line">向下 1 步</span><br><span class="line">放下 1 个物品</span><br><span class="line">向上 1 步</span><br><span class="line">向右 1 步</span><br><span class="line">拿起 1 个物品</span><br><span class="line">向左 1 步</span><br><span class="line">向下 1 步</span><br><span class="line">放下 1 个物品</span><br><span class="line">向上 1 步</span><br></pre></td></tr></table></figure><p>只要正确了一天，就可以拿到 flag 了</p><h3 id="Level-1"><a href="#Level-1" class="headerlink" title="Level 1"></a>Level 1</h3><p>只有 1 个食物，菜谱是好多 0<br>同样随便编写程序保存进入下一天，发现菜谱<strong>没有变化</strong>，还是 73 个 0<br>所以这一关可能只是循环的教程<br>可用的指令中有一条 “如果手上的物品大于等于 n 向上跳转 m 行”<br>可以用它来达到<strong>循环</strong>的效果</p><p>只需要拿 73 个物品，然后循环放下直到手中没有了即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">向右 1 步</span><br><span class="line">拿起 73 个物品</span><br><span class="line">向左 1 步</span><br><span class="line">向下 1 步</span><br><span class="line">放下 1 个物品</span><br><span class="line">如果手上的物品大于等于 1 向上跳转 1 行</span><br></pre></td></tr></table></figure><p>同样保存下一天执行就可以拿到 flag 了 </p><p><del>剩下的两个看起来大概是通过源码来推测出菜谱的生成方法，然后编写相应的指令，太难了，不会qwq</del></p><hr><h2 id="助记词"><a href="#助记词" class="headerlink" title="助记词"></a>助记词</h2><p>题目有效内容：</p><blockquote><p>你的室友终于连夜赶完了他的 Java 语言程序设计的课程大作业。看起来他使用 Java 17 写了一个保存助记词的后端，当然还有配套的前端。助记词由四个英文单词组成，每个用户最多保存 32 条。</p><p>你从他充满激情却又夹杂不清的表述中得知，他似乎还为此专门在大作业里藏了两个 flag：当访问延迟达到两个特殊的阈值时，flag 便会打印出来，届时你便可以拿着 flag 让你的室友请你吃一顿大餐。</p></blockquote><p>下载到源码后翻一翻，有用的就只有 Phrase.java 和 Instance.java<br>其中 Phrase.java 定义了 Phrase，其中重载了 <code>equals</code> 方法，其中有：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    TimeUnit.MILLISECONDS.sleep(EQUALS_DURATION_MILLIS); <span class="comment">// 20ms</span></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> remove it since it is for debugging</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以在每次比较相等的时候就会 sleep 20ms </p><p>而 Instance.java 的 post 方法中对于每次的输入，遍历输入的列表，然后逐个加进 HashMap 中<br>在加入 HashMap 的时候就涉及到判断是否相等<br>而最终会判断在完成前后的总的时间间隔是多少，如果大于 600ms 就提取出第一个 flag：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> modified = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> before = System.nanoTime();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; input.length() &amp;&amp; i &lt; MAX_PHRASES &amp;&amp; phrases.size() &lt; MAX_PHRASES; ++i) &#123;</span><br><span class="line">    <span class="keyword">var</span> text = input.optString(i, <span class="string">&quot;&quot;</span>).toLowerCase(Locale.ENGLISH);</span><br><span class="line">    modified += phrases.add(Phrase.create(<span class="keyword">this</span>.mnemonics, text, token)) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 这里会 sleep</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> after = System.nanoTime();</span><br><span class="line"><span class="keyword">var</span> duration = TimeUnit.MILLISECONDS.convert(after - before, TimeUnit.NANOSECONDS);</span><br><span class="line"><span class="keyword">if</span> (duration &gt; FLAG1_DURATION_MILLIS) &#123; <span class="comment">// 600ms</span></span><br><span class="line">    token.addFlag(<span class="number">1</span>, flag -&gt; output.put(<span class="string">&quot;flag1&quot;</span>, flag));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而在网页中添加条目的时候，一次只能添加一条，也就是一个 POST 里面只有一个 Phrase<br>但是源码中有一个循环，遍历整个 input，所以一个 POST 里的内容其实是一个列表<br>所以可以用 BurpSuite 获取 POST 然后更改一下内容再发送出去（先 random 一个，然后 add）<br><img src="/p/f54b44c/mnemonic.png"><br>根据 flag 里的提示，正解（第二顿大餐）应该是使用哈希碰撞，<del>但是不会</del></p><hr><h2 id="p😭q"><a href="#p😭q" class="headerlink" title="p😭q"></a>p😭q</h2><blockquote><p>学会傅里叶的一瞬间，悔恨的泪水流了下来。</p><p>当我看到音频播放器中跳动的频谱动画，月明星稀的夜晚，深邃的银河，只有天使在浅吟低唱，复杂的情感于我眼中溢出，像是沉入了雾里朦胧的海一样的温柔。</p><p>这一刻我才知道，耳机音响也就图一乐，真听音乐还得靠眼睛。</p><p>（注意：flag 花括号内是一个 12 位整数，由 0-9 数位组成，没有其它字符。）</p></blockquote><p>虽然这题是在倒数第三题，还值 400pt，<del>但你一说傅里叶我可就不困了嗷</del></p><p>下载题目包，有一个生成 gif 的 py 代码和那个 gif 文件<br>正好前面的电波也有一段音频，可以用那个带入到 generate_sound_visualization.py 中生成一个 gif，然后用这个来测试</p><p>再仔细看一看 generate_sound_visualization.py 这个文件<br>主要使用了 <code>librosa</code>，于是就可以翻<a href="https://librosa.org/doc/latest/index.html">文档</a>来看懂这个程序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">y, sample_rate = librosa.load(<span class="string">&quot;flag.mp3&quot;</span>) <span class="comment"># 从mp3中读取数据和采样率</span></span><br><span class="line"></span><br><span class="line">spectrogram = numpy.around( <span class="comment"># 四舍五入，但会造成逆向的时候有少许误差导致杂音</span></span><br><span class="line">    librosa.power_to_db( <span class="comment"># 把以功率为单位的频谱图转换为以分贝为单位</span></span><br><span class="line">        librosa.feature.melspectrogram( <span class="comment"># 通过音频数据和采样率计算梅尔频谱</span></span><br><span class="line">            y, sample_rate, n_mels=num_freqs,</span><br><span class="line">            n_fft=fft_window_size, </span><br><span class="line">            hop_length=frame_step_size, </span><br><span class="line">            window=window_function_type</span><br><span class="line">        )</span><br><span class="line">    ) / quantize <span class="comment"># 除以2</span></span><br><span class="line">) * quantize <span class="comment"># 乘以2</span></span><br></pre></td></tr></table></figure><p>然后又通过一些 <code>numpy</code> 的骚操作来生成每一帧的数据，然后通过 <code>array2gif</code> 包的 write_gif 函数来生成 gif </p><p>所以主要思路就是把整个程序<strong>完整地逆过来</strong></p><p>由于必应没有查到 <code>gif2array</code> 的包，所以读取 gif 就用了经典 <code>PIL.Image</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">file = Image.<span class="built_in">open</span>(<span class="string">&quot;flag.gif&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        gif_data.append(np.array(file))</span><br><span class="line">        file.seek(file.tell() + <span class="number">1</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[+] Read gif file&quot;</span>)</span><br></pre></td></tr></table></figure><p>然后是解决那一大段 numpy 骚操作的逆骚操作（<br>但是数理基础这么差的我当然是不想仔细研究了，所以直接用电波那题的 radio.mp3 带入，看一看要得到的 spectrogram 是什么样子<br>输出得到的 spectrogram 是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[[-<span class="number">58.</span> -<span class="number">48.</span> -<span class="number">30.</span> ... -<span class="number">58.</span> -<span class="number">58.</span> -<span class="number">58.</span>]</span><br><span class="line"> [-<span class="number">58.</span> -<span class="number">44.</span> -<span class="number">26.</span> ... -<span class="number">58.</span> -<span class="number">58.</span> -<span class="number">58.</span>]</span><br><span class="line"> [-<span class="number">58.</span> -<span class="number">40.</span> -<span class="number">16.</span> ... -<span class="number">58.</span> -<span class="number">58.</span> -<span class="number">58.</span>]</span><br><span class="line"> ...</span><br><span class="line"> [-<span class="number">58.</span> -<span class="number">42.</span> -<span class="number">30.</span> ... -<span class="number">58.</span> -<span class="number">58.</span> -<span class="number">58.</span>]</span><br><span class="line"> [-<span class="number">58.</span> -<span class="number">44.</span> -<span class="number">32.</span> ... -<span class="number">58.</span> -<span class="number">58.</span> -<span class="number">58.</span>]</span><br><span class="line"> [-<span class="number">58.</span> -<span class="number">46.</span> -<span class="number">34.</span> ... -<span class="number">58.</span> -<span class="number">58.</span> -<span class="number">58.</span>]]</span><br></pre></td></tr></table></figure><p>而转置过来是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[[-<span class="number">58.</span> -<span class="number">58.</span> -<span class="number">58.</span> ... -<span class="number">58.</span> -<span class="number">58.</span> -<span class="number">58.</span>]</span><br><span class="line"> [-<span class="number">48.</span> -<span class="number">44.</span> -<span class="number">40.</span> ... -<span class="number">42.</span> -<span class="number">44.</span> -<span class="number">46.</span>]</span><br><span class="line"> [-<span class="number">30.</span> -<span class="number">26.</span> -<span class="number">16.</span> ... -<span class="number">30.</span> -<span class="number">32.</span> -<span class="number">34.</span>]</span><br><span class="line"> ...</span><br><span class="line"> [-<span class="number">58.</span> -<span class="number">58.</span> -<span class="number">58.</span> ... -<span class="number">58.</span> -<span class="number">58.</span> -<span class="number">58.</span>]</span><br><span class="line"> [-<span class="number">58.</span> -<span class="number">58.</span> -<span class="number">58.</span> ... -<span class="number">58.</span> -<span class="number">58.</span> -<span class="number">58.</span>]</span><br><span class="line"> [-<span class="number">58.</span> -<span class="number">58.</span> -<span class="number">58.</span> ... -<span class="number">58.</span> -<span class="number">58.</span> -<span class="number">58.</span>]]</span><br></pre></td></tr></table></figure><p>减去 min_db=-60 第一行正好是 2，第二行是 [12. 16. 20. … 18. 16. 14.]<br>再对应到生成的 gif 文件中，可以看出 gif 的第一帧每个矩形的高度都是 2<br>而第二帧每个矩形的高度也恰好是刚得出的那组数<br>所以要得到的 spectrogram 就是 <strong>gif 每一帧所有矩形的高度构成的矩阵的转置</strong></p><p>再结合源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">numpy.array([</span><br><span class="line">    [</span><br><span class="line">        red_pixel <span class="keyword">if</span> freq % <span class="number">2</span> <span class="keyword">and</span> <span class="built_in">round</span>(frame[freq // <span class="number">2</span>]) &gt; threshold <span class="keyword">else</span> white_pixel </span><br><span class="line">        <span class="keyword">for</span> threshold <span class="keyword">in</span> <span class="built_in">list</span>(<span class="built_in">range</span>(min_db, max_db + <span class="number">1</span>, quantize))[::-<span class="number">1</span>]</span><br><span class="line">    ] </span><br><span class="line">    <span class="keyword">for</span> freq <span class="keyword">in</span> <span class="built_in">range</span>(num_freqs * <span class="number">2</span> + <span class="number">1</span>)</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p>可以看出，每个矩形加上左边的空格正好是 4 个像素，所以每四列读取最后一列即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">spectrogramT = []</span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> gif_data:</span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> ind, line <span class="keyword">in</span> <span class="built_in">enumerate</span>(data.transpose()): <span class="comment"># 将每一帧转置，方便计算</span></span><br><span class="line">        num = <span class="built_in">sum</span>(line) <span class="comment"># 计算每个矩形的高度（转置后是宽度）</span></span><br><span class="line">        <span class="keyword">if</span> ind % <span class="number">4</span> == <span class="number">3</span>:</span><br><span class="line">            res.append(num + min_db) <span class="comment"># 得到的数要加上-60才符合规矩</span></span><br><span class="line">    spectrogramT.append(res)</span><br><span class="line"></span><br><span class="line">spectrogram = np.array(spectrogramT).transpose() <span class="comment"># 得到的结果转置一下</span></span><br></pre></td></tr></table></figure><p>这样就得到了梅尔频谱图的数据，可以对 librosa 的部分进行逆过程了<br>翻 librosa 的文档，有 <code>power_to_db</code> 当然也就有 <code>db_to_power</code><br>而且类似于 melspectrogram 函数在 librosa.feature 中，可以专门看 <a href="https://librosa.org/doc/latest/feature.html">feature 部分的文档</a><br>翻到了 inverse 部分，可以看到有一个函数 <code>librosa.feature.inverse.mel_to_audio</code> 可以直接把梅尔频谱图专为音频数据，所以就用它了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">y = librosa.feature.inverse.mel_to_audio(</span><br><span class="line">    librosa.db_to_power(spectrogram), <span class="comment"># 乘二除二没什么大用，而且影响效果，就删了</span></span><br><span class="line">    sample_rate, n_iter=num_freqs, <span class="comment"># 采样率题目提供了，是 22050Hz</span></span><br><span class="line">    n_fft=fft_window_size,</span><br><span class="line">    hop_length=frame_step_size,</span><br><span class="line">    window=window_function_type,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>这样就完成了还原，最后是输出，但是并没在 librosa 中找到音频输出的函数，所以就用了经典 <code>soundfile</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> soundfile <span class="keyword">as</span> sf</span><br><span class="line">sf.write(<span class="string">&quot;flag.wav&quot;</span>, y, sample_rate)</span><br></pre></td></tr></table></figure><p>然后打开听就行了，题目说了是个 12 位数，所以剩下的就是英语听力了，翻译过来的数字就是 flag 了 </p><hr><p>基本上我觉得比较简单的也就这些了，剩下的令我破防的放下一篇_(:з」∠)_</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://www.cnblogs.com/holdon521/p/4686849.html">伪造http请求ip地址 - 博客园</a></li><li><a href="https://graphql.cn/">GraphQL官网</a>、<a href="https://www.electronjs.org/apps/graphiql">GraphiQL</a>、<a href="https://apis.guru/graphql-voyager/">GraphQL Voyager</a></li><li><a href="https://zhuanlan.zhihu.com/p/390876937">【安全记录】玩转GraphQL - DVGA靶场（上）- 知乎</a></li><li><a href="https://librosa.org/doc/latest/index.html">librosa文档</a></li><li><a href="https://pysoundfile.readthedocs.io/en/latest/">PySoundFile文档</a></li></ul><div style="display: flex; justify-content: space-between;"><p><a href="/p/fd872e78.html">&lt; #1</a></p><p><a href="/p/f152ab1f.html">#3 &gt;</a></p></div>]]></content>
    
    
    <summary type="html">&lt;div style=&quot;display: flex; justify-content: space-between;&quot;&gt;

&lt;p&gt;&lt;a href=&quot;/p/fd872e78.html&quot;&gt;&amp;lt; #1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/p/f152ab1f.html&quot;&gt;#3 &amp;gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;这里接&lt;a href=&quot;/p/fd872e78.html&quot;&gt;上一篇&lt;/a&gt;，Writeup 的有：大砍刀、图之上、赛博厨房01、助记词1、p😭q&lt;br&gt;有些虽然偏后、分值高，但是总体并不难&lt;/p&gt;</summary>
    
    
    
    <category term="Writeup" scheme="https://blog.tonycrane.cc/categories/Writeup/"/>
    
    
    <category term="CTF" scheme="https://blog.tonycrane.cc/tags/CTF/"/>
    
    <category term="Writeup" scheme="https://blog.tonycrane.cc/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>「Hackergame 2021」#1 Writup 开局上分篇 0</title>
    <link href="https://blog.tonycrane.cc/p/fd872e78.html"/>
    <id>https://blog.tonycrane.cc/p/fd872e78.html</id>
    <published>2021-10-29T01:39:56.000Z</published>
    <updated>2021-10-30T05:04:39.064Z</updated>
    
    <content type="html"><![CDATA[<div style="display: flex; justify-content: space-between;"><p><a href="/p/c05d7b7c.html">&lt; #0</a></p><p><a href="/p/f54b44c.html">#2 &gt;</a></p></div><p>这篇 Writeup 写一下 Hackergame 2021 里面比较好做的一些题目做法（<del>以及吐槽</del>）：<br>签到、十六进制、电波、猫咪问答、卖瓜、透明文件、旅行照片</p><p>开局基本上就靠这些上分了（逃<br>也都是看上去就知道该怎么做，只是实现的难度不同了（</p><span id="more"></span><hr><h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><blockquote><p>为了能让大家顺利签到，命题组把每一秒的 flag 都记录下来制成了日记本的一页。你只需要打开日记，翻到 Hackergame 2021 比赛进行期间的任何一页就能得到 flag！</p></blockquote><p>很明确，进入网址后一直点 Next 翻到比赛时间就好了（误</p><p>看到了 URI 里有 <code>?page=...</code>，所以也懒得计算了，手动二分，大概 <code>?page=1635000000</code> 左右就可以看到 flag 了</p><p><del>赛后才反应过来原来是 UNIX 时间戳</del></p><hr><h2 id="进制十六——参上"><a href="#进制十六——参上" class="headerlink" title="进制十六——参上"></a>进制十六——参上</h2><p><img src="/p/fd872e78/hex_editor.png"><br>也很明确，直接把右侧挡住的 flag 部分对应左边的十六进制数换算成十进制，然后根据 ASCII 码转成字符。或者直接把左侧抄进 Hex Friend 也可以直接得到右侧的flag。</p><p>（**当时这题抄串行了两三次……）</p><hr><h2 id="去吧！追寻自由的电波"><a href="#去吧！追寻自由的电波" class="headerlink" title="去吧！追寻自由的电波"></a>去吧！追寻自由的电波</h2><blockquote><p>当然，如果只是这样还远远不够。遵依史称“老爹”的上古先贤的至理名言，必须要“用魔法打败魔法”。X 同学向上级申请到了科大西区同步辐射实验室设备的使用权限，以此打通次元空间，借助到另一个平行宇宙中 Z 同学的法力进行数据对冲，方才于乱中搏得一丝机会，将 flag 用无线电的形式发射了出去。</p><p>考虑到信息的鲁棒性，X 同学使用了无线电中惯用的方法来区分字符串中读音相近的字母。即使如此，打破次元的强大能量扭曲了时空，使得最终接受到的录音的速度有所改变。</p></blockquote><p>（这题在群里看起来好像卡了很多人，不知道为什么）<br>题目下载下来是一个听起来杂乱的音频</p><p>题里最后说了 “最终接受到的录音的<strong>速度</strong>有所改变”，所以考虑将音频时间拉长。<br>最开始使用了 Adobe Audition，但是效果不是很理想，大概是重新采样等一系列算法导致的<br>所以换了 Adobe Premier Pro 直接用比率拉伸工具拉长音频，还是可以听清的<br>不断尝试之后，大概放慢三倍左右就可以听出读的是英语单词了</p><p>题里说到了 “考虑到信息的鲁棒性，X 同学使用了<strong>无线电中惯用的方法</strong>来区分字符串中读音相近的字母”，所以就查到了<a href="https://zhuanlan.zhihu.com/p/101866561">国际航空无线电通讯26个英文字母读法</a><br>然后仔细听，辨别每个单词的第一个音就可以得到 flag 了</p><hr><h2 id="猫咪问答-Pro-Max"><a href="#猫咪问答-Pro-Max" class="headerlink" title="猫咪问答 Pro Max"></a>猫咪问答 Pro Max</h2><p>五道刁钻的题目，但是还是好查到的，题目里也说了“解出谜题不需要是科大在校学生”</p><blockquote><ol><li>2017 年，中科大信息安全俱乐部（SEC@USTC）并入中科大 Linux 用户协会（USTCLUG）。目前，信息安全俱乐部的域名（sec.ustc.edu.cn）已经无法访问，但你能找到信息安全俱乐部的社团章程在哪一天的会员代表大会上通过的吗？</li></ol></blockquote><p>看到了 “目前，已经无法访问” 说明这个域名曾经是可以访问的，直接通过<del>互联网的记忆</del>archive.org，查到这个域名的历史存档，随便找一天就可以看到他们官网中的<a href="https://web.archive.org/web/20170613090934/http://sec.ustc.edu.cn/doku.php/codes">信息安全俱乐部社团章程</a>。<br>其中第一行就写了 “本章程在 <em>2015 年 5 月 4 日</em>，经会员代表大会审议通过。”</p><p>所以答案就是 <strong>20150504</strong></p><blockquote><ol start="2"><li>中国科学技术大学 Linux 用户协会在近五年多少次被评为校五星级社团？</li></ol></blockquote><p>直接去科大 LUG 官网的 <a href="https://lug.ustc.edu.cn/wiki/intro/">Intro 页面</a>，就可以看到 “于 2015 年 5 月、2017 年 7 月、2018 年 9 月、2019 年 8 月及 2020 年 9 月被评为中国科学技术大学五星级学生社团。”<br>所以是4次（x<br>但是怀疑一下为什么没有2021年，因为都是在9月份左右，所以可能是数据没更新，这题4和5都有可能</p><p>尝试后得到答案是 <strong>5</strong></p><blockquote><ol start="3"><li>中国科学技术大学 Linux 用户协会位于西区图书馆的活动室门口的牌子上“LUG @ USTC”下方的小字是？</li></ol></blockquote><p>这题也简单，直接问科大同学就好了（x<br>翻了 LUG 的微信公众号和 QQ 官方号，都没啥收获，最后发现官网上有 <a href="https://lug.ustc.edu.cn/news/">News</a>。这样的话，如果新启用活动室的话，一定会有一篇新闻稿，搜索“图书馆”得到了<a href="https://lug.ustc.edu.cn/news/2016/06/new-activity-room-in-west-library/">「西区图书馆新活动室启用」</a>这篇文章，开篇第一张大图就是门口牌子的照片</p><p>所以答案是 <strong>Development Team of Library</strong> （注意大小写）</p><blockquote><ol start="4"><li>在 SIGBOVIK 2021 的一篇关于二进制 Newcomb-Benford 定律的论文中，作者一共展示了多少个数据集对其理论结果进行验证？</li></ol></blockquote><p>应该没必要搜谷歌学术之类的，直接必应查 “SIGBOVIK Newcomb-Benford” 就可以找到 SIGBOVIK 的<a href="http://sigbovik.org/2021/proceedings.pdf">这一篇大文章合集</a>，再搜索 Newcomb 就可以看到题目里说的论文了。<br>全文也不长，只有四页，后两页全是数据的图，数一下，一共有13幅</p><p>所以答案是 <strong>13</strong></p><blockquote><ol start="5"><li>不严格遵循协议规范的操作着实令人生厌，好在 IETF 于 2021 年成立了 Protocol Police 以监督并惩戒所有违背 RFC 文档的行为个体。假如你发现了某位同学可能违反了协议规范，根据 Protocol Police 相关文档中规定的举报方法，你应该将你的举报信发往何处？</li></ol></blockquote><p>没啥好说的，直接查，答案 <strong>/dev/null</strong></p><p>然后提交就可以得到flag</p><hr><h2 id="卖瓜"><a href="#卖瓜" class="headerlink" title="卖瓜"></a>卖瓜</h2><p>题目里比较重要的话就是：</p><blockquote><p>补充说明：当称的数字变为浮点数而不是整数时，HQ 不会认可最终的称重结果。</p></blockquote><p>题目的目的也很明确，用一堆9和一堆6加起来得到20。肯定不能<del>像华强一样</del>劈瓜，所以输入一定是整数<br>那就可以考虑溢出<br>但是经过尝试，给的数字太大，就会使结果溢出到浮点数，这不是想要的（因为即使凑到了20.0也不正确）</p><p>那如果数字再大呢，比如 2000000000000000000（18个0）个9斤的瓜，可以发现，这时直接溢出到了负整型 -446744073709551616<br>再补上 49638230412172000 个9斤的瓜就可以得到 -3616，加上20可以被6整除，所以再加上606个6斤的瓜就可以得到 20</p><p><del>恭喜你逃过一劫！华强～华强！</del></p><hr><h2 id="透明的文件"><a href="#透明的文件" class="headerlink" title="透明的文件"></a>透明的文件</h2><blockquote><p>一个透明的文件，用于在终端中展示一个五颜六色的 flag。</p><p>可能是在 cmd.exe 等劣质终端中被长期使用的原因，这个文件失去了一些重要成分，变成了一堆乱码，也不会再显示出 flag 了。</p><p>注意：flag 内部的字符全部为小写字母。</p></blockquote><p>拿到文件，看到里面好多 <code>[ ; m</code> 之类的，再结合终端中输出带颜色文字的 <code>\033[...m;</code> 之类的方法，以及题目中的 “失去了一些<strong>重要成分</strong>”<br>所以直接尝试把 <code>[</code> 全局替换为 <code>\033[</code>，然后复制到 python 中 print，就可以看到神奇的一幕了（其实并没完全做完，但是可以已经看了）<br><img src="/p/fd872e78/transparent.png"><br>然后读出 flag 即可（全是小写字母）</p><hr><h2 id="旅行照片"><a href="#旅行照片" class="headerlink" title="旅行照片"></a>旅行照片</h2><blockquote><p>你的学长决定来一场说走就走的旅行。通过他发给你的照片来看，他应该是在酒店住下了。</p><p>从照片来看，酒店似乎在小区的一栋高楼里，附近还有一家 KFC 分店。突然，你意识到照片里透露出来的信息比表面上看起来的要多。</p><p>请观察照片并答对全部 5 道题以获取 flag。注意：图片未在其他地方公开发布过，也未采取任何隐写措施（通过手机拍摄屏幕亦可答题）。<br><img src="/p/fd872e78/travel-photo.jpg"></p></blockquote><p>“手机拍摄屏幕亦可答题”，所以照片中没有任何地址的元信息，只能靠看图<br><strong>线索</strong>：海边、KFC、高楼、大石头、停车位</p><p>先看那个KFC，大概是个网红店，所以搜索 “网红 海边 KFC”，查到了秦皇岛，而且也是海边<br>再进一步看地图和街景地图就可以确定地点在 <strong>秦皇岛新澳海底世界</strong></p><p>然后是5个问题</p><blockquote><p>该照片拍摄者的面朝方向为：</p></blockquote><p>根据地图，对比一下就可以得到，面朝方向是 <strong>东南</strong></p><blockquote><p>该照片的拍摄时间大致为：</p></blockquote><p>根据选项里的时间，下午是两点半左右，而在东北的两点半左右其实和中午差不多，影子和光温也不太像这个样子，所以可以确定时间大致是 <strong>傍晚</strong></p><blockquote><p>该照片的拍摄者所在楼层为：</p></blockquote><p>不好确定，但是答案可以交很多次，所以从9层左右依次试就可以了，最后得到楼层是 <strong>14</strong></p><blockquote><p>该照片左上角 KFC 分店的电话号码是：</p></blockquote><p>直接用地图软件搜 “秦皇岛新澳 KFC” 就可以查到那家店铺，也给了电话，或者搜索 ”网红 海边 KFC“ 也可以直接得到电话：<strong>0335-7168800</strong></p><blockquote><p>该照片左上角 KFC 分店左侧建筑有三个水平排列的汉字，它们是：</p></blockquote><p>通过街景地图就可以看到 KFC 左边的建筑上写了 <strong>海豚馆</strong></p><hr><p>看来写了不少了，剩下的简单题放到下一篇里_(:з」∠)_</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://hack.lug.ustc.edu.cn/">Hackergame</a></li><li><a href="https://zhuanlan.zhihu.com/p/101866561">国际航空无线电通讯26个英文字母读法 - 知乎</a></li><li><a href="https://lug.ustc.edu.cn/">LUG@USTC 官网</a></li><li><a href="https://archive.org/">Wayback Machine archive.org</a></li><li><a href="http://sigbovik.org/2021/proceedings.pdf">SIGBOVIK 2021</a></li><li><a href="http://quanjing.baidu.com/">百度全景地图</a></li></ul><div style="display: flex; justify-content: space-between;"><p><a href="/p/c05d7b7c.html">&lt; #0</a></p><p><a href="/p/f54b44c.html">#2 &gt;</a></p></div>]]></content>
    
    
    <summary type="html">&lt;div style=&quot;display: flex; justify-content: space-between;&quot;&gt;

&lt;p&gt;&lt;a href=&quot;/p/c05d7b7c.html&quot;&gt;&amp;lt; #0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/p/f54b44c.html&quot;&gt;#2 &amp;gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;这篇 Writeup 写一下 Hackergame 2021 里面比较好做的一些题目做法（&lt;del&gt;以及吐槽&lt;/del&gt;）：&lt;br&gt;签到、十六进制、电波、猫咪问答、卖瓜、透明文件、旅行照片&lt;/p&gt;
&lt;p&gt;开局基本上就靠这些上分了（逃&lt;br&gt;也都是看上去就知道该怎么做，只是实现的难度不同了（&lt;/p&gt;</summary>
    
    
    
    <category term="Writeup" scheme="https://blog.tonycrane.cc/categories/Writeup/"/>
    
    
    <category term="CTF" scheme="https://blog.tonycrane.cc/tags/CTF/"/>
    
    <category term="Writeup" scheme="https://blog.tonycrane.cc/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>「Hackergame 2021」#0 赛后总结</title>
    <link href="https://blog.tonycrane.cc/p/c05d7b7c.html"/>
    <id>https://blog.tonycrane.cc/p/c05d7b7c.html</id>
    <published>2021-10-29T01:01:01.000Z</published>
    <updated>2022-02-16T07:45:11.666Z</updated>
    
    <content type="html"><![CDATA[<p>七天紧张刺激<del>破防</del>的 Hackergame 2021 终于结束了_(:з」∠)_<br>在这丢一个总结和 Writeup 链接。</p><h2 id="Writeup"><a href="#Writeup" class="headerlink" title="Writeup"></a>Writeup</h2><ul><li><a href="/p/fd872e78.html">「Hackergame 2021」#1 Writup 开局上分篇 0</a><br>  签到、十六进制、电波、猫咪问答、卖瓜、透明文件、旅行照片</li><li><a href="/p/f54b44c.html">「Hackergame 2021」#2 Writup 开局上分篇 1</a><br>  大砍刀、图之上、赛博厨房01、助记词1、p😭q</li><li><a href="/p/f152ab1f.html">「Hackergame 2021」#3 Writup 持续破防篇 0</a><br>  Amnesia1、RSA、LUKS、MicroWorld</li><li><a href="/p/d11ec8ed.html">「Hackergame 2021」#4 Writup 持续破防篇 1</a><br>  阵列恢复、马赛克、minecRaft、密码生成器</li></ul><span id="more"></span><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>第一次参加 Hackergame，大概也算是第一次参加比较正式的 CTF 比赛。</p><p>这次的时间也比较难受，10月23日开始，然而当天有管乐团音乐会演出，要全天排练。24号去听了帝玖室内乐团的音乐会。剩下工作日的时间也要上课，还要复（预）习小测。<br>但还是抽出很长时间来打了 Hackergame。</p><p>经过七天，拿到了浙大组内第三、总排行第二十二的成绩<br><img src="/p/c05d7b7c/rank.jpg"><br>总之，非常感谢鼓励我（<del>拉入坑</del>）的 GZTime，感谢一直上分的 yyy 大佬和 Cage 学长督促我继续做题（<del>别卷啦</del>），感谢纳新群里活跃气氛的学长（不感谢膜），感谢容忍我凌晨一两点在寝室做题、第二天早上被一堆闹铃吵醒的室友，还要感谢没参加比赛来暴虐我的图灵大佬们（）</p><p>开赛的时候刚好乐团中午休息，于是在休息室做了几道题，接着一两天陆续把会的有思路的题做了。<br>然后就开始了破防阶段（）<br>一杯茶，一包烟，一道题目做一天（x<br>基本上每天除了上课写作业的所有时间都来打 hackergame 了（<del>中间做马赛克破防的夜晚出去闲逛了两个小时</del>）</p><p>总之我也才大一，刚接触 CTF 一个多月，这次打得也挺爽，不知道能不能借此混进 AAA（逃 </p><p>体验良好，但不完全良好，下次再来_(:з」∠)_</p><hr><p style="font-size: x-small; text-align: right;">声明：虽然总结和 Writeup 的创建时间在比赛结束前，但均在比赛结束后才发布到互联网</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;七天紧张刺激&lt;del&gt;破防&lt;/del&gt;的 Hackergame 2021 终于结束了_(:з」∠)_&lt;br&gt;在这丢一个总结和 Writeup 链接。&lt;/p&gt;
&lt;h2 id=&quot;Writeup&quot;&gt;&lt;a href=&quot;#Writeup&quot; class=&quot;headerlink&quot; title=&quot;Writeup&quot;&gt;&lt;/a&gt;Writeup&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/p/fd872e78.html&quot;&gt;「Hackergame 2021」#1 Writup 开局上分篇 0&lt;/a&gt;&lt;br&gt;  签到、十六进制、电波、猫咪问答、卖瓜、透明文件、旅行照片&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/p/f54b44c.html&quot;&gt;「Hackergame 2021」#2 Writup 开局上分篇 1&lt;/a&gt;&lt;br&gt;  大砍刀、图之上、赛博厨房01、助记词1、p😭q&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/p/f152ab1f.html&quot;&gt;「Hackergame 2021」#3 Writup 持续破防篇 0&lt;/a&gt;&lt;br&gt;  Amnesia1、RSA、LUKS、MicroWorld&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;/p/d11ec8ed.html&quot;&gt;「Hackergame 2021」#4 Writup 持续破防篇 1&lt;/a&gt;&lt;br&gt;  阵列恢复、马赛克、minecRaft、密码生成器&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Writeup" scheme="https://blog.tonycrane.cc/categories/Writeup/"/>
    
    
    <category term="CTF" scheme="https://blog.tonycrane.cc/tags/CTF/"/>
    
    <category term="Writeup" scheme="https://blog.tonycrane.cc/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>绕过AST解析的python沙箱逃逸方法</title>
    <link href="https://blog.tonycrane.cc/p/6dee32d5.html"/>
    <id>https://blog.tonycrane.cc/p/6dee32d5.html</id>
    <published>2021-10-20T00:14:35.000Z</published>
    <updated>2021-11-29T16:06:21.782Z</updated>
    
    <content type="html"><![CDATA[<p>这类题是在zjusec.com上 ACTF 2019 分组中chenyuan出的一系列python沙箱逃逸题目中看到的<br>在网上搜索貌似也只能搜到 <a href="https://infosecwriteups.com/tokyowesterns-ctf-4th-2018-writeup-part-5-6d699f07f71c">TokyoWesterns CTF 4th 2018</a> 这一次比赛中的题目</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>这类题目不像普通的沙箱逃逸一样通过删除内置函数字典或者删除某些模块的内容来实现<br>而是在输入命令后即使用python的 ast 模块对其进行语法分析，只要使用了某些禁止的抽象语法，就抛出异常导致程序中断</p><span id="more"></span><p>因为它直接使用 ast.parse 分析了语法，所以很难蒙混过关骗过 ast，这时就需要寻找题目中遍历语法树的漏洞了</p><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>先来看看cy的pysandbox13，这个最终版的AST检查绕过</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">dbgprint = sys.stderr.write</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Traversal</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, node</span>):</span></span><br><span class="line">        self.tisiv(node)</span><br><span class="line"></span><br><span class="line">    depth = -<span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tisiv</span>(<span class="params">self, nodes</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(nodes, <span class="built_in">list</span>):</span><br><span class="line">            nodes = [nodes]</span><br><span class="line">        self.depth += <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> node <span class="keyword">in</span> nodes:</span><br><span class="line">            func = <span class="built_in">getattr</span>(self, <span class="string">&#x27;tisiv_&#x27;</span> + node.__class__.__name__, <span class="literal">None</span>)</span><br><span class="line">            <span class="keyword">if</span> func:</span><br><span class="line">                dbgprint(<span class="string">&quot; &quot;</span>*self.depth + <span class="string">&quot;tisiv&quot;</span>[::-<span class="number">1</span>] +<span class="string">&quot;\t&quot;</span>+ node.__class__.__name__+<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> func(node)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(node, ast.expr):</span><br><span class="line">                    <span class="keyword">raise</span> Exception(<span class="string">&quot;not allowed &quot;</span>+<span class="built_in">str</span>(node))</span><br><span class="line">        self.depth -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tisiv_Call</span>(<span class="params">self, node</span>):</span></span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&quot;not allowed&quot;</span>)</span><br><span class="line">        self.tisiv(node.func)</span><br><span class="line">        self.tisiv(node.args)</span><br><span class="line">        self.tisiv(node.keywords)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tisiv_Attribute</span>(<span class="params">self, node</span>):</span></span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&quot;not allowed&quot;</span>)</span><br><span class="line">        self.tisiv(node.value)</span><br><span class="line">        self.tisiv(node.attr)</span><br><span class="line">        self.tisiv(node.ctx)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tisiv_Import</span>(<span class="params">self, node</span>):</span></span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&quot;not allowed&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tisiv_Module</span>(<span class="params">self, node</span>):</span></span><br><span class="line">        self.tisiv(node.body)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tisiv_BoolOp</span>(<span class="params">self, node</span>):</span></span><br><span class="line">        self.tisiv(node.values)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tisiv_BinOp</span>(<span class="params">self, node</span>):</span></span><br><span class="line">        self.tisiv(node.left)</span><br><span class="line">        self.tisiv(node.right)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tisiv_UnaryOp</span>(<span class="params">self, node</span>):</span></span><br><span class="line">        self.tisiv(node.operand)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tisiv_Lambda</span>(<span class="params">self, node</span>):</span></span><br><span class="line">        self.tisiv(node.body)</span><br><span class="line">        self.tisiv(node.args)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tisiv_IfExp</span>(<span class="params">self, node</span>):</span></span><br><span class="line">        self.tisiv(node.test)</span><br><span class="line">        self.tisiv(node.body)</span><br><span class="line">        self.tisiv(node.orelse)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tisiv_Dict</span>(<span class="params">self, node</span>):</span></span><br><span class="line">        self.tisiv(node.keys)</span><br><span class="line">        self.tisiv(node.values)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tisiv_Set</span>(<span class="params">self, node</span>):</span></span><br><span class="line">        self.tisiv(node.elts)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tisiv_ListComp</span>(<span class="params">self, node</span>):</span></span><br><span class="line">        self.tisiv(node.elt)</span><br><span class="line">        self.tisiv(node.generators)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tisiv_SetComp</span>(<span class="params">self, node</span>):</span></span><br><span class="line">        self.tisiv(node.elt)</span><br><span class="line">        self.tisiv(node.generators)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tisiv_DictComp</span>(<span class="params">self, node</span>):</span></span><br><span class="line">        self.tisiv(node.key)</span><br><span class="line">        self.tisiv(node.value)</span><br><span class="line">        self.tisiv(node.generators)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tisiv_GeneratorExp</span>(<span class="params">self, node</span>):</span></span><br><span class="line">        self.tisiv(node.elt)</span><br><span class="line">        self.tisiv(node.generators)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tisiv_Yield</span>(<span class="params">self, node</span>):</span></span><br><span class="line">        self.tisiv(node.value)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tisiv_Compare</span>(<span class="params">self, node</span>):</span></span><br><span class="line">        self.tisiv(node.left)</span><br><span class="line">        self.tisiv(node.comparators)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tisiv_Repr</span>(<span class="params">self, node</span>):</span></span><br><span class="line">        self.tisiv(node.value)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tisiv_Subscript</span>(<span class="params">self, node</span>):</span></span><br><span class="line">        self.tisiv(node.value)</span><br><span class="line">        self.tisiv(node.<span class="built_in">slice</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tisiv_List</span>(<span class="params">self, node</span>):</span></span><br><span class="line">        self.tisiv(node.elts)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tisiv_Tuple</span>(<span class="params">self, node</span>):</span></span><br><span class="line">        self.tisiv(node.elts)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tisiv_Expr</span>(<span class="params">self, node</span>):</span></span><br><span class="line">        self.tisiv(node.value)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tisiv_JoinedStr</span>(<span class="params">self, node</span>):</span></span><br><span class="line">        self.tisiv(node.values)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">tisiv_NameConstant</span>(<span class="params">self, node</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">Traversal(ast.parse(c))</span><br></pre></td></tr></table></figure><p>可以读出，它定义了一个 Traversal 类，在初始化的时候对传入的节点调用 tisiv 方法，即对其所有子节点继续逐层检查<br>如果 tisiv_{该节点类名} 已经有了存在的方法，就调用它，在那些方法中又分别对其子节点进行了检查<br>如果不存在这样的方法，就检测这个节点的语法类型是不是 ast.expr，如果不是就直接禁止</p><p>再看 TokyoWesterns CTF 4th 2018 这道题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span>(<span class="params">node</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(node, <span class="built_in">list</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">all</span>([check(n) <span class="keyword">for</span> n <span class="keyword">in</span> node])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        attributes = &#123;</span><br><span class="line">            <span class="string">&#x27;BoolOp&#x27;</span>: [<span class="string">&#x27;values&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;BinOp&#x27;</span>: [<span class="string">&#x27;left&#x27;</span>, <span class="string">&#x27;right&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;UnaryOp&#x27;</span>: [<span class="string">&#x27;operand&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;Lambda&#x27;</span>: [<span class="string">&#x27;body&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;IfExp&#x27;</span>: [<span class="string">&#x27;test&#x27;</span>, <span class="string">&#x27;body&#x27;</span>, <span class="string">&#x27;orelse&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;Dict&#x27;</span>: [<span class="string">&#x27;keys&#x27;</span>, <span class="string">&#x27;values&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;Set&#x27;</span>: [<span class="string">&#x27;elts&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;ListComp&#x27;</span>: [<span class="string">&#x27;elt&#x27;</span>, <span class="string">&#x27;generators&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;SetComp&#x27;</span>: [<span class="string">&#x27;elt&#x27;</span>, <span class="string">&#x27;generators&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;DictComp&#x27;</span>: [<span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;value&#x27;</span>, <span class="string">&#x27;generators&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;GeneratorExp&#x27;</span>: [<span class="string">&#x27;elt&#x27;</span>, <span class="string">&#x27;generators&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;Yield&#x27;</span>: [<span class="string">&#x27;value&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;Compare&#x27;</span>: [<span class="string">&#x27;left&#x27;</span>, <span class="string">&#x27;comparators&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;Call&#x27;</span>: <span class="literal">False</span>, <span class="comment"># call is not permitted</span></span><br><span class="line">            <span class="string">&#x27;Repr&#x27;</span>: [<span class="string">&#x27;value&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;Num&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">            <span class="string">&#x27;Str&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">            <span class="string">&#x27;Attribute&#x27;</span>: <span class="literal">False</span>, <span class="comment"># attribute is also not permitted</span></span><br><span class="line">            <span class="string">&#x27;Subscript&#x27;</span>: [<span class="string">&#x27;value&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;Name&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">            <span class="string">&#x27;List&#x27;</span>: [<span class="string">&#x27;elts&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;Tuple&#x27;</span>: [<span class="string">&#x27;elts&#x27;</span>],</span><br><span class="line">            <span class="string">&#x27;Expr&#x27;</span>: [<span class="string">&#x27;value&#x27;</span>], <span class="comment"># root node </span></span><br><span class="line">            <span class="string">&#x27;comprehension&#x27;</span>: [<span class="string">&#x27;target&#x27;</span>, <span class="string">&#x27;iter&#x27;</span>, <span class="string">&#x27;ifs&#x27;</span>],</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> attributes.items():</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">hasattr</span>(ast, k) <span class="keyword">and</span> <span class="built_in">isinstance</span>(node, <span class="built_in">getattr</span>(ast, k)):</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">isinstance</span>(v, <span class="built_in">bool</span>):</span><br><span class="line">                    <span class="keyword">return</span> v</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">all</span>([check(<span class="built_in">getattr</span>(node, attr)) <span class="keyword">for</span> attr <span class="keyword">in</span> v])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    expr = sys.stdin.readline()</span><br><span class="line">    body = ast.parse(expr).body</span><br></pre></td></tr></table></figure><p>这道题目的代码就更加明确了，道理是类似的</p><h2 id="绕过语法树检查"><a href="#绕过语法树检查" class="headerlink" title="绕过语法树检查"></a>绕过语法树检查</h2><p>正如前面说的，我们需要找检查程序中的漏洞</p><h3 id="寻找没有遍历到的子节点"><a href="#寻找没有遍历到的子节点" class="headerlink" title="寻找没有遍历到的子节点"></a>寻找没有遍历到的子节点</h3><p>我们发现，在题目的程序中，都是手动编写了对某个抽象语法的哪些部分进行检测，所以可能就会出现某个语法的某个部分没被检测到的情况。</p><p>这时候就可以去和 <a href="https://docs.python.org/3/library/ast.html#abstract-grammar">AST文档中抽象语法</a> 对比，文档中给出的 ast.expr 包含了：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">expr</span> = <span class="type">BoolOp</span>(boolop op, expr* values)</span><br><span class="line">     | <span class="type">NamedExpr</span>(expr target, expr value)</span><br><span class="line">     | <span class="type">BinOp</span>(expr left, operator op, expr right)</span><br><span class="line">     | <span class="type">UnaryOp</span>(unaryop op, expr operand)</span><br><span class="line">     | <span class="type">Lambda</span>(arguments args, expr body)</span><br><span class="line">     | <span class="type">IfExp</span>(expr test, expr body, expr orelse)</span><br><span class="line">     | <span class="type">Dict</span>(expr* keys, expr* values)</span><br><span class="line">     | <span class="type">Set</span>(expr* elts)</span><br><span class="line">     | <span class="type">ListComp</span>(expr elt, comprehension* generators)</span><br><span class="line">     | <span class="type">SetComp</span>(expr elt, comprehension* generators)</span><br><span class="line">     | <span class="type">DictComp</span>(expr key, expr value, comprehension* generators)</span><br><span class="line">     | <span class="type">GeneratorExp</span>(expr elt, comprehension* generators)</span><br><span class="line">     <span class="comment">-- the grammar constrains where yield expressions can occur</span></span><br><span class="line">     | <span class="type">Await</span>(expr value)</span><br><span class="line">     | <span class="type">Yield</span>(expr? value)</span><br><span class="line">     | <span class="type">YieldFrom</span>(expr value)</span><br><span class="line">     <span class="comment">-- need sequences for compare to distinguish between</span></span><br><span class="line">     <span class="comment">-- x &lt; 4 &lt; 3 and (x &lt; 4) &lt; 3</span></span><br><span class="line">     | <span class="type">Compare</span>(expr left, cmpop* ops, expr* comparators)</span><br><span class="line">     | <span class="type">Call</span>(expr func, expr* args, keyword* keywords)</span><br><span class="line">     | <span class="type">FormattedValue</span>(expr value, int? conversion, expr? format_spec)</span><br><span class="line">     | <span class="type">JoinedStr</span>(expr* values)</span><br><span class="line">     | <span class="type">Constant</span>(constant value, string? kind)</span><br><span class="line"></span><br><span class="line">     <span class="comment">-- the following expression can appear in assignment context</span></span><br><span class="line">     | <span class="type">Attribute</span>(expr value, identifier attr, expr_context ctx)</span><br><span class="line">     | <span class="type">Subscript</span>(expr value, expr slice, expr_context ctx)</span><br><span class="line">     | <span class="type">Starred</span>(expr value, expr_context ctx)</span><br><span class="line">     | <span class="type">Name</span>(identifier id, expr_context ctx)</span><br><span class="line">     | <span class="type">List</span>(expr* elts, expr_context ctx)</span><br><span class="line">     | <span class="type">Tuple</span>(expr* elts, expr_context ctx)</span><br><span class="line"></span><br><span class="line">     <span class="comment">-- can appear only in Subscript</span></span><br><span class="line">     | <span class="type">Slice</span>(expr? lower, expr? upper, expr? step)</span><br></pre></td></tr></table></figure><p>比如，BinOp(expr left, operator op, expr right) 表示了二元运算这个语法，left 表示左侧的表达式，op 表示二元运算符，right 表示右侧表达式。<br>同理 ListComp(expr elt, comprehension* generators) 中 elt 表示其中列表推导的元素，而 generator 则表示生成器子句</p><p>再来看 TWCTF 这道题，它的检查中写了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;Subscript&#x27;</span>: [<span class="string">&#x27;value&#x27;</span>],</span><br></pre></td></tr></table></figure><p>而文档中给的索引访问是 Subscript(expr value, expr slice, expr_context ctx)</p><p>因此可以发现程序并没有检测索引访问中的切片 slice，这样例如 a[…] 中的 … 部分就会被全部忽略<br>所以就可以在[]中藏一个eval执行我们想要的功能</p><h3 id="寻找没有检查的节点"><a href="#寻找没有检查的节点" class="headerlink" title="寻找没有检查的节点"></a>寻找没有检查的节点</h3><p>再来看 zjusec 这道题，通过对比可以发现所有检测的节点的子节点也都遍历了<br>但是再细看可以发现 FormattedValue 这个节点并没有在题目代码里出现</p><p>而且 ast.FormattedValue 属于 ast.expr，所以它既不会被检查，也不会抛出异常<br>看名字像是 f-string 相关，可以 dump 一下看看：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ast.dump(ast.parse(<span class="string">&quot;f&#x27;&#123;x&#125;&#x27;&quot;</span>))</span><br><span class="line"><span class="string">&quot;Module(body=[Expr(value=JoinedStr(values=[FormattedValue(value=Name(id=&#x27;x&#x27;, ctx=Load()), conversion=-1, format_spec=None)]))], type_ignores=[])&quot;</span></span><br></pre></td></tr></table></figure><p>可以发现，f-string 是 JoinedStr，而 FormattedValue 是其中被格式化的部分</p><p>所以就可以向 f-string 的 {} 部分藏 eval 来干坏事了</p><h3 id="其他漏洞"><a href="#其他漏洞" class="headerlink" title="其他漏洞"></a>其他漏洞</h3><p>这个是 pysandbox12 的一种解法<br>python中的语法不仅有 ast.expr 一种，而且很特别的是，列表推导 ListComp 的生成器子句并不是 ast.expr，而是 ast.comprehension</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ast.dump(ast.parse(<span class="string">&quot;[x for x in range(n)]&quot;</span>))</span><br><span class="line"><span class="string">&quot;Module(body=[Expr(value=ListComp(elt=Name(id=&#x27;x&#x27;, ctx=Load()), generators=[comprehension(target=Name(id=&#x27;x&#x27;, ctx=Store()), iter=Call(func=Name(id=&#x27;range&#x27;, ctx=Load()), args=[Name(id=&#x27;n&#x27;, ctx=Load())], keywords=[]), ifs=[], is_async=0)]))], type_ignores=[])&quot;</span></span><br></pre></td></tr></table></figure><p>但是 pysandbox13 这样排除了 ast.expr ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(node, ast.expr):</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&quot;not allowed &quot;</span>+<span class="built_in">str</span>(node))</span><br></pre></td></tr></table></figure><p>但是12题中并没有，所以 ast.comprehension 这个类型完全没有被检查<br>因此直接向生成器表达式中插入坏东西即可：</p><ul><li><code>[x for x in [eval(...)]]</code></li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://infosecwriteups.com/tokyowesterns-ctf-4th-2018-writeup-part-5-6d699f07f71c">TokyoWesterns CTF 4th 2018 Writeup — Part 5</a></li><li><a href="https://docs.python.org/3/library/ast.html">Documentation of ast</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;这类题是在zjusec.com上 ACTF 2019 分组中chenyuan出的一系列python沙箱逃逸题目中看到的&lt;br&gt;在网上搜索貌似也只能搜到 &lt;a href=&quot;https://infosecwriteups.com/tokyowesterns-ctf-4th-2018-writeup-part-5-6d699f07f71c&quot;&gt;TokyoWesterns CTF 4th 2018&lt;/a&gt; 这一次比赛中的题目&lt;/p&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;这类题目不像普通的沙箱逃逸一样通过删除内置函数字典或者删除某些模块的内容来实现&lt;br&gt;而是在输入命令后即使用python的 ast 模块对其进行语法分析，只要使用了某些禁止的抽象语法，就抛出异常导致程序中断&lt;/p&gt;</summary>
    
    
    
    
    <category term="CTF" scheme="https://blog.tonycrane.cc/tags/CTF/"/>
    
    <category term="python" scheme="https://blog.tonycrane.cc/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>「ZJUSec Writeup」cy的python沙箱逃逸系列</title>
    <link href="https://blog.tonycrane.cc/p/e8996288.html"/>
    <id>https://blog.tonycrane.cc/p/e8996288.html</id>
    <published>2021-10-19T14:12:25.000Z</published>
    <updated>2021-11-10T14:11:09.565Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码不对哦" data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容">  <script id="hbeData" type="hbeData" data-hmacdigest="0889be30459b34f401a9317495b5209b94e89def5220a8d49f372b0cd4144079">64cf36da832c32ee150f47182e85c12ad08e8fdc7585aba87e7caa43ef24ea022ddcd838c221edd44ce79d4382c4fb2a74a2a61c083a697ca366d8dabf906ff9cb977e2710eeea3b8665606c597245f9f66aaa8aa22b8d5b2d1684f09275090bd4b7d3188beb27c45725d276fcdcf3ae57bfa442335531788e63d75df4fcf1fcfd15e92f8112599c4866a6079026a5fa9152331f68e4abdf9025def0aa02a5b0e37c6daf00b3a2b203a9e9f2d7e9eea7f2b1dbc49486232143013cdaa01fd99c8805e6a12626f0e243fbeb22664d1a50421fca401b58c44b6886982e475810037f3e254e2dd27f0ddbe819e923f3d18b663455a9d8870cb5d49dacdcd4c4235e401da124c87617cd2e091e7d7cd1be23b33628afb1e5ea1d264473d5d9da6c36cb6bd9c3b66ffbf4dbf22f774d58451ce46a5b30390352a4e4ffa037305813298adf392ed06eccc3ad88c8381241d7e74dde7dd34270ab36bb0896f5739b9e16ce4b9b1618ce707ad0464491a72361640e3174f61d8ed93929e0747ba5ee39780bf4591c35351151103d2245eba2dfe47ee2091013013903b1e71a04a38c7e2df148c1014423b438b4ac4a77011d7f66265c25fe6323fe17aba66aede8e62406ad7419eebb351c55395a27e149c2dc0fbd3d0a1bb35e49cab3a1af15529c472c992d9cfbff7b3b3aa0f11f7c250eb6bf2af2501a0cc8fcbb2a8adf63438a959716dd2a0d42e56b87dbd4dd8fa504aa39a8f5ab0ed1402d2c9eb4b373afcea577e6a796daf15d894c7e1d358ea20b0cf15799b885472ae2e0e246bcf51932278fa4253d722610d13340f6b03e599fa8622312069f3db8f0302fc46a924f6b841364107a936c767434c9439e97e4e0b00c6fe2cb88e30c5a4fb92f8112f0fca9e321b84020a42ae30ce9d214fd30d166b0606d7db0adbb2032472d02103c1a2a6645ceeb41c7fedf420bc585c9afedbeab13edeecb4a7eecfc2dbbd672545a1b1bf6952812250a40840692d1c9d0a33e24280025191fb741711ade955dee0e2782dd0497ced9a8c288ee777ba9ae026c0558ef971458a5b6c3813f61b0d950e15bec2c955955be9379445b9a1a53f3837378cecb48d2c6e611bb7ba61343895d04e4f7604fc2e9ccb29a90777c563fdffce54329685c52e50da0dc57557b02a473cdfb64ad41e1685c1f78026f56633de036875ecb4c30d1299b9d6c9cc452909136fd146c2e240633c20abbff091923388d2fb5ad348e3bdf0c29659e37225784a463e3be36fc9c0645272edd36ee91cd71bf44016a756cf3bd0db0385743f3ef26edd1737e2220297ef9a373cbc2bb6a57f11f5e3f0abb20c14d630ec5f854d04884b5a709a77fdae8ff7d608d4f13d3ecd34d9415261d9ebceed5fe04a23e81169bc4006efa02f1322bd932c8a4a2c3fa0e7c56dc5eb41db5424648f8c7e4c81c3cc871fdbb24d292724616a00b8470fef023d148b027e0604070bcde2bfe1cf89b3c1ba242badd7f8f5932b5b961472bc5cb6ae66828462fa016f0e502f22ce878acb15ea8d164d088afd9eaa2771d4b3739cc990c4910e5e225796e1f3aceb5e280b686e960aa4f04a94b1fee8879d0d541e8ea5966ef4673bc18afdd45a28a3151bacc91a4d9c469cbaff8f570defa9357a8645c91da1565da741df9e724fe439ef456d8d485974f1bfcd17759784eb94f915fb7232dabd5f4dda27cf2949b1f1c2ce6b27f4f87b7c0d0ac89b524602d5584a2d86044302a95c0b254b044e9f50fb25592e92016c594298f15a127456811f70f370b1944545f60cca7018fbf74ba146a00c4ed58f13d3cb1ec02fd3d8a822bba47ee473bd06828848015caa8f344e4e55467bf45b938e045122d5633a5aba91020151d0446b7f17dfee313dd2c50c7694e71ab35a878b9561c893b0b128dcb54cb05307beb31c35440bddb1408e4ca5ef21c4ab6f2a8b5c1f4bee47fa39ef73b6e60f035abbd4bb498d0476bec408696975fc6f0181ecb564900f8502fb02668ab5ce427862cafe6c42d012294f8fb97158b571a44c0696edb342418af6cd9d189b7002b3a37b3aeb738ba800018c446af13a8d2da28f400293825695fdfca5e1d43217ed5ca445789bb022707fe24fb99aa07d8b4c122b21de532d610e8912161335d678d3998fba5307e3bdd24c32afb8e13eb4ab625ac48945deeeac71abf8d8c74525bb22d9832cc8f52c74829dbd8106e63a36efa52dd6470f0f13d2044c818cdbc5c01377a5b76ccbc0ae47caa036844fa3e511cede6da1fba4ccc38c46d3dc29d7e160ae43bd111f47570b875852ae8b771af6acf5ac79d7f165101f3c71768dfa73fe4a8a1f3341427b9b4170b6ea17696c93706500d7235b886c01672b421e7c238bf6216ef2ba9c77f3ae128136e4ba28662e2217cf9a6f68ff19fb73ad0b5256d8f09d8b29a80c7fb45b9f6ed859844ce0c186c64e812e59d5f84120c900d3f22c80ada37da9f5585b290c401621ac25db83be1aa574cedd74cf7ac95312376755e6045fedbca51634167f31f7780570aa5b7756e5402deb99ee3d07d8c1d26f2890bc4ca82b91933570195776ddbc75a2c1ab004111dde8ecc509bc377f446529fd5025aa320065b81f6237e68e7f2ee97ee03cb89c9b14f0458ac4834624947a08e157da874cb71e989e5403c0769e94f17e0d4b2b38a9938ec18af8d480e7d0c57badccebd4d9242f3092edf0690b6c47077a2b4797e42e4953c51d6b633a2e201e6b0a949eebc5e8d094e3a5761eac87cb3029376257080bccbfa63c360257432cb3afa31472b54d2aac7d26d4ed233783b3817add2fc1015d5019078e65148c5d363c4f52c1312c37553bde86c7bce48fc74b54e7832cca6f9971d944ecd346a9c3e8af08ed3bd0cee66c300040a8eea8c2e45c1c8ea9c98396a02cd0032af301771d10d9a828f6bd14b6b1f4e15c2d9fc767d218e5fc391946aefc11e25827284e54c478de248903908cca4ebfa4fcab0cbe8d764fab8ee6956f8648008bfc4fd0b924cf8cca7e6b01955031e8cd4391904164f5ead3e45018826d17916e521592bbc7fb150145c0450b7cb73a75f9b92a3fc3c62e31c6745c9b579244d5f731c719536016cb0f88328284d608f4f29f5612d66f985b990ee0aedf4607a7b835790cc8c13495d873abd6593c89027dc0f7c211120b1ec4933d70536c4562b5b3dafb196e5fb83422edb26628f42e283c1e2626b52bd40c6b55219e060239b667f4cb4dba5796e01db505511efe0fa597b76e82281901f11e61451d0a627cbeaec13065eef2256736032789c425d4fee058a0937e299afcb26351572a37710875e10e6d396bcff54e2286aabfda147213f75ae154a703f1be115c4f0f97c17810a4d818fb56e8ef7ae8afa7c02367bd71d24c13e3cdbb3c38da7624c4a47ba62ce5e5bcb7a0eaa9a2aa3399ab11e2becd696fdac2c23fd09e2bae8f6d658ad97be029018c5a766ed62a7e4a6405445e5135562bd143d349a765924b3a98aa02a382846d7c3620bfb8cd16a5594f47b28315b6e33a399ab88be1a2e64f9eea1031e96861b98d2bc7470450d852c86a1392a6cadfa03c91e298df8f025c2d857797a6c192bb47c6f5fdb459c58acbd4ec54b94d59131c221d39e6726c51932eadbf0c3d3d4273e5ce0648d4886fffbefcfbb8df2d07e3e2941ad1a8a24b0b89d5d7415aa0f4d06d36b1d000c37fc3ce2a2059aa67c26eada6d33b4675db37f74289750e834a513f569bfc602ebadbf21780790a2680a8ab4f878570eee3124e10e8dab2a58cd4ea88691877b3dc6f17cc9a71aedfac2d403c45688715c4fda9fb4c8895d315545adffa91e33681ed41070a9178cf958819dbe9cb2063dea92f54ff44e72f13ce2c3706f314643b13af0b7a36cd89c986a7aa1eada7567788cc0a7f563c6d20c11bfcc7d1e53c9079c21c14bebd909a7f293c1492310dc4b9f852573d8cf829c4f73dbb86d73c6c1ede361f6a4a2cb4bfd45460673c5ea258d762713d3bb2d250be1eada634203e06b68206a10878d032390e681744c13403b539855776bd5bd40bd28dac86ffcf8c6d23ecd205e615fd4d278479b5304455022bcbf77f7e795bc78b79d99e1cba24467ce2b5d6eb8967678abd7f1b39fa24e77ed53a0db55bab48db9cd1e1089d7c1e08270656dc5d6248bfd1ce85c0da80e5c291533d078d5f82f4324b1c0d203dd3daefb6d097c1532121aa740edd8e9877e9fa2c07c0048fc0f8811dbc26fbc0b986d11ec2fb581e6f2deee2203779f027c2465c34a48ea1f9195e9a84f3ad2fc7efa47aecc021360db7de6d694a33ff08f6af543668df2eb340ac91b8b8aac4a70829382d5d2a720038f4dadea12194f3c22145e0ffda57f287f60d0e17255d5e4f216b5270a58dc8a3ef216d93c4322e8020871d14bb46a8892612a7e8d0f81c42f736fc49cdd5194e85e2cf9b2b18fdc841e447aa8b7d9a1a2b942fd1a29b28ebd91cee582a51720c2785935b08b4398a6d521de619fb51905e4aa3174821d6ee6b225412526c8b196d498d576a51879d47184afac4feec7ffb1022298bacf0f3f26519ef379db70326f37e68b0b343967d3595660cf310614fcc077b573644e578ec2010c8a79b7832047361d55e699e0eb87503a1ceed840b9dd8c0b2a82eb0fba42564efe136ff3c98951885e655b1172d0cc68b376ba50c89b285b16b0a878aaca8b699617a0aa08af55173270648dae074363e790e7f9fe169613bc66296403231a84d97d428696c3fb10a14dbe42941463b144d3d7266fc69adb37c9923cf68b29301e101c547725ed068bdeb378027119bbb2f99a0fad44e6537b99309d0264016a89b77091314ae0486f30b88280679c7ecd4ae41424b0d4ecf482358bb2ecfa0f0739cde518df02d352d2e5f7b12229eecbbcf78e6523c8596f49faada419203361b34778261c2b99f0f2cbe0981080e86b1e150dbad65c43a8b0c19b7fe290dfde1fe647b6d148b89a7ce1ecb3206029a373cdf5075a415467f4b28d989cffe518517d11469775ed5088f34ab82ef6312babf892b5674f227f9cb7b0a692b0799ceb18f765074c35bfb489a01ddb3dfd40856e6fa7d14fe6d81aae5f4b053b2b13f7bb06e143fe148937438314b9e28369ef750ba9964face3426eacf25af301ebfc22dbd29e2a084a74c813acafa71bac015a2769deaa5dedce86f22a0c59a4ba72003e08087bc6e188a379d2bd4518b68dd0ec5654913ca8a5a014dd40b4a410d4f37e69a973343c7ee46bb1be5e856351b4decdc13d07e47b06b3c34ab3f808ab16dedd877b64bd95e2c9c414e8de0a1f3fa21f2af0657f5b3309bee876341fbcdbd36c7af97065df3efe2931ddc9e9552962759839c9ed6e25a51547019aa599c178a866bc2558f2ac83be1c01bf2174908fddd14559b871719065d101d4aeb7de3b0b4d5139037ad90e77cc349e0cfe8dfdf41d6842fd6b8ea1120c356f9fc7be1029054ef0d6ebaa69b3496473c12c0448fd471f07eacaf51fba7f7492f370ef7f2b083834f239aed640818406fcc7b0c3736716eac114369e9f30637fb1dea243c69ceffe680c17f9551c752f7c37638104dca0099d78f4b5ce6fa1737941fd5e86dc855ad18413ff071e0ff189e1d2cc571582080c6b79a1d2cff5c410c51d93b0c420f75eb174eb3193878012d32a88c1e7e31aeefd6bd531d0dfca26c2f5c28feb466b19826979d9f2003fc8b02b3d933b6c55cc964931ab719da7b5a40b7845080c3937f654a76a254108b0dd3236fda765425f1defe8681f85f4f1ca7a1cca7b3376cf209ed39cc816c6877de7b1735ac8d7720ab4b7306bdab173b054dea72a8d476917c42146bcc6cabda590845c4aaf9a8dd260c335ac4e131c2ebdf525c325c0441334d566b7043a19611174ecb4a9ad176da44c767bd721d0c711a28247bc0d239780a831e929d226e2221856e2cc95779416813fa4a5018376d0eb90d9ea6b18d74b49dbf6ffbb84cdd97006fdb2c737fbb2a9af1333e33f75dbf5d3d75bfc560dcdf33a0396448e2b02830eb12beb779c67f335450f81656ef918b31b0302ab36c351185cbeb58fc0fc407bf0f8dc52c493592c39759face76737532daccbb18740d2d7d00a59fee0c46ef14c91daf7da7a6dde41af5cb6f675593736b64c68701d2bef803aec42e7d6a85f7b9adc17b59707ea2d05907858e381c4ba61271a70be961958693dfcfd043d5b3ed8037b546180f9d1662c74b6dcdc447c4c9113a37e8088bd3e8cd21399d46430150b9b0aa8f5471f6fa5669bcbfdc7580d2e71522b03ee9d397e0bc7fd9ca72abb7ab55df725221135a04bb29222972dc5a8ae35d90b08def2b3c67b8f3b0192bdf6daed7fbd76a94410cc980cb4b2d2129ae81738323e360c81545d8e547157adada64a7499cf3f3c795d3d84a3efbfbd71d7529695c985dd66caa499824b124c6ca48f3e93cd50daaa0f578b14d45b3396328fdf0b1e3b8367244b625307bccbc7f4912c8185a46be1d5e7117fed40ef4f128033324d24e03457f01e4a32989fe06a2b88bf565a1937b32530dd93be7ddee230cae93ad5293278b74e50abd3997849ae6919077ad43338f72b0dbd1c9a47b87e854addc17ca4fbba4faa68444c6938a14f52386a47124720666eb6ad54eb18079b270c4ed3cb6c068aac39bd8fefec97abb5ebacef348dd9ed938ce1737f3e24ad1c2d6ee7e1ca152d3c215c6d3ec13cb6fa5ce849bb254fd3a48a7ab29d3aa987f8d8a66b628136dbb226901677b856d6e52145b52df4699f8c9954aa9d92a975e71a8b9bf2bdb5df577f7726f597c1c8d344ed118410afc774e87b5b424583e39b28d58eb407d1f55b294052918ed6f8d2b5726f4e5acc460e07174343329f649f50e95470d9e477882d44df5cf24afb262bcebe9859af7b666325c4e9d08db9104b31b4718d79cf92573d7afb3d967f669ccae89d6c8d4552cbdb08183f00fa6ffc8f9f2056da4bcf66cd0604d79693d878d071fec15a1575524e46cbd2ffa664cf2f89df38c59b2f1906018cdb6ad7b156644f4fd99ef9efafff57f38cc87abc89574dbd36f1607d7d3181f18dd6b3efdf633b866b9ecb9588710acfc60de6a5d204e734a7bdbebffe410fb8024f0af2a7037020ce6451c4ec78b3cea09c39dccd1df6e88c39208e5b92ac739cffdb3ccb2db497b08757a4a307a9a87e78d3a49d0ac1172d9f7f281f487f85415e7396c3266f9269aa69eefbd5018ba9b1664d014e1bc368ae34f340e100377eecef40ce75f5ad6effa8716e579c2487b4d4e31da02d9937f1dd577b021b629f9ff335b06e875988e5df3221f0168e6b133295325970cc1c3c6af6c551b4be96b1a1fbcc8897626a47a7c166765a18628807f734e928fb4a42972bdf0596ba5dc3f4b51dffd2005eaba5498d44808916d3fbb1694e3610e65b6eeaff10ed3889a08b7ad62ecdde84ecd2a3b744492e842452e75f849de5fbba6faf80e308af9bdfe40def2b24a9f3c63811b2de74703c7b7c9c5c51e743361d8627639209b98986e6f2e5b739c6c31a1286870427ec29a3e7b088f0295145d3bced9e470db2e74d5b463395aa3647e7f4623ff7a6753bebef8cf41a30f0849b9eca72a196423f8f8aadbd97ed8535107e02396ade40a221cb2fdbca6654fe9f768002e0f27e4e6cb8821a64065456e200c878f1db4d79e7860d36ae02e8a9cb08226f07ed49b44537496655cd928ca2662a506dd570b6ca73522ede562a4a1be04b906f686ff32d0ed50f1abff3b12b85a5bf00f9706845ecbde3523f0250e8b00d8cf276ac84578c31df9ff945db2a33afdedffe6845030b8eea95e78ebe8ee433264ec765a6451e83d8afef00046e0373d348518ce54d46e88669cc3bad2f10fd97a8ead3d3dc8cf80a9c1db43d92ddaa148bb06007fe1e6fb24a144c959b1ef083d3f3b4eaa2ec523a90a5521081f61a421b46074fde18f860671347c08533def30914de7bf29125b86bae9782ffe588581fcd7ad308475e709e1d0873ea0de9192ae46b2c4f5a5c26a109aa07fa5d7c5ce29183c12dbd6b5b1736f5fb25c7cd1390ab5ef017a433779a1ffc0472851e4a58963a6a5cd34614651384f3e04e49d3b2ef8d45d6dd7ca852cb3db9cf2bd3bd0f7da4643accca6f68848672de5810e53035fab6eba9be9b0f56d467a669eb1cdb7938fba77ea401a95166e8f45dcd8a23617dc42a47070d36bac5f243f3e04eb2c0b8e62d784cc5a40f45e6081de530726a724bcda48753632f303bedcca10ebcabe89ad2612ad7249275355ddc90d7420c6c76d028bc62155debf15a02b72f4cd7b114d4ceab59f93f58856ffee01ffd29d7e957ea3e4c929c33395a69f7e39f05010e93673ebfec203f97bb0f52cf28172a30d6c5010c8c655bacb40314e10da58ec3fc722651469772fd48a77b96be2b8683e56ece4c2105ba8a02366832303b0b49569cafa65510da2b0d98bb95dee0d3c19a1c339597aa1e91e559f8a6eeff43fdfad248b493cf1532669ed765044340a7c907f4bb28002323ee079eedf2b06aead5aa034de4b1834547d2b51909ba1700f2a0e367c5522a1605da5119c95edb8af56ccd8dcf6fe903ebba48ab4703bea682ef42835ce1f54f44f24e13861c2e82553f4460a8b00b4469a715d59fa4f7fb4a1b028766fcf4e48e985df8527b7735a8c98f609764f2d9b304fec6360a0a5bfda8424d48fbb25a4e0d56131879640484a77a7985bcd6475c861850397da50144eb5c0c1a9080212a99122b2ee68e337623b94f84b9056476fa4d64d549389a9467406650c09571b4d30f2e024eff9be35f006aa770d89df4ab5a5f54655673c654a02898a36bd1717a4cd06e77e01bb1fe67bb69d644b8e06b81685438d3a17c85ad29f42e4c85fbbd0f461fab0b854ddad4216a81cbaae93d64e0dc76f66b096b5fc0a89c766ec0afbb2b013b5f0c502517c9a1ae612a2f46db22fee046e0e16e317c7bf200572221f7deadc59f30595b75624ae5c54039f25e85761f2511f5695319a2fdf06832d1db76dda9b38f5ea8a3e5b493d83a1b76ef89b8c202573e71feb99b68d08860914ad47977184624c33ba6a756c92815e934a20a337c8d426949675d24b3c590aa915e7ef06bc66a8f31f0a6d0b9b20e715b275ac60dcd3f2aa3f1a09b366df2f264af6c7b5a7df46d47fe1cf4f77d391408bce000c4065f855ffc332c40feb01ade5fec84b41a7c0ae9233b4e024254592f8d8672c6072e049c5bf66b8a9640859ad96b6db46e85e9614c7562e051f36e614adea530d9fdf9e3beaf27c601c059a8d9e853cc67cc78fcd2390711fa4029d9100c992ea316bf65daf7fdc0397ea6065d3563258f7de0f8cd7a6df2da04e89aac320ae2733f5bb2671c985fa7b9d44ab18c4c7944c2208d59b15138022ab4f217b9fadaf5486f1950923dcd5628ad86be99cd0b90755e5bfbc9a612935feeb5983e58965c265304a7b45bead3bf9f16c0d919ff05a359570aa629a0b47bb925b278ebeaa87941842deb6ecb6b327c3f6878af78d5fbcc5ac94472d82dd28e5568bb6d29d3025125f222abc3e650f286e7d8043bc6f679647afeae345183a16411982749b4823382999ac97de9571c24bcad272797783d907d2dcc0211c155750bc96cdfde20a13278b3744271a1bd2facab1e23d9e1265423dd799f73729beef868ebf2a4e38c928fd83357a65880eb8caee847524cb4b54a39203588aa19525b9d73a0d5d3fb005e500d533051a5eb150308e0f4d9fde9730a7f637446f00553d0c10d129f1f37d93a022a89b3126ae882ee96d0b217d75ea445137c919d054121e6c339d3b583db38048fd0a214b24bcc5a3e5ebca07a594f21a8416a9c86fb14b2ab2df4ef99079745ea24dc4e0ecfb55f6b4f5ad817a6a1c10a586806ce5149bc1e489fca91ec34714c94b9468ff2b3de21fbdfebc1bf552666f9c26cdd502cc072b73a729e895df8c1e4b0820dab0cae57cebf340e98d778bcfcd077c434243dd0a83b17feafaeea641795eaeeb1395740fcba8b3f9b96bf54039b033e75150d8d68c1ceb24662fa210db816949d23f59291c97c30618de0d11a93a498116d1dba4e3453ad6afb7513f621439ad74f3dd2b3ead4b414c7d4edd1f305d8a02b0389c9c7dc757a32b6d6fa8794bc6144f571b151d9ce4eb18ec1939bf9cc0a687920cd0d61e9567be0045b3ff9e5914d67f286c1f09233ff1837676ccb3c319f8b47e940087bfe1aaf173dd7b04dd1ccb0b82effe2806db829052f8124ad895fecc53802f54c5d910ec970f24b38de8a6ce3f1fd9cd90628e92e59bef503117c0d0918231ba67d883fc198ce737fb57b1577112991178c8485c7a95ae5ed6bd1135d2062a2b78bf8849bd84f2cdbfaeb91e5962642b847aafe93cfdf62fe6f8b61dbac03cffabfebd564d7ff2c65ab47c8f4675aaa24c5bc41d046b767fc1a54a21ee08475b62b7bef42b069962ee4770ede4461012e7f1585cc84319a6bd89ac552946d59c2476de0cfebf8bbf433ea7cf61cf82b6e117c942eabe3572e1cd8b60b709d4f83fbce649a17164c0d7c2979002b0fedb85aa313aa97313b87116b5c03b713e8b725704288f6cc336a612e3acc9a734dedb6469dfe47ddb5434134f1cd45093ae0f3e84d2ab8a626c04f246414abb517bba1fcf18e0137047ee415f3917b061de17dd82217d53aa546853210b20cfedbb1285f4ea609e1d477084dac3c8725cd0c3a78ea482c1c87eff2c7ae445d820e2ce09cb611706eefa942b40e8d1b4289ab6a80d6ceb8ddc22c06646cca79567b974c9712ed563a2d4935a50fd51b9e149b863a3c9d1adb95ba4d4c5bd33b1907c7751db5807ecaf3b2b5a7c67783377402e4694320f18be03f45236c33d6af29321327c86cc8c0a171e831f5b61a62f39b6c3687b6db3704c1ee961e7e1199d33cc80309e5ebc4edfc737ad0ff7a2985fcbb86d2cf4efaea86e40a30b24e400868b09b867e2567f8f420d22f42a2105e81bfc5a9feef15fc09b1d16ce46b8cb3f1e2157c91f2c6224548cbf1d14b381f441824f262cb8a1c4a7f2694e59387becd0652ea11067eef0835d88e0c997202b4097f8ef958418937aab492b7ce61b8f5a463c25cff4f8e8bee3096d61a7e4d69fd7fa924e4bb6e5a3d64a9f3721ea823dba8ac81562c0111343b173cd0200eb54e1c991154ef88ea2bbaf52444600bb19c36ff3bd6fc4d50cd32c303a004745e8956d1c50abe1ec490de7baeb32a39e50f21e594e03c59779df7d0eda9cc30101b3b026327833ddda0899eeb6dd9a7e1d030d75590dece741fcb3cc7ca075b9185ab2941953a5be1d8c59384b758977b4cc87f45e434f72bcc707c6e55661a1c1a5ac7cac19da3d6c686ec5944509f87d0f33ebc3b93a7b98ff74ac1883369781dff2a03b0091913ed358a347cb9749f787b23cb215b4afb63377a36c0a42fe0c9b0b299f41984081dbe18cfe34e5fef914a9a83c9b69589d73520a28bc3838abe1c2aab06432cf2aa9af5c3f18d341c060cb51b54552af559ea3101c06c901e01ad4b4af91050b10d0a0ff8bf1754f71c291a06e51b86c1175bdc9acaef6e328d2d6269d9602db54c76876d13d6756911f4c4ecb019c5e373327786ecba91f0546d680c8b13b77cf645f5d563655c83d97b909cf49f7a43f8e7fa4f4b9af46c3ab0dd4cd8003cd3dd616c395aedabcdb1bfb43cce9f007db692d0f7b9ac6d46756d0c0a49b4c4bd2da22383df12b3d4a94d5005329e69d07e3c5713721499719c73ad78add9f1594d4381ce3872771423ebf83ced7860acde3d1254d001b11c1a0076ae28e29be12ef36c7da90317b90b50974ef9ab99fe1eacbaa92f7c5e9887df04540d0e6f00c080633c692cf2674d38a75b9defcf216119857abfcf1af0332018489f3a5108a3b376433edb62bf4db6f9a1b3029d2a677a2c200fa76ca922a8558e859fc06f04dfddf8e8f5e6dd7b5d84e55820cff8d6a7a565bcbd26ecb9508790d4015701c9fc7ef93dbf16f6835f107589c9cf059a7737bdb1dffa8519c31e73e95779e38a9da471c710de2d65be73435710d8c89dc1de96799d89e19e327e1c8561d1ef63804575a5b3766c6d81f10b65a8563db153d8267f03b003456e603bc063931d436ce828945d7e7df452523f78390360442e7c5dbec50b571e751aa79c863dd442f1c1a52900ed017405539c5e64deb7777d82d141fb95fdbd871dc6176fc0afa9bd423581c8a71613590a7368918f24e4ae51519af4dbdf1c5376091e5fe0b625053b9273d2e79034c0f451a6126a9dc72368a7b68c89cc2c8146e9cf89530363012fb337838bd400574056ab160737df2db01d8e347b70c2a546dc1427708e1ae2b79a983d8c358835d30e442da1f84d805827cea636cb0ecb75d4da9e8dc2963a527238334ce3bb3642999f61bfe63131271e00ba54aedc5caefb1cdfdf1cbb94cc6d957a3bd7bfbcbdad57cde087985bdaa3a7b14572be519afbb39e9fcd9f73704daf4257ca429403fff8f1f941d20a429aab82c039e8dfc12dccbf876e5e954029337ed9728c90b4675b0ae969143856ab734e963c24f4cd397e917d6026c6153349efbed924bd913ee5f640b0ec52e4cfa5163c9db553267993f73717c63c073681c26604e1d12912aee98a0ada677ab5b34944cc787cd994fadcc279e2fc688eeb34bfc4fda216e2e08032fb7ce1644c7275b0aeffd723c1582e8eee767564bae0c86fa1545fd10be5df337e143fc3ffa81c612bf963ade7e2c0a5c7f71d96c98f5fdbd84ab3ca57a920b220bdb0f0070145a758693a591748665190a8dc2d305fb62f8551c14920ea655509611ff55e208381032c23a824ef04d8657e4072a41a06f493552b0233059bfb98e69e0d9e6ce4b793318cab7cc89d3d8d04b560d370951c689c46e7e901eaf9af7ca3af2f3d1be39a302dc7c2ac9766be78d3cea9a9a4183074b109ec003fbc771abf8059e5b547962cea43da299457ea6d41bc2fc82e2b3a0687e81b0a65802b64bfb97c61181062cc24b8901f881987c882e34a02845ce91efd92e5cf41fc38f3530c5b4e80bc3b5ad67238c0946023810b6c87c2e378598a09dbeff9b9023c01197d947e676daa32253f6920fe6716b9bf8a777f3fcab9501c9b17f6feaee4252513a73794f8b06c0e121cc9dc4fdf3e06277180395c3832f776192d000543d46d00e40b452a1cb6c73958099310a44bb1e2e8fe119edebdd45621f64996904d3f15ef1b3dec2e1feabaf16b86f4a2f5237210a2936f2e9320ee7eec62f05dc262239a70b8f708044e5159815358bf863ed85abb54f00963d75d8ce5d7df8bb68400dc7b5a11c30376a9f7c04beca2626cf059f7973702d3add1c4e7c21b53805cc4306d0c9bcce0800e1ece0c015362b6c956f144e7eb44d0848b3dd2bfe13d7b1adbec82ef63a190d20d937c8a41c8ea9442d29bc4c1e57a2eb44590e76ea635d6128fa804ab00b033faaa64c72b8752e5b5b3d8b30728a98efc3b30a5e0701d8d3e7dd6226ff59fed2fe3fdd3e184577e0ffac4326b887b5e7d29458f3da2dc229e44f971816bd9fe317bcff919c7b1365afc9c5315557a7d946dce8f283180e8d4d72d1245dcaebb041f7454470e5f12a84ebf2563d83a2b5e9621d306f288d2fe5f218a7d5d701ae96d0ea422e1d28559b94d8affd3b2ea1467410fd45b618193823cbb717918cc9f57a2e7784e1223899bc25cffcc07a1e519409fc14f833367ac697bcf2ebb7ba13bde24363f85c08aa0b16a480161b33c802b659d5c37fc8383d487e797fb44441449a12c6e461369928ad1a595a258a936d2d2070c4c7b372725a8a554657271060ff429f5356ebc4371bf8e1b24208df6830f804fb1b5099f0b211669f80922c8adc29aeab23557402f2588709edb60181f17b2d1f22911e4bdb9d0cad209502b157254478728866b1d28507382e354f35a0af533845f7835fb69c194a15d8afa4d7a3410c2f8fe57cb12d5c74875bc390be53ee59de19df0f47a0a1345c73f9d762d65e3ca16b205b5f7281cb39c7a5d07f609249e823bd9e06c3f82765f715303ba29ba96945ae784ee8b21d57aab0372e98b5092e2dd1a017939375702eb71c075db7b86107298f62f597b2f54649a6721ff69364162d6e405e58ab30f7f0c7bb9d3197eade843409a0b1f1a5d15a10316edd0aeaa4271ed294f2e404d989332c018a03a263c96f2f84a441fefd749e8aefe0d3ef4d0e794546b96cdb04dd734f847674df6754941a72b10e941d26bc7dacd90d2b00e9a6d2db6c3c342b195b34b484cd21f78a29e98cbc14d1992761692bc29c6fd311009454b9065e55ec5925db7a740051df5a783df0361f442717544d1884ab6eaa8e150138f506198fafb1bec5fe75911a55a8cb0a3c22f30e4df999d3f4a312890c4205b4d0dc1f7d0cf71423f10cce263d021dffabd94c518287ed19a92cdda44bd5a1b9bff94b2f0555ce205819ce2e4eb9cc15d78d218b27305f2ecc49b9016403b668377ac95558461de5f0aa57a92e6382005886b89929a2977561720340fc10e002d76d80de877ff4a3caf7a5c0d5f930b773b1b55c4f5d6d16b149fc9c158f62c37484d0876ae9df841c96bd20edfa625e41415aadb54636caf4eaaaa512fbab59c94206ea37a985f382debb6dddbcd652cd5c35ac91810cf2759e1f788bf0fe94f77aa62c6218a82ee7d88ad156ca7d368f8f316cc017845c7d3f1652697e8b8691714e5dea4dba6504b194ef5f79810433a49bf63db602fb8ffefefbadf135154299a591194717a7fad2243fa35e32da4c7cb6405ad71000aced9bef12bc1ee8308ec84fecc34e17afd13bb3b00f317d52bc275888e8b80e1d7003a526078dc98dacf5c3a7687cd612d640b218388bbfa937d7fd36f7f103c60a5b04652c361009069d2a6ff0c671990163bb83ea2ae55a427e443dd7585a306b8541c163460091d9411a84e7c345b509a36f109f305e23e70f5874b334fc5d26888f52e2bb0295ebd6809ad28d8cfc012a5b3b5f412763113801abb2be8a5681e26f29349fec5b2fa281e76723d6fa35bd2fce395eac9cf58e2e85963971ad771465848ed243432ffe80cea3ae9f7a31d8eb04037e5e83613156605c12234535053fbe5244442d3d4ffc52e53f3e56cdfbb2f05a46f94269eac282613c818f7f0bbed7a03795ac689f041d35fcfb0dc5543be62c2916ddb47fd26033929429437d2d2628f4fef4d0e8a2aefb798b2296c4a997b2da736e8d078630908c3eeeb2648404429402918fda2c67003ee2fd02544ec72489a309d0b268d8b6dc153b8fa2fa1d8fa44161648fae57a883195a663025daa3dbacb7b660767151b72579bde6fa405cb8236018ad0fd5ba9f59e29773588fd9722dc43ed1be98d6f7fa33f80bc4572559f3e36436a502ee89aef69920b29d25e891d2f1a429a1ebce2ede0d7795b79c5e01385d596743447d239b2a79df92ac96c870ca9b2b9cf8de371d258aab6cfb40f5d0c11aaec9fa679753c5e63a331cc1e4f5ecea7b148627b4d9e4d1c75fda7f7763be9e5cbdf66d80b5fc7432b777d04f193fc6b4b176cf7570055159c541fc546a8501798762c0d87edf5e30a2188f63319f382fd836bd1a499843a7ac25fefba94be62facbbf819c828d32f868ab822cc27426e11c922052ba97ea5a696a6713dbccffe94a1455425c4cbf69b116f6f87536cb8fd30d6d41b9ae811a064a4af5904fc4ae72fa2ff24f48a5ae129564127e67e80226221e9d454f7206f919d735a5772d52db3bec482baf64be497cbb1c593a8e8b37a6e8d816ce999dc68397243fab6adc40cf9f2115e7d9f1e7f8de819d140971ebd8c30ea26a0712f30b1b4d6431b6e52405498d4a99fff7149a1ba16064e46bc49181e5a3866786bd6080ae651c2aa43c5ac6f5af86f1abbcd6f19dec9851015bf8abb76c2f73edbf1de5d61c7825c1d676b69addbf6d5ef6647cefc91b54220fccd1219db49d1b5d810f639d58c4b48cf61a21e72bb8bb9cf05b7cf072e82b268cc111936f2d5918016934ef596c2d71f308fbcb9c868c6b8f02fbcb1c184fcf957c32b7e4c8058313523460a13c1c51ee06d712b555d30c9ab7d77196016713bd5ca23b250121d793a3d64ad501b08b2621586823a40fac9b64aba8de60e455f2972f5d9ede6fb5dd5f938298262aa77eaaaf4f18fe875fb3b271d46d94216e63e9e0beb2a2810bbe0c43d0326b515c419c58d9c3d2f8a9da758145c8b542422a55d5d47590da372c88e98a305c3c179f13fbe9dca855517bf80dd34c481f60ee722f213bb7225b1b254052af111c472120ce12f66dac44f84bc26d729d58cea2ab4311aa07698a19b3a9fc88a8959210500d1e5b4c9562a5a5fb37205fef5d364be04b692abfae5d645c860e6c9ae32cf82912eb7f435270bea8f1461ac1e094846bc63c7aed019a85e7821dd428dd2696a88afd922024a7d93631dd7000e5e93f91b17146a540c277fa920d09aeafedab66ead05a79302e78c40ac74c9d6d8fde15f43704f7b3ce6bb60cc8ef79c4a5c3596ad28edc61271ea84194febd98da7b4f454137818b42de9c87020ff465d8fcd826d8cbf8d90b25673f92460654b81daf2b446b7a2d0db0b5c8fc4f774d14d3b6e2546d32392157dc958cf40a79c1c9a7f0bd950bf02923fb0f6f77c4184b37c0ef03e155fb033f73cc0a1da0d99e51f905abf8994dd75945fbb93b9d171cfaed7876f76ed3ec4c2b2cae5327651ed16effa9b29f58af023db29a682586e8438dbebc304a20ac51efd1a4f14966626e42a59e8d19d4b54703c4f80eabef9046e9b174aac080c291218a12fffe39a0e63a1093ef55523ebd5e49c3c246821d351b51e7b429a21b78e9c728157dbe86d5202e19f165416d4223d72f555d0399e3bf21832a6e92a92d29d68878be89762606769862980eb421250421034c4c0a023eaa5a997621eb683d6351e8cd8145b8b02afad584e99747c648b3547663caaebe009691b114d32375a54a64fc0f75c9b786f31e3e1515a1ed71dd5d20bbc807897d05b6baeec2ef98d7bee46a25f1aa639d95d1f179f74a65478e78b56e149d602d168d1213fc0257e98f43be4373c03af237dfbd75cb0dbcc6a991d59cda960824008a49f6192704486b0d429789133a46e9ab703d1d1336801eeda38bb253871fac0f9386485a93df3a8102127209d198113d4d92dca4993d9fc5d745c4611b1642b22ee1724747cf453a0a5bb083673106d54ce9ed19b010cf0207fde5fe3f9eacb5ecbe4e86b87fc5061e24fcc1f43992055289651b3c7ae94d9fd42a0156ad81509d17e2771ac5dd05f91f86054483af6284ada31b55e2ce9eebaeec7115ccdf9cd7aac15916e11010421b5ab070b8e2d1bd89296df07108f0b230165560e5708f8429496ef9086282b16b095c271022c7be2245170375a4ee1d70488ddb04ab96975375e6982c2ca45407630c57a7bc6752027d6dec003f250d467838cf04126f04dea1a58d5633b60bc12902e4f377cd051acba454a6e2290699491854ef40834f5ff8f5a08787fe1c3bd9ea35cb7673b79ce217c730b1cc07c349d5e8a13e1e8a87fb516e28790cfb892e2d957441e3bf8eedb8502a5612e650ff8468ccc1db27999a9b2e83f6fedb8ae060b7f744552b0788ae9054f7ccfa1cbd2181bf570dd186c04877284eb5350bb907d6363d6cc5e1e534ce044c0378c5df1535a0b65edefbd19acfda6eaa59552870462dc43c99a610899052e1c76e4be0bcf88b4ed2d5834b66d0e85f84d02dea7dac3425c5a7281b9b53b8decf68c077e046babea11a1fbdce73bd6454465d99394880bb20e732a3f0cc051d05d966046bc76bd831e71bb17fbfe358d0052d71c4e6025ec5dcba4f76ae5e7a099d48fee8d2545de3a3882001f8d467ac4f57c82dfc7bcb1798829fe7e5f83f0ac1caefa99e80d17792b407a14fb81b311d9df57f528b148a20284aad43b096cc61f48b50c07af3a2e1c6aca823f8aa7b16a239655832ef39d41f70e529d000a98e5aa94870d1c63a0f50ae687ac494715df461d0077f3df5dc5c29c5fbbe2a55916f7f878056e57d0a60f56d10fa775f926ff7de26fd137b1b913ea1f30c680e5c73ada1ac645934a5a91b858ca92bb3e3c19a2d81b8bccebd69f5e7d4f1ad53e651fb652bcf77e8d414950b0517cacec6272c9c76befa400dc8cd7668ed61f144f7a1046e681438b5c7ceaacef5a2d6b066736123f30421284b57afe140d74700f8a9a02a8564ef0125650a91bd82740835f42a2514892d58f57d93353c67da286628f92cc9e6a8fe4b22b24edf5a7eb9d3307a3bbe4c1bddb9e7a4058fcda097109a0faf61afe183fe89add20c8397e4274c9251013cb5724d2b81386948ca37be911ef4f995fafa89bdf2359bf5bdb875119aa85a0238644eb7f92a390a4e082b0207440d16bc2b0409b528e9c928580f16ca1508761fd2735e8cc9bec5299ca3bd2221c53f61d8a1559dd6dc71c1a78b35df13091faca89ecad846e6f973541c545bd14bfb0d57ab1906cb5be22591e9ee557ed99ad71cafdb01d46b92e7f46eb718c0a5c1a9f9d1e379576295d0c6178ba1c98742123eece8c56d336147d6c6ac1bbf1a9225bd30f6a2ae4aca91d4c22d44dc05ffdeb91796a56c459aeeb6feb1ea18c6ce4151e4ac59ff31ef0f420de1d247720ffaf2f2b3d8360b2a632500d4996a77e5e3c55b89c8192ada8d7b4fcc2e9e50421e3f169ae8515277532cac71c0d5b96632267490893f5e6300723f4bc7463772c05cbc9ad5ee43664e2271ea0d507906764f4ed166bcfefb38b27c7dab59a875b9c2217916a65cad570d3bfe5b4ed0fd0a415706bf6e8a3acc23b6ec5e26eeafbbd79aa2a6cf35d3372e57b1bc2fe0f84feeaf873162a794b3b391c76d464e28a7a3616aaaa05c540fcb2a557077d357e38695068d5dd96259a2277ab7c82586379d32a2a98fa86aabe0e7f2f46869bb3f4aa072a0ca32e23fcc1a13edbe1ea37c36281f5ee121a4299bbc3881ebca191fce9fd118726b5ad7a7190f06d03a949cae164073cfe265f44cda8641e5e13e5e7b2db7ac0bbc23b5aa5e632f170840de036c1a8b34e0de7f5298b057e457cf29ddfa5e65b0d2d6e117ae670c1a7d9d2a719187361150e7587a88cb454bf5044a83053943d8584de9d5fe123864344a9bdfbaecc97fba6209e2c349d4a5af97699ad026ae1eedcc4d3f92c4c3ff57fb7b7088610d0b874ca3745820c9b959665364e3e490bf5f21247202a10a08cca9c30f05c838fcde032014b559fa12e28966006f557ba0eff7e33d5bb95d16c0f5873a4c84249acfac5710e732b5f6aa9a91ffb04c53dba6a41e98498a71e898a288670141f3a859d25a3045664b883161416412e3f62a153797d1990d8f850f663c52ef0a2fb9cfb8e9dd1eb8380746d51c9cf66fd33e711f87c9cd6c72c59ef1801820d5d949c51b25528466189dbbf0b94f2e4076f7d22daebff7f272132da73a8f86c3baff27370cb8326dee1d053d6fe32da228fa4febdea07e45d93c13265f19a52f3d822ca832f05ce24ee6bea3f859376e8841b84df7ca65a55169a5333fd18781f53992fb028ca487d44586240f4a7bc34745539dea32d25824ff8b9d792495f5fa13be817f052ef2372481ace9dd3ebce5f30be20b83e406d23c3069a4a6fd19e969dc314078e077f1fc1e6e61755532619fadab81e1467203d4e03c9e2c917c1dbd800465b0945d65f980c47c1a74c8f1255c1461a2e41da84c59479c2f70c89e65503b71649b322fc0b3b299dbf43f4e08fbc96f5801f6de163f93f82685d34c6376de5360a6920c36ff88a832ac1827a955c6a9f79c150c3392ea42733df5131ca0ebcb4e8326163b22cb3555b3dd11e815a329042edf9beb311a7252ece5993bebab93c784974be61324b0b8345a46b8d9b30301104f22f9a33b96c24d1215aacd0775ff94b7b406a18c3aaf004fbdb1dc987a5ffc9f37e86ad0fdc0bf74d34ead84ada35b37a692dbf0aef003d9d571d20cf540e642a940f4f796055f678adbd38c675284bdae355e0b5c71aed274ae311b91a210a013fecb47b09a57b6de7a78d50cac12f55d1b1bfd702cd79f9fa6e01a8ef56f3d9522fee65af0460029078cddc22b9692e64f0304c7595d59a33a708e807ee388a9ad8e190834878e649d8b7e9533cdc1cb7f82d4522a12eb1c66ef11a62e0e1fd21079974340de6daa42ba3bfcec415b80ddf6f3c76d1dd116b31f2e187b036d3310dc202ee68637ca38aefb819980b7c254cbde14ced657c4c7322e82fcb39591b19f6b3502c84891ed8449de8045070f5d9171eb24012ffde20f1bdc6744482b72b159b059febcbddfb8eb074a4e6db6ae8bf3559bf358a13b2cbc6744b4de6b01426d923810f593355f4cb73f6d1c6f25ca8d14b04a99481bf76a5ac08b55d229ac586ed6ce86db2ceb0e77cfe8a9ee9502f5ca053452048ebec778933cf13ff272effe1811b96246e1d207b8b95d0efa3fc8e3e827c2c3f3db1a22e8b3b7e92eb7d93a9bfcba8dcd790fc8f5869c095701ae4d6aced62b2117d3b9daaea0c50c0abec97f4ba4b1609b78b6c2ce5a995f0608ca923fecb70955d4ad5c49bdab204e4fae5f83f343a3402a00e7c814e74097e0e7abb5079bc1737d4548b76e2fb51a91a354db40e6283c4c91b1bb8223ad79df0a93a6dfc130c8dfe90f8d5444f2bc65260c7d0aa363396d19791abc4b0295bb9df5b639ff6aecbdbb16b84be7a63994bccf61d1442b41a5c0fbb432a385010a3e81bed78b3ad05423cb0a7d517958dc099e09cf314917d7da8faa56feb9f272867c0dcf65c8516288cbb6ac1c2414c8ada0798f62e9c2a597208b728acef3cd6337368824925970f06f1dffdddf90c161b4c00c31827c2b0549dc19d572c5284b3a787a36ad0c09e021235209b31a0cee1414cfe112848fe76f40fb0e6eb3e4fd07d461e81c6d60fa9eb404a77e947d9a379e3bad0c91b8610a522d25c8f433ddfbbaaef704ba0c02d1e92550dcb1a158e1aaad52d971bc2d86e986d446ba072b7d88d4c30430478193ebcd11faf6f63391bdc5d6790eba81356eb275f1004de3ae6286a263d39089425041efa6554e227539ca4a6bfa95fddf66bde03c64a66207578c9f3f415982b4cc6fb44d81e4c3307db5285db79fa084fbfa96069ccf51fecabdbb22c99835872993c48dfadbd7ae4de12059011534cbfadcf3b8bada2a3aefd88eec8c3827c9aa843c815f14545501a08d2ca8596f6cee7b4ca84d00c781bd3b4568d821f61bc314fa7e1bbdd1e34721f8278b3ce9ee644e63fe2b1ed09a216036599278584671a6cf13ffecbb527906c5d2415fc6477e4d8273b0ea8ac1b7c32c4e79e7c3a857d89b55c9ebb7d1f498e30ef055bc5cb84947f4ac8f3e6735e3daae71e854450272db5a1c9101c203b9883a629ea24b612e92ee662a379c196135e95c60c20a709804139e96991d9dff3b8b1e245eae6fb9d24ebfb76c15bf8c1c6100cb632f221f58f669ac4066609c483ce10020d15b443b6759f87d20fc6c6173c274268bf03766db4e6bc30a5267055278619df9776e61a23b7fce1f55dcc8adfd5efac966eb66794bb2f12eb7198e835e806d48332834547dcadb11470f4a7ecd14bf43eb551e61cb7d499b06aeed91d5edcd445a5bc83884f82bb594be394ea590d5c4af584aa9518e843bf0a6c2d271a9550065a54cc608154d166670dbe9e58ed41b5e8ecabddccb7df5c6e3011f07123c23596edf5832a5f5a112b8a429a43e518b4ecd8925effcbd239624dda9ab0f2e64f752a15bd202bf29bd5bd5cb660dd281ab4af9c4b4c2c2225d20ebfc23ac86f095ff256302c71f3e8c1b61980cff244dd5b200b5401da206f490eefa7e6161e3ec676f045b27c2260b9231af0bb8b1d34204f04ca52297f8bbb19aa3e4fed8bffb52b79daf76bd63b0aafe084920e0826974400f8021672f8210da03c182fff624f9865fa85d3a664f3e38541825ac03dd902c26508ce36961152124b0b5f0c771efd641e047070841e091155085b0f85278496b3226633f0795b61bb8394cdf898cce7dd3f6f867a6bede031a9d41921564014ebc85d44b788895b3b333ab68a1623b7384f65320b8e7f0706f24a149f7a6efa9bd11dfaf0c171b3f258899533302838a0bbb7d50b2e056bceb1489086f43b57dabd290c0e8f1a46efbaeef254800ad2979d23c47a1557ba6d4b218650edea5e74baf8c813ce73aefcbc6a22d4d23d754d937f9ef40883d6e3fb00261d4edb5b0262b29b6f38d87ab4b5e8696a913e38ff806024c27d77a0e6c4b5a05fa04d7c5510c40f074e0340c790b998b1ab93e7792240f45b2327aac47ea2174dd208cba75afb030b336b68e1d14c60a76d7ed10c6b4cecaba1e16942d29937b8bf52edff47be37d24d1782268d99cf5886f4b2fe952064a18fcceb970d4a407559d70baddf61ba57162063e01b074bc72736ca49ab46b1a18a2add5d3adf5fdb17f7bbe3012eeea59a7e0f907fa671d092bd7daf4a33d0390e166df613c569fdf6dafa63712fc9ca835d6a7fc54125632b7c61cfc672c63730863b5ed178fc176d54e8b4e99d293b1b7cade79cc6a986f7baabdd1e7ec7c2b92ff258f9ad4a8de2c18eb5a32bf394a24482cbcbc6005f8ce75f8cfe9f813de0f29a99e5b0b5b407a884efa0b140fa4cc94da14272dd489c1ad82469afb016e7903a59dedd9d54b9f5b4f8bf6906eff82af05aa3d8d2c2153abba3d649e839b379d7482d57bde08fe10e16566f69b2e3429204bc79f178a46ebdbe331bbbf02196a95e864129d01ed2ac262b7e313466f9f4a4a75b55aeb9fcf9fe7fa5d71d6b7f912405930f0de6cd5ae91eee04f2cda611737c8bfb9ef3de50311116f207db42ca39d6d9a68d628e05380fceeac80e795076675f6b5cfbf4c6b4ef11719c1f6c951da743a0cd0abfcfb32faffbf63222fabf6aa8b88f1bdd1934f4fac3722a2a726e8e962f4a2433d2310111586fdaccf939c7b7c32196bd679eb5036a57b429f51671a1ae2f50d9a7b5b37b0f7b52870a6bef5562a4c84aace5adddd157b08572357cecd343ee203374cb200851a80ae1ffd88837952dbb7e30d0af72abaf04636a98505828fe7537751c59e3fc99b3f16333b99985fb0d9d7fef8182f8e93e36fe8bb7eb0e184f351bd3d09b775fc38b9f0b9ec4019c396c3309ef7b0fa09e2d6461d1e7c11f13a08808ea3a7c9295085755bac079c33c86fdc42a8436ae6f3597bcd838f9295cac67ae7f05eb7bcfa9dddd7a1d78034418dc7071dc5b5a9c44ce0af03eb997d33e088028f6a321cb192edda128fcce4d74e3e43943561f8ff9600ba465a844e5b92d2d57910f6d9b8cfb21c574b081daa18ca9b9d70048f6628a3a3bb8a533600f83ad030b2d8d7f41dfadc24c5dddbbd1b784d01c9ac4e3a5fc412bd53aa4672a202576bfcfd75dda848dd1cdee6c65afd704ea38b378e914af28dd5ad5882366f2ee563916f7a99c18dd61b86e1c4f9168c16a3119b1e66762c51557f27d10250641e4e91e43a0d1b9b10c2788675b59bf60634d300a32c82ff5a51ca2f6b69bcbc21ec27c36a75a0298595cc2d0fe282c9c5b8a95461b3fe95ad1ff527dd93c58c4caf0356709a5eb9e4d3874a7f33ea38c4ebd0b362f98ce867cc970eb0503f1a3a4c0891f0b95d1c0cd09de85326bbfbe490817bb8c12335165bcc3f120f3577ee9093bf55c8b1f1209e82370c5cf4d59154f0cf41b5aff8db8374ead9b99aa3bdba1d022eed6b0e26db83b4d86e73949c9684c5fafec46a461f2e606123550d8815bc79b68bcd2513f1f9c0cd3287bb0f1cb740927c9ea28178cf349fc0c629ffa5ce11dd00269576b23817f60df6a023ed895fa43296c41e556315dd5d7f9bfabb0d41842271c4ee4eb11b0b975309db443f18128ecd090238d667e33c804b2b85e05c86e28f6a48add8eedece4c2c8113d669a5bd739f0f8137efa6e58679a64a76be948fb7179f53978dab151927893c5fd74e8ea0a7b9822d96512681b71d7b455bf5cf30a54cce0cd631d4aec23af53901ce45289bb87e7d7b1a3d522067183134700cfe21a5d1e069dd313c32bdc1716b5fdf67ad72950aab5efe1e545fb30fe55dde282f74799d011257858aed3053c22c836be328bbac4f581a57d4b0739f3ed597fc69b7248223e72736c95de26d2edf167cd2c47a23ec7fc15f2ca1f22f13a3496d5a4843a091901c0bad5cd8e47d85923685c156c9c1c92724f9e8210dfd4f396ae3a318b2416c9732fd037f5502b30522cbee12cdef920232e19dfb4ea9a6f0601bf3627c40c87203a9b35d4e27066cd396611c8f149695538c06cc92b046c9deb0bcccf0d9fd3bb46ccfdfec1d1251afe4efc14ad5850ff10807fd1139398c16c24a838811c583b75d49a26a4acc10a30d89848bdad0a8c8eeea3318742ead0e3be77f39b5e79c3c20da7beccbff0942c2abcf73ae7ba21cd90c1ed91a4b8a9f96cf149b00a48e9db77f92e1f27740540f82cc87d41df5560b3c6ce6d055718b0bfdd3cce8c25b7e2441c8728d92a1f06748c8b25342bf5981785ad944184454c9e5d4ec259eb239635d95a69eff608cc85b5c6bc11cd7b7050fae3f437ba8c1c35ab473f5f488194cc80f94bd128550d1c5db6a23c4aa55bd0d80ab282652107f2ea73a8c074a5ba75dcc5a6830c28832633794637213d5eb377f5f91bee7ec5b33a26d9d0c4b625ba201d2891cab740d26e749d4174a91f6e48b53d74b273d29661045562584558bfaae16f1eb5a309b7c0ed03fdc2b7c89769ac8d55a5a094b29dea28b2d054361a5ebbeab99230b52310e381709ec75706e72c295ebf7b9a9fc5287aaf9cfb8600f2b3d5bf0b71643c44b198bf3311568718e92c51b8bac2892dc2500e6fa71b4ce2e9ac8a35ff86b91352dcfefbcc05ad8c3a36575e1269267b521c70cad6cf5cf5f046ffb4473d1ef1a512f1787105c99252099a34529da115b9a4b921fd95f61083897c42ba9b6d8a5ea8f5b2fa09be4c0f6d18d1502de70e780fe86486e0409f027fa02464f9bd64e15215815f41d151b5ad2ba636e34dc42d85db51abcd809677db12972c97b66441c8eb29cf0d334b9fb6cc905c9f136165e6c0b274b4bfd2635346a009f378d5edeefc11da2339b3cf401a0cfceba00253c34c698ac5446c88a3e06de03d6f7e62235d32c37c504e2f532c21a3c6afa259576cd2fc7aafac8fd8fc5503e860ac8fa43bd8e433ba37bf8f558658d5f75b576b3adc0120ac997c8169b754e742470f98ea0dd126f22949f77320af9a630a7d12ded02bdd105692fa697c58d65253f3db0e4b0267615c739178315ab9b86116a65e88e01666a2dfeb119a256561cc4b171746f2da0917d84c55511f81126b563a9c154bfcc7a56b6b2525bf8adf8d2f1fe36e1c763bff1cfcc38e7655b11e783af89d4666bf075e0a9615cad4f1cb6916b73133f29de12daed03daf4bc632bf1253a1220a9a8bf463b7ca84154d79865f58a954f6567110c387e82866bb37aa7b8aa3deba7eccf82cb95e777ef06af459ddd0c65b51dc20403e7fb88490d79a079fe6e802044ece4d41036e9f1c552558f470384ced53f73eb7af1a890ff28490c19b0fd2b9baafac1ef645a37c0af515603bd913de9e4339f9fe0a36b45c582d163998454f9a961560d7760e00440944563f9872afa502a70c847365a3c40fb656c631f8d454d50d76fc6caf952739f744d0e2bdb76fd2f3785ef3077e0d9e7aa5edca4dcf9551267ed63c844e7b452dfe50885600c14301ddd508486910b929b1fef7d8894999d9b5386f5c6f644bb5f8dd1ad26984c4ef743f54acb7b08bc548a7e29f669428603d901356cd9520eb47e1735cefba908642748f60d2975128352bbf68498c9d883657bcb1723ce1d187f75ad900f2ea85f65a0657b82cf4b01624805cc8cd8e552d473dcb5568e0059dca21f98374dea8fdabb1a6481602f50ea5377f6533f5f224a860ce68420870e9e7e6eea4c9928fd8193cfbba96cb176f9dae2443d64561d500a7de1e470c4b377e3a5851b9cde66ab82a4978e534f49b552bb2c506f2db0e5e65e2d3cec8e30fd80a502a451fdcafd1a669144eec7633cfd0a05d180e418768c5b9f0d61a5605487e7157c269b267cdff3419563b300e3fd78c4b6c2c94abd139d8c8b9f5ee05ed2d8d5669e70ef12d93a3d43f47878eee4437524ab9dbc1debe31e3e04b2fcd1edb01720c9a3355b636b485e462578db5ca3c9a24cc431cd2bdfbabd96f348856534d9995042ad09de57c981acb8eaa03dbd75fc1117efe1d3520e04af9baa4546ea971aa5d560efb86c99a5657182846d9e7d6fe28da532a1854a5ae58566f586849fecde3a57e65f893b640a95c94240ce5e320a68155f4af5e150b5a6b84e43d821db7206703d3bfbdd5a9d3fb3d6a5405504a3d09db643f28bde75114e1f914516a8b76b6f408f06ad35d3377c38e44da614aa56324fb5d3dca4e00623e09fd6f29cdd5d43d08106866b59e58d068987ce7d68ee0431dc6625a76f12b6e680faa60f31ef6e718207c14c18cd43b4860c5e24729377007a95371643a70e2a8ff81250aab96cc4536a0d8cd109a696a5a89031d84cdbabbfdb741dbb7adb192290122fd29493286dfc9521de694c97703f30389f96d80e6df92cda9266b1fe158ce43455da03813006f7efb015489fe5d2f6bf2468ac3693c6af96a67d4075dd9d8f806a51958be6a33da59e51bff852c049d8f92c03022681a21c7eb15c76a02080e0b26af92566e77a069379b8e75d691fec04120a28239a65044a758de0941a461645423eeb9ab16bc7d0c565530bbd00c423ff053add05068301695366f5f73ba558867320bf43e8974d4733d453ee973cd8ec5c6979aa03822e7a1a7e2e70d7107401f00bdd61c2035bfdcb74141b87834557910751289486b183fb7928dfe3ebd05914a081894c9955291e68cc813030a8694197d5d4d7bfbd5e383ec79a42c267c476e9897f8b63521c0f9b227238a3b6192f10c878ba6db36061eea48c31b15b00ef6cdfc351f9c0e1d9923cc8c9bca8598f2fb08af9846c2fafc067a718c35b6f1056939823bed5c74a948bab6480214c27a46acf120cf65d4fa94e4b1807eb78ef681e0ef40d27f02f62c1e2f134c6ea5b55155df0a31dead857c35f5e754aae410f90bfacbca54f4bf7f3f24bd69e5c0cd55fd32eb9c022b927b6ba30388e52f5709398f9d0c34ddcb42633c72b42b12fe98755e84da841a7d01ee9c3deedd2f85c8625fff3badf901326918bb45fb9c2881da48836bfb7142d2e5d87c13d413525d872ed645a838aeaf04f346811c30369e2ea607e922fdb0a3692f8c074950f14e78c5a355b3784571a9794b9a149d21eb4c80213c41d212958806388015140c38c68dd30b5b48989d00a689c53e2d3b33e63389f4b35ee9ad3a13b7944f7d7e77a3063d37b02b405d19ce44cd47bbf26a3f2c63842ec4be6874980824b46fc8486609ccff238b6a1264e1a02f2cb73346e16f07bad5c317d6928470490589ee184ff6f1be403a8c7bc27fca8f6d1188d652be09dae5cf56579f43e8c47c4d441d9a7ac97fa80036b5f96fecd260de14ea2bd4998e21b2d27a9e195d3a5d9a4ed0243b51f41932186dcf2c36e4c94d789ab4e86daa375f1b4dbffd8ac4cd40170e79ee3c45715477df534f23a93b3ddca6f6ce12f057508692989227c98b2afdf000b7f9f65158b820fde07eb2bb1d17f9a2d9e30b0450c538d46fbdaa4d8e44defbb28f13e66b2a83f8fa6b7cd298cfc68273ecfe2b5f63562c26b2ff8f53aee8185943bf3b2b55af26f3936d14119e9deb289e0173d0af575eb202553ad9faf31acee9df6111185af1735f3b9ccbba6ffd96233bdc2f049e78dad40fd90b64f3c43ce1d5eca03dee98f1d19744780022e669aae469e0269fba9d9c01bcbfa65558ccb5c2f4d4114d7bcacad8776b1f5b7d2b8cffc066878e55612e02693aa6e85c22f7b1fe79361fef07065606bacb1ee3200dafee73ee4d6da39194e20032ac29aa4c5f2016f0949f5fe0a88f3d40b7c1775df4ce8b70eda3a5ad94e9eab98d642e26fd35ff2ee0e755fa5d872c1bc629a05eec7009d9d7cb99f198ff7b18dc15bdf24b973927d8efcafb89cbaa63dd7bf58fd539d77c8bbf9b810b92ef2b36d42f988ebd497984b1e9600d703affcff3f8a3af8deee638e10eaaa0fa68787c93c19acc5fb4ac232c22d88d4e6c9422983de95d5f46cd9f5fd4952b935d90cf123bb8151b9a76f40a758fca8edbce8a57d76201b60cd9c6b824fbe6a6693a67790f4062061df084e73694a12f075c2e7c5dec2932a9681c72ce9539ea5990dc2b9ed3055e4b5a4b909ad46ac6dbd761378bc85bcb3dc6edca518bb456a4451427c455395bee311e913e3cdfebc2ba3875761cea4928412b9550dd05218d0f46f351ea7d4f1f346c728f10a462aa1e813e3eea154f189939997fe605a6f91c12c86da217261aeb01c81bbabc0e9996799b662fc687d9a0b7c22965c3460fbc26b267149a0b7bcfcb8a22013e0d80d2ef44c7f0c3e43a7cf6f64b7973354ee698d65f137c0bd49be87efbe7740a64f1c61c93b6314cc5609e58e442fc42631aac297b3ff7638e57dceadd75cda144ec59b31a1ec9588abba9bf744dfdc64ddd5f31ec6a6c4467ab25e660a672a467da611ae799f21dedb3dc9554d4c60d06ddccee6dceab4da382dd2525095b283af32e099d3a281089c306301d3b7e50b05fe859b80de8c41158dc396f414ad43bce0fcaa6d1ae1566ef5776b254583ebe11bbff5d6dd85f2fd7c60d37e38c906f21f3679f310d6f82de219ac601474d86237f5ec5579a954ebbb56d76fd206783ff779dc66d2597d759b0fc75d97569eed6388cf8d2f05163e934a1a09b385a452934d31c1047d5a8a34ec46ae1db62ec4836036a5bc56055f47f527c650c0ece3f29274dd129d943739723b129393e0380d4d3a341e61da5be4cb4a6099b5f04f448df9c7c61802ab09a49683eed546c7576620480edc6bc25afa9f495562430f19bb2c82c962548b4d6eef27df616c7a3411c7d415a8d0565016d5fcbd6a3f3ab575ecd2f39b6a0002a876050ae3803d50279a93976ce86800899d640c5cafd1a1ae93b40f9cd8dbe330f4a387db943574525a54d4c8cac0c770d1e225a94a3599997d0b511d8aa077285074b83a93ed4ed49aa8141f2107f933486d1b9976c3e96adce0c7e8d39d2ce1fc0cdca80e78d06d87eff63dc28aaab0488c4e10380bbb2c02d74d254dcac231b28e735d6adb8cc323e7ddcae27b3e8e78f64263caf4dd88c1b7bdbc1997e85ea0616d64a91efccf5117c2347dabf5c5346d9568ef5513062bdb869176a9621f9bdcf820112d72b4eef6bf49ba01fac56cf4ea0c9aa4cb01db544789c6fa5930a29ef69b68263dd8ace1c8020c22c20b39c4944a500a19c7b406ea9cf062f62e85087a3aefcc7f7c26bfc0db40d0a081eb49453ceb93725ab6b95a7a4c8879433ae07a6c9b43ace2cfbee9f83bbbbf44e9a1537bb60896583c067b8af82339fc443ef3b77ecc315dd0ef8b23ecd23528852a5fcfb6ad5dba0c5fc3e1c672d801a2db1407af1eee2b87635888663b33de51b421de44f7ca26b64fc2f8ea1663f1e9fdb7aa1e3a06944133ce5d57abbc325c31ed851d20141c0e7ed254c1879bcd302518a82c81a6b97d26b790dbf40294bb24563e1015b53db3d1ada9d92c42a2428caaeb426c050dfd86ff5576ef1a686bce5129d6d7fefe6da4b3fd549a9448331ec6978901bea31e9a9cb4a9722ea785400a012300fb61fd166296f315dc062d8de2696e781717ef0e1c1e9b8af5371e1559629c66619157b30b49eb56ec6f9aa1c794971bd967e7b7c6ff4e9530f9eb060ebda0c4cade9433cc329cf6a7146bb604551c0c24d32cc11e5ff2cc8e41d1154179289a43b629c6fd29c2f3ddc705dbb458911a3132ee9a3928d690b2fafbd3aff029ee0d28839837de9846725134975aa4053d7fb4c5e49c1899c52f6bc6ec701431e0d43e1af3ba4aeea2d8e3a4ac664b5fc7546d69ddeeabc9e54c9bf89d4d6407a6a78f81cb52b92199a00afbf72af071e8a3cb5b26364bdcfa4b96ccb4b2854d4713ce03b7d9912102c48f49db7a0818cdd4db243a2c53dbddd077289410679a67491aaf8e533655277c380399e51a61b24f141e7bc382de1b3886d93da0ef2269991edf52a42db33697193ae150b2b308b9dab799357d7968276455b4f3c3c7047e32aa94838cea89345d875462bd12c75dd415c924baee259f6c0874e5a31856d46f170d6b9117546ddd6d57d54ea8b17f5a6fcf410b40ccbcbf92a8031b763df8d13a78f6f1c9d50d42eb6f2546dcfa3d684f15bc6a8261f8a23c658227d317adeeb2008043101f3be89024bdcb6aeb2d9dc145946c8d6d171bbbc2c8c686c39d7c61a4554e91825f3f35e7ad2f3872d154de5b9f93569d558532877e3fe552a63f0ab2291e914a41736b6fcd349a4397787f396bfe92c9e3b758949742159cdc65a85f308e4f0c2a64903c1e415a18fd91e82e7eb1513d5616f495bf9fce2a525a52b431420e97c31a140c4ad70b678263aad0f88ed12dfdea638025350c0448dd3b1e0f012428d0a5b1ae8442349c30c7c10221f98d017195cb34c3a74f4d7212a5a008abadfc542338a474bb29f31298afdc89a71c303c6297426215c44412db7754445623647da60980a51e37dc61feb426cba4043e92e7de6a5a3e9cc9b837bf095ede72d170bb4f6693b65897c27c69f947ab5f00aeb8790f43b099fcc5965fcc8dc51d82d22657102d2d915b937bdcbf1f0b957788697b8405e4644a4e0bc6a523554a3c6025e7f0ec7d9d3bf191893c00667bd0060a44ea24db7267688ffba0f18546c1283bbb44f730722fcb7b9beb638125b9ed58a380f73eebbf78f707345c152ab60a8f5dfdd9ad78414f93b6f9e9fbac2b5b346edb70e78d79eea4bd8422d9db32a7f9f1f50c3aa31ce2a09763c5ff907b1814c0ff4d2f706dfa6895c4e7404d3f5b4de06e2ff7fe30fe69d3b2bca96d71d7ae44514c98c40d4881f1900005b770719f23bca1822ce61daf6a70f983803ab2a03ae0f65de8be07163039b2d732c0513423cd05069c2a8ca7ff3798d623e7b4522242025e1c90a2ea790cc39d384be6a183bf5572038260e3414cc70cd5a8bd293ffada4e0100b361fb0a424df5090f27cc5353e5d5a501cac9921f7c186866cb1c7497e976a8c681bf8bbb2cb4cee57a164ed52163def3dd03b70cf9c7e7dbcce3204627d2f2890857f319dd3cb23f91492d7223b184a31621811a3e779b3aa2fab05a07724ce523ac8aceafdfc27e00c8317baa7bd89727fdbefaef94c25b64824dc9f6cb450122c28db3807c3b0fefa4169e14093086ffbcd8c9b2e8a172f0d4083f0b73b10e1cd4866a81ebb3733e14fbe30e65a9c1e5e591f420a75f2bdb3043192e44c45fd9526f254dcaa141938262022d16bac01ae25e0c825533e72d7dbd86b3a9d1f3ec724782f0e3fda2c6ed11466b1519e1df825996d449eadf3b9126cdb33451fd2f9fcd5c106bf1da13c0d4846c390e4599eda6d8454593982e97c23bea1985bb8c5bf86831485e00833aaaa8fc97bf610bf1f5c631d9271fadfcc7b7096d7837fb7f04da672b17827c500a34a292189ee2eb210c6c6b42f4522aeac70b2535784cbe183c8e8e508e9f4f4af467a911580d226e82516a6ec105f2fe3d71af7d740353b70be4445745b43c8ff5456f7ed8092e51e87b22d77da2c88c9083a38d62e4fe6301a8d936a3c1e82760b7886078749d6636651af04a5123cb1b371d15b750c57a93516a72adafe184bd7f5524d9b538afcb85d1580c18f952bfb2723de6b432e244c1c3c917759eb88d797e2f7672d5a8eac100d1d788545259a8b33c2c510944eb79ab87218f64d7a0db04e595eb8e8f6ba7beab54fdc1aa33156fb5619202f7b9eee11b65da9753c306554f266557a1196176ca5e246e0f09c40076259d61f6b2b485d6f7ba23bed162624e786a6b5d36ea9f768299b22a5951e10e98ee09a95768c2230e0a7247c9afe449bf5cf2a52373ae119d481350fd149143434d724a7d129a9e0299dfc58b8f5cbeed07573277a449914909a5d7e5228b2775624592eb85041ef3a7136ad86a06851233ab4aa13b2d1d652d8fefbd093d0190c57c49a4fa6803689e67ff889331c0789105c1c622385545c0cc4210bffdb2bedf9f5121824d4957d878953cf1f107b50bdaf903073690df1f54f8f243d429024ad2a22c55e56ee93fbdd0345de14ba2b76a5aba7f34444d23647f339c37ddec0aa22525f9beb300296d37099a5823954e42536406b7feaddad5e7b5903c847d3ceb5f6ff6e368f8aa809c4272f721877b2135d8c2f67cd24fb7b1e0b8c0ffbdc611dad39267dce7ff642061f1d590881aef058960be5c7b3bb2b2ec40de1b4a65a51884403ec3f9b421d5afeba9014efc3af8d2eb707e34b11a8bd2aa865716e1f56c7d121548cf6660b860fa53555e6a23e4bb7fa00d1bcdf03ed2c27838922cdea99742ab47e98f874b5f89bfb5687e2dc6c85f074160f4c6a83cba2104ecb01076eef51d2864f6f90f747ee19316d454ce5ba0b8d1f67cb3936e45e874cab34061657fc978691a0eed0c120d8c1046784fb01cbb6f3bcd06f3e56afa7f53a86fe17a76dac920736e4549fb66f756917b025d4838e74ec0599083f1ee527cecbfbee993cd9407d8c744b7a0a6e918abdc1b9004bd1265f0de1b22736b6afec75a0aa0e6cc4bec91317edf00d471fc6a7c884551f549a07605a42298c3056cb32f5b3ec54b37fe1c439f98543add7731ea2d4aae6d1af34b184f24ed991952c06e149107194265ad588753daa7179aba88712042e59af67fd9dd0812352b3307f8a50b12a0c074f98155d45fad4a5fc0e56987da6fe6e321197a573a70e27bbc01a57f21e9bbec84ed32a884c137ddc61d6257256fdfd417093cf930ee841a91ac185c92a07aa3e8027c537bb3bcd4456ae44afe504a4dbd1694ef9223dcaea9e1ecfd260c47ee03943aaeb595ceecbc2a186749900f4e88a149426ac2f200cc4e7b7185cb6b118087bc07e192617afe37bdce8e67b79f24885923853d73c20b6306b339cdc964ea483500c8c2f661b7f8fb5a0c2be4efc5cded90c426916b9232bbd24d6330d218bd976b63f41ee8c445e082f3a41f69e3d0291b85ab782d5baabeec9156a5bc4deace32765f91c2304b221e1107c70fbbdcedca7f9967df96cd80030928c85d6f05a52852cb272b16d19d3f03f9465e58944c56200a3b6be853d71635f8ac7a77af9d981612792862824d63e0b29338208ac182cae9eb5dea007643d50aba610dc074402692f3372e52115eaabcf08936eb595c26132419bab762702602132e04431eae187e0976fdc5c2fc3ae4baae209b4b3fe57f794c33d48118845ceef063a2990f252b78b0f4625bd172d06973b577108611921cffe58960064e90bb9ff80d0eac618cfbf1b0440df81d6f4e28004edac40ccc2bfbcab4683b02dd88a455c50bfcd97c404d933ee0391b157d95e1148397a33b84d9f9b88048a938b16b772fd586e03ca4854cfc203c428fb2edc9872d05a3a533557b2a4bbe762bf5a734a7a9cca627505cbbf51fd56e81c46d4114891585a60c5839584c36e9ae635b87f8e9b3d349d83fa3b1fcd21f25eb6765dca8ce0c38e8811b3828d719079a4385f3159edbc6ef50f88ef739b9bb598cbd3be54bf64914b24b6920363f437db96c72a9f337e9770764fb320e8fadc67792b7999f8cf3fc635b40e3645ed4eee273aafef448956f36cff5b6a030f8fde47233b338e771d28ad02c45a80c20ef97d55129727cf3f963d22683fd08e9f2718cddf3859bc5fc544ba7bbfdc5f46241e397c441296931ee8711bcce412a7b2f40bedc150369d7c4356c75cca58312f9b6e48b45898808215d536d105527f8d2f865f7481960fcaa6b50d4e2f67bb711b2067ed2e0628bb6c28ed93c453fff4baed84a281bafec4fbc74efe01b5c3ed9822ee3ae9c5edf2be6355452963287b6d9079335d6caad178ad90fee598142ca618a1ea89362267d7cb3cc67f1ee5e049a683bd8e2ff190c7e9eca113582d31419381437b40ba9c192a40ce8210aa42620eb055e2ec2c8281b1092dfd3a50b0ab318a2ff0d9e8f783135d865831d26cd4f9601ec594e211582f8097fec5bc3833baa8badc63e95e5c5daeea8ed6ac6fbd10a48fbfe973001154f759ab2df121acad9cf0019e9ddc1163b0bb1c84cc95a3b9e948924299a0448ed8dfbaf1d1a358111f215c6a275188de20cb8c02d4f3c5b4041d6577ee7803fce75028494758a1230f201ae9dbd22399713a2f31b0d6da2adcb74d244837dd7922aeb095abfbb6671e1ae7a1095cc29386130847677a7ff684bb873f2c17079859e257f3ead280455ff038f2b4aca3e562a643597de92ffaaa11fe9b62e4c31a1f47e5c970ee03d2fff77be550f31e3e131287b9178d69f045463e49b82e27d4881fbf8bcb5e32f2b2624e9d4aa27079a5cdd72b4a4755c38478e034df09806bcdebf7bd0b70d536cd43dbf25e1c98278f25339ae2139e4806557730a192d352b15dfcfd4f3fce940cc8ec28e0caadd98a5827f3da0c364f0f7df6d996d609f517df339c66da23cf7ce88fb9a6b6005251814d2a5a16665962050481dc679f1afedefbfa16fe97bdd9b06197b80ce13083102d4e32c3fe0e41215e32466e0d757243773491e756e01d90e3eb192f7f940f562c857f968f3fe25f44e9ec78971000ec04dba4367654537c7fb090d65eace075277e3a6519d9b085f46de9929f87aa9b3b07492b4b4a9e2b58b712ec5c309d225aa6788635699ea52f3cea59ad1f2f588721c939a5e592811434bde5dc4a530f0187f7ec01aa92ea5dea6c43276258ba5f130195cd3eda74b83e77a7d31dbf379cd41d1d84a0443d9d77099b61ce5a94e66929d169dd9a7f081e64fca4805f4723192b511aff1289c11525cc078dd5b3e087b3c66f9839b843a46cc0e21b84389ea912d3990b72a10626bf566c753daba788af7927313fcd45ced02171d922b66c0443c99dd48889302aadf5a9dfcf913c64289d4dc6db9421c547dcfbc44c0c9c8d553f62fc8c917866df8a53f70fa55e74fa1b463217d1cf045bf654873761887f97327a4bef08f00777d4209386c510b39fc741393dcd22e6e1fe6ad176407af7e9d9daf21e819ca930b322b6b5b96b96691c2e85a78fb06b6bcea5c0489335227499876c875b84adca936663283e290eb6d16e9d25b83f0541760aba51f77b3616505da6bdcfe049f8da2c02db60bea65c6d2ad3ab196952b909e3baef37f5f19deeac5ad8db2e0f4d8498281f14f1c1317c5616f66285f71a679634ec47b262667c4e03ff9d78d619e1878adb0224dc703235ba50ef6c57c1c2bc8a7d77aa1acaebd1415b112ba297a540d2841089a8caa5d4d434b944c34d3db2ddd9cee689d6d0876adf517ad9c197e80682523ae0b9d1dd81fc03053e4d26b041f4d02b3438b03881ba0805cd0bbfaf23e1259ca34fd6c548d58f0ce74d64ff595cb6f1202e8a5bf529d12db40d6916f60c4de94d0e2f08b7587b5da999f71d5515d95e8ef2e8702f96c2bb5520b928021a1623179e3fbc078592991504a6a7b58f83519db84854a72608a4cb41be56afb048c156ffd84aae0016de7eef337f6eefbb24f827ea7e038a27395580c4f5ee9eca58f7476a831f15d8a6fb79e7df5e091916e1ea73a36e3e2ff9e7c41c49c1e7e1f50b3287c2e4942ef7075ec9d16b0249d9ebe8430e5a4ea38be65a6a11b31ec1aa0ae1e6758cb374b4193e6399c299b3f431e562284e15dfb2b406ab0ac962c6f0230e2200a4de6fda4bdfc5f41af2cb45bd06ed0bd6e28b47f8afdf982a970a6f59a172abb67a328e32112b0596f225d14bb4ee750d6a6cb15dc7a557d54afbf7f2536fbe2f546128c20fab243a31488f65d77c0078d5e1d3259f0e7dff5bba0b9c9c3dce60ab6be0c9306329440142adea92f6156b1eb2d0fbde1d5fe6caf002fb5b739277a18383f57f468dcf79ed1258692af520ddd32e49c044517d145da662593db6903d4304c81d728e66c612277f9c91b82a1468b65b650d26512d5e868982bd9a54fb6fd7f4f6ce1e69fe90c9720966fb303e5e3820e0201bb95c1e0cd3ffbff863d8533900e3674cc9d9e9b8a050d67ba7d08973e9d7c4afff7afa11c07bc1b83fb9702566819e51220872ac304adc403902aace55a4d740e7a1f79f01d729191ab29310a35bd8be134fb86690eb760fea2b311cb25855d9b405c5904b6cd3550a605babdde37d33343aad7d4cfb9c7b89ba3a47bb53689e595eb3b6ca157da1f8eaa04ddc96c7fb9d22c95e1bd2475b29e4f7d4720c5b47995dae19db8fda324b1c7275de7792a0cfb1e5df495414401df722228f2d7efea4f834a23360fb98a3d830678d229ac087361753a5af71dde630efa75d44a4d6f657c96ce9997ebf5f064f7e64705d2d23595c76d1663d86029acb988ba7a62bc3718323ebf8b2ec934da9f71f0fe4a79c69bda99ccd5231c6bb0f3c662d901d30865bce0758e9bbc08b56e46851255e284c6c6b0bcbb6ba5b431df97f10f4ef5015f49ab84fd446439c0087c4cd39625002a30430ae1b072121e539e42e293c6a89f810476ae6a303c7f3a0848ec1c74cced393260b336644fdc1fa1cb4dfabfd6e2f44bbf9862dee05e5dc36fdfb61fc30dae6caafdfe9c50323fec9ba856c3a754355f4fff46802a116b84a783f291ac3d9374e9bf1d4c836818aa9e773d2d74821d34a73058cb6bd5bbf9e579d83d4743200920fc0880527b8a020505461168a70ecd4d3a56d869e1b21f418dc6c3d6038b094717b76b30d05ca91c89dcad288d8593d66d1515f4f4e92e648ea88f02e26f429ea20131f0da70dde1c5954697309a1ad2c1412ada33d1c645aba6975c023d2e516f4807f77551340e7f1c4ed621f4fea61f8169f495bcd5d794e7b7a1cc449bf391f6c2cb324be4eb43bbc328b6ca3def75b76cd404ae66748d788e1cc8d97c0d9f11030e84cfd6de6709761b36e65448fb01484e45781e584f23d479e25a86c62c7f88233d5d3e9b9bc5e6044d5fe298b5c1e4e2aaf9a4daa90e11bb84d4b393d076a95f4d05fe241e05529220687fbab1d25c9c3fc7cc9d2d933ace82c127afa8cc895bc278a64c45cf07c332a4844564f84c262bfee7a58e764eef992ac7599d30ca36cd2c52732d9dd120965af58e71c5a8e2d2964249679bf36cc1f052632daa3c3b3e22c759332eb93b4cc3bf09b62164f6dc8f37a8524e96d9562fd3a02b5f83d29b466e6fa47ec97ca4696f85f4ff1f65f401aa052b17586d55055fbcee4b0a3e794fffda5fd78fb0d5eab52bb8157f97a87d97defe525e88becda274be3d62aa6876dc07162976ec781a737510a870bd83ad0bf2f9db27b82aa2c9e86d4996269ca719efb5efa5c79107fe82f4f6e6f2360080264fe2e2819238a9db9fbab89824b2e9792c792b04b6c6d2aeda67205e23e100c9d96414eba19ded5f9b9cf1cca1128301f767b8c1a2087d5beb2a3a1063776967aeb638ba7a22ecc298f85b0b70e01f0fced90e2325bcf689b68647b6a90c40c184404d045cf9e4169339e20018186df48d89bbf4eac0139a125b430fe11f7b9c917a2881a586273eb10fd381f6b3307750caae227304111efbcdad21241f607b8e9f9d7bdb3fbe7c3fe41f2f9cf9d83469cf642cdb7c3c1c2e534562728136bbd5bfe3ab3aa65f04b1b4b19ea4bc8532d14e232457d597a2819b61061020dbe8b17e2a6435a76d5662a6a3ef9e647c9ca6ddf423c898fc6816920dca7f85a580a08cc73e76c6dd31677e8be0355ecee74b67d6c50ad280b9753b7ef78c67dcf3aefccc2da98a1ebeae9b7ba2cd1434621f27809061423b3dea920d4d51838bbd72d642ee7c3aef154a0c458b1393613ee09e30a547bd0286068cc5bc9e71bfdff3e8f0fa96742d43bebf5994de2072018e142a956ca8a0ce0535db01e3d84dac0f175456863165242e3aa15a3cb6c449200f0332a62c4fa7d9781eb520805e0146ee4275e9f661f2e36a2fdb039c154464780e8fb54d8d4bd29808dd8946b98813498b18ba9205f5cac5e9e2ffb6856d8fde4379ff88aeb83d16530a1be94e74e05dde509bbd33f016dfe7b1b17d2c75cdf129b0059f4489788e6be80de1a7d53b132ca47d95e745750e8ec63d810bb41c612e5991b4062c3014c2f76173bb1c9495c46ca45fa5693011d033396680f5c35c1ec6a6dfdc2e09f75c81b619fc5ab6e05df9eceecc1b44156e3f7a07b34f363b7e37ba180d6b60b2b2ccc57bc17a74c6889238f6d106220462330fc0873286b55cb1d29ca3fe2a0b1a13bee094ac4eb2049307fb569ca458af66fbef330643d4d784a6eb20d3076421ef80ce1cd4df83c3e8a25442c96b9f62d27fd14bf8b0096909f29f97eb0a0308ae34f7086a64de71867dc345ff6c35decd2ff3fd87c29e045734f4f28e256f80be6f5d03d6930ff64bf14c528174160fd1b4545f9d56d61b719936dfa58ac3629015b1f35e94d6bdc2fd1a67c3bb87efd92c0d8fcd0eb58e9eacccfb2a87899656e6ad3c2e7715b0eee7efedd4441cd671d76f37dcc46939782ead41ce3154cce2a69eda4d8c7f327dd781274b7424dfc575d5c62995fe38936fcbbdca5d42a2f3394c24f2f6d55620272ac0da9ecbebc622e267df22616897c9bf658a625cb41b5c63ca508a3134e1052b300ff92fe7419f0a9040c6cfbe9b59bdfb1274df1251e64d7237cc247ac44564a18428e65479ae20f3af06b365d19a223b0e2403a17ac29ecbaf879bfe67db9279e29770a870a9278021c788c5069e89908e7d6edc0d5c214f9b808043dbae25a295576ab65ef7a3c79b7b3bdda087f3fcfd2105c4ed9ab2a9baf91fb123a3bb700ad867137de7137e469e6daebd19c7ccd5dfc5a70aa275439b57b07ad30b507f39fe69d66b6840c8c1c6756605d6a27772e117392ffc634675d37cfc3f1d267e2ca4b592229d1becb2e91041da95a17f9a97be9d48ae4b157351290e14f4027e3de916e7bef2c1d288fd07010691aa74f9088c90e60e29433bbf53e3722d7ada5c1d7728bccaba0dee2b9bd2c711ef1983237d10cc6aa766b60b7280c950cfeb04298637b7f2727377baccf457798d35008a6e97d430ca7d99e8343304e148ba7796b94c2c47877806ec1733b27b3f6f30456bab841d7e5e1e8906d9e3dd3b6d8c45e8f62a60c57b6487bc3b972ff35f822e521964b8488f60cc0df1d8e762e21605e104efa4601fa79ab555f35217195bbdd3606893e050ce93cb8bdafcbf4aab52e453ee83e03cc8cd6188c654d7a73ae565d76d1bf7c8dbb2c9412e00d21e52f8fc5391c92c6dc346802d96bc8b946d3fa5b4520df8afac0065ff00474bfd733d58e0d169087e235b96d6a45057c5bf472255c34a3558038d56dcccbb5fbec2e9900d9b88c97b488f12c1bb1d8a0eb0b5eaf74438f25764cb90be2cf509c497f133df7bddecfa3f1ca43e2da1b367eb2d0e21b2f985f1659dd38a9db4b59538d499f129f9af59e666cddb9d997c88beacbf77dbed60ccd7ee9460542d68147264f14be5f0e73e81f850cc043e83fff40b8c8ad88b2f73b012bd6cf776a16f533f96d8a16c1ab33a39e8369d87f340592e2944a63c5bc74b78e028f16efaff63e3076ca46919468e1a512d99b75e53150aed05c0be9474c60662c16920370dde7ba8c7cb3b7c2a9e60faccaa28432eab6cbd8de4279f405509be9a6d3cb34022e1b7c73e6e53eabd7232f767b3d721c787bb8c1fb8b9d61b9998f2541e00d0791202973a5ef5ace80850c7021635f24ef719c82ba9f6cde77f6151aa7cd310a40ef480a1d3731f942d4a3f70de93fd643db2e523bb17ac2a8cd0eb356771aaa95f053fd17916f84d835b3521f4a1132f5a573eaea9478998e1e866c87604552c5c1bd4ae05e52c790613d3f882bf3fd46f48b81aa742c69170359b87736406f80b2f70399d4485c113f92a1c639c75405da9ac3e072c3e785039d5ee2d18234c88638fbeec09be140279625e9a33c66061860ad892f7b59106dbae7827e170b7986aee7f8d39706f55a884f1f0ebca61e97cc79a22db39b1f171ef6879a465b2c48cff415632ecb89cde8cb142f0bafec220b717c6e2eb496ef64266713a1fcdb8218e05e3b2146bdbb48d24c9e72685606c6b4383eff22a15a19a13aad864b3634455c2f289adfc9c2fbcde5ded196c884df0a4979a141cac768cfea2d279119fe349e753e9690007b89b82b7a5143e353aed6545fecb1e9a00305f3f1dedc153506ce915f335fcbfbf38390c006ac97891f036f4ca37098f2c0872c369f68f71a1d45bfde0f8ec90aaa0e8517820292b35e493c169c5369e2ad75d5d957623f0e95456accbcb5f356ef7440526d05b1c367a454b99009c88fa3abf2bf49792429b02564e87e5c1bb4b704f03c7b6ecef8fa178b2d2d485a68aacbdd856c2d2e12aadf5ddec7ee672b58d18996bfca0487a38641320d365c86b220ee37d5ea93e69b0cca34cb4cd4e494ce44d2820be34d376d3f268ac1bfe8c7e6bf0eb9d19ea7f5161365050c44925b7d8ef702cff07f40921a4349fe617c88e3410373d600a0a1f1bb2dba778d6f4dd0a9045ebe9a7df59e079013f09ff7713e5981af0ab46ff4050b135a0863469be6f2d34c4439df5bbf195467d9bb74859f8f5e51b6f098c4ba6e328e12931846afcf74b25eb3429642b6d0081d9caeae66796aa5c8d4fa965524b416d839032ae02c5d38de15564249212c05f21ab2ec222296b58c0b2a68f2d28ec7399d55b200decb6bece4a0ca44d6ecf1980c9ac53811a8a09e176791e47637bbe6bb6b90edf47568cfff148ebe878dae554fb9dfed53f55b26106e1fe1286d35ae148d127be2e8379d13ee68685001ed85e42ea61680f707f8e6b0dc85bbcfb02388d5d1f00e20ead55ebdbddf5da7aa30b4a60626f5be64cd53ba35d25713670c89be0c7a4d44b4fd89a06330b4d86836e7ab6d12d8b21d3e4e557c4dc9d250cc286734b3773a092fdcfad5c5a49e615e0b51716d4a8fb39974e5e56198402931a78c0a8205569d5553c56a6f61ad6d65f97d532b4634cb024a2bb15b3f4ad08d43302c333b845c871e44c5c462256ba253681a6cb69fe577708ad6d92ce9da22de45196787029b44e3269dbaabd3b51157e447dc436d0312c0f64de2e9b6a9d23a66e7d82054159edf80a8591e18bc48e34f3c0e2762ae4bfda060416a28f14f205e74dffd8f71b1fc1d88ec4cec580b271006712f3e3b45f35c224f0b768848e97db390f485320d323093978dca8fca81e750d2e8839545ec2b304abfb176e2f5b0e8702f5452d2d59a2966156c230c73c7d21c5827135a3c0e2bf31d752bc25d0f7951cc5fdbd1f6aa9dddb885f89e8e129a9c09b122392e3635d9774efb7eb46b61f731411fd9130abf82b0a7c6ab77204f4f91bd5e6cb0ee3811e1a8b717606b6ab63fd29076d1987c9ef082a2103d009303e54253f5100f07e87787ca0c7ac4f76ea2f636d8b1dee8a150a0bcf228ba703e79187d19ab2d608d73903c1f7eacead6399de9e7250356756781d50b426672ecdbe558e4e46c749080e86cb92f0345fbac2ef287bdd3538e1cd498ff7a0e03dea46c730d60496210f7a3063eed64a4f71c8c715da8af59f916790580d4cf2acd92252a187c905cf4372fd886bf8aa9ff30afd37a955bb77532fd32ea9b95670b08d06afdb30aeed5e32d4170c9f806d8029813c87da6a93c0d93078ed212b8dfa824e23d0a8df253bae0117a8b3224f4118a68e0267a0474813e4eb75f7c400716a01f983d3079c50d66b59f2154ee8b72ba690c89e89793de9cde3271420099ef22862795f0434b48aac25cd679fda430f1ed676398ae134c1b5408f25641a593b0d25465c6fb49daff868ec017f9e69192e3f07730c48928e7dae97be3b3bb4da54d2f2136bb53a9d4f96ced4ba95353c007fe2e40257fbdd772d28916c231cd0e8b6ef1b9997add97d410fc9428c70c1b62e7f1c899cd70dadc49b9680cceb2d497fb2f63d5075aea81c6859e049950c6f82318659e6ea46c06fa1410fb73031a767d87296dfd2e6105c80ff8b1ba53b019525f4040e7624646014421c33e21351fc37ce671d2ec668207aac5a7959f4b91c3ae36c95eec9ba325c370f76f1f3db67754ff79656e3380c508d7737d8ee5b70fb56f5ac2089834d169c6695f73b1896ea2d946ceeb4fb2c0a2545f09355b6724fbc56fdbfce3e5735c041c36ac8b848d541f49d6a4b1f0d7bf730cd3309a2800f26946f87f678645de8d0248d63840d098fb81b819b67614d0184de681832850757739232c9bdb8e1a27f83ce1d011cf33ad989c201d53b593c0d8cbc7fedb685110c62dd0037c1834942b81d5341fd94c55e6eab21c6c1035d44ab72ca8bf5230e71d26bf24cb5a20815be69484a839a04df9b8c1bc11d968929cbea6906a81f280d6128cda31197450f2a084f1cfe253b215c7e686ae66a3f966c82ee9c81d975dc7f296077772c7ce422479174b73bbf5ae378c29d16a7db727edc83c19453425659a74d852befb15482b3c783beddd05650d59314309750077137854e1c544563b1783835d33524c265eb027b49a953594ba3b65a5e685e689e815e1bb7fe681ae79d3d496fdd8d00c52abca6048d42eb45f551f56061781c84104b706ef66c7b166424559c867b706516a7576aeb3b822dbed48d89ed5ec269c28d6749e1daf15b9446b3485790df119a7fa2d87371a6ac9b1c8e6ec20f1b06e47641175ce0fa18a589f53e0e12a5f9ae61bab1928d208f6e6ca99cf9a1174375d3c254490f1b41264865feaa2990b26e7687cc1b649a28200583898300a7421da42be6730309b6a61d19337333858fc7bf7fbdc8385ec8cc709308a88a01703c28f37e4848f2c8855c11c959b32ce349858932708a23a78bd34f0af98909e9d4f76aafca44cfddda434c85c962281bdc8d6caba8a437c13d13dffaa647d131799f8443dc13081e483da02dfef9f3207320b74cf07eaba17d466c68797d0692e1077c562242df55044b00a3743973d6d27f35f463f849fbfe98f41836b58d24a40b07aa082538b8f6a788042c2b7828cb5b37359a8272e17731f78c884bf199ad977c58137fd64bf0aaf9154ea69ee3cb2a440ea27fe84ddf2969010a4d69399fc4fa9cb1315673b5b038ea828b196ba7041664053c502bd75565e5197192749b4c84eeb12bd01c4a591393c26ef7dc8cd70773e9cfed4f1e14b136350fe41b6e3da9b5ba06397fe08a9dc48018916158faffd4626271fcab61498031f6dfed3a26dee7741134c8f7ce01af895654e5a6884b0a600a30aaed6974c40b5560f1af4875f5c243d863a23a0a62574ea86f2a880b0f7750b158baeb6e009e7f9a71c1f32384f333dbb9826aa5900b64c8255dfed71bb0b883c6b9129d8b50d489166d31ed4196e1f47f7adf0114eef2a154a2335a474d99250f58f39eb66140098ab6f7118d9eeeeed24f06c0932c3210f9bcf4c9098450f9c32c80a238a933e8651428fdaf5c3622ace27083b8862f92cf4abadc38aa7c5f1406e78189b67ce02d2263f1c5ade65e75dffd26efd3edf453247e5e1ca2aa044c0471e813e32abfe626fd43c4eb4d4bad6045e64e25fa70059c6e2e7f0aae6d64aa48102c888249e7185efc11409ad5d2ed5173b3282416e56fae1176f75989e096ab33d4702d8c9bfda089882594dd0a31eab10515ff2bb2d93c0ae3276728c2d389cd0529451eabc4ba0cd8c05ea9583be9280026274c9e3ef34b12f7c09dc4690633faacec67a4292b366e090f7d3e214f284f6475755839ced63066b74bcaad9da47ea9c699c2cca3702d276b4b886798dced0b43b4009b09a170e53e6ea694a49301fd3b75f430afe74005433238b7b84a0225b5e7d566fdc9ddea930a9248509c2542360ba5f9f30d93b2ea4956bebc56c932dceaeb3c02f876a899186d1b2a398712a560b608290985e9c667298172179326b37334d519f0abc83654306269154fec14bd53f06f50695e69b95305730a8ecbc58dbd3116ed6b1dbf94b84bd8f3fe85768f62d060f0ac916d67130f723c7fe7b248a749faaf74e44c37e197cf8119cb9c2713a2560286c68a57663c72b83baba4894c0cda05e88099e2acaff10db01d5b20a07980a0756ddbfa4de8e64d79f75c767163f3c1c24c95d8a3c033fe800658c3689f8775808db6c259e7e8636c226d2b482225740a1f85e1cc5196c78c7cb90576905d3d4396dfb8d4babcc0ec4c294b9c76fb8c6580a19878d376fa06329786f2999a95dbfe3c08619f5127edb642f04114e082c3bf2451d1608949637cd9fad4817b9a1426717fbe1048fba5abbf5755ddd2547c6246a5ec609446440f0bafbbe190e9a1ec4569d76ee9a8bd9e398f0e75d4e7d911c768bfec5dc85d58c8160c6ad99dd99d48771179b70c69d8117be09877e5b8ceade62800f037d449950a276265b1a459cd876485de15d6db9ac31929b75f64169a4483c22edffadb353e11757a13d5dd58241b04821fe2022b64d3cae91d38c6ff63b10343355cedf2113a0d045341cb1fdd62ee90b4d037c00d1dda3da71200a45d4042897963f78645e73f7205b6c59844c9b94f1206aea4b173478eb7eac2d697dd596ffd484f7f9615680725f9256d32ad8f517b8a5a38bf1ca0c752521055a20f5e43e36c37cc79d20ef62b4ba3bccac2b45512253bdb1a4423ce3c499750d732356c6d436bee3f637bc120b5f9894a6133dd04536984dd35f7e67f5f402a2adb7cb21874b234a19d9507189e4cd48f16b6d864a132308bf1c8fffebdbff193272db81be4dd7e11599283c958ce4c05c5c6a9677f24eb7b729494ec704045be3da113058b14778c6d8cec8cb3d54581eabe5102066ab85d9ba4e5f044f98060e46d8916004cf8f736915a7d3548bafbd20e3345ea00a2741e8f0959c8417fccc0cfa4ef1dffaf9c52e30230ab692b5db83883d503829274da4e66049452923b42a266fb7868e058488386bab00824d2051757bb74451a06b5ada870bc31248b81158fb79c733c4924904ed42f0b91ae7535a118eac68bfd4bc5ab1300b390e4b9741dea94be7d7ea4c77ad0de231717bf00fa493fbf42eb48398b63aa716fb626684f03ad6a118d70a2b6a5ce65fd90f50db5f390252ae7b2645f3e343d4e31891d1a74e72d32007ec40aa8f788796c4126ee7e9a4c7cd9918d707383a8dadff8f819dfd15a84bbf91af4af8f30d10072d9c9324f6b48c8a0228942c45f182b1163e040587086501eba7f91f92c76545d1665da5394c6f3619715ce2c2fa575fbf79ad2f32f99aac711e460cc152147cd07ac18b7e6a8a2491359c122e47f1991bd3aeacf7b78a1024b466c494e48b01fd2bc9f108fb3646582a6a684578a685766b8b6963a9735f0e522e0aee71f40adcad080707be2c0a5cde361bf13be997a660c4d8f9381a8d2f801a53b209365531f9312856a73f2d4af1d9453ee0a9e1284f8de0c64ebdfff1bb31b02e7491c281b2131299f5b9bd681b429dc108f3cb712c6024edb290f7feec54c19744549ea0f705ffb46489938a2dc2257560bd0fdadd14f2ff933bb7f9091303f814eb91d1d92efc3bd5ffd56c4fff3e189b90f7ab13a43bb13d4bc57baad51964ca7078654dbe3b2ed487fe68c97687fce1cb775926749116d0a15d9ee679937a460596c903d92fcd68ba673888b106465582ac0f1ac34ff75b984ddb069cca66e340466fe12a5c8304aaa664e83e0750367de45f5799f8108384d6b2214752ad945b57e5c6216cd99ab8ff8ad6143d620c71363bce48f6077f1341420900f2aab6fa7114ee99fd1e14cf83a1151378edc73f40749c27897a4a3718cfecc6dc362c40cde10053b2cf0f4a6eb5d696276a64061474c99003b254beafe19e49155380d1c1b003474d6c6b424a2402898479b08876229218e9c6c906847351cadc1764815c66b4fbdb9b5747e4b06b6934bfd36ba7b27672d0e47321ca6943430fb5b5e99c830dd807d88704722a3047092615a36073068d17058f0163bebdfda676d64d1588413435a80e61c6b0c96580b8e659e6ccb083e90cd1f9925f1097d65c07ac54a3943197735207c87d11ddbdfc366dfd69e4ebc6e90d015f2fe9fd3cfef644153e41d7a1e8c852621886db50c998da4c32c4d5fce06483c7cdf2fc782bf5ecd3642ccbeb6df0c7260d44993572d743d9ff67087439fe40ec2c06f2f0071dba3c0150b222ce053bc124d489dd0e4b4224509f3bf45bcac2c9bfbefafb1170ef63fc78a8fd7195ab3fd5b01cd78939bcb5645f1fd0cc9c2c0132e21f6f6eb03cbc807d08076a17e252024bf67168cc684af4c1e7525c15ba1bad230cf932f0d69efe2ff1d55aed7e8e09e6d25130741fe793014cbcb07b19edb13c875cd56a747dd54efbb0744bacf8df20ca5452d661aff7a48aff2521ad62bcf8976d04038bb329539b7823d99279140f54d141c5647f5bb7a708da61074b36d7d854345981a9c7fd67f6c8e093747a4392ddf94faef23d50686e21f24a9817c1fae3e4cbde2cc04535e41415bb16b8cfc5d1d796a253641abc83dfe232dcbada81a22ec3920d4b8cfebd3c54861dd99d24f46259ab3077e4abf2a53e16b484bc4686e8548277b02f7e05f2607a2cedc7155e9f6c2e1d542a5195e119c9a13720d5ceca8ce92ebd88e63436292676078eaec9621c57ed38e1be3b1ac08dfb12bbbb868b06380db8cf5a0a2dded1d3d90d3219174189334fca504a7db642076c868db5a57a2e3089b2ce127fb3a626ab751e65bffe8e06a36b1792cc5ce768f49a063eaa6eecd5206220a44571767b6785d7c0a7065584248df23b9d8302f0038c71d1d776c55aae4d02df30bc10a31ed018a29bac8bde7493bf6b49debf8d02e52299e951f52de75a32c161ead7113df27154dc62f9a3cd1a4e8deddc344d6ebd1b6a18f34ae38e5db1d891d88b7f259b0811b01abc13be80778df1f1c97b25924ed54a1066e28001bdd81102726e332fb14071d79b4e36ddb3fdf11cde7a383a2b4ea3dae77c0df25a9dc16d397d938ed6249f6d39797f252e6c011eaf2d8fcaa6fe487f19381e1c92cef0a48602a5abbd68ab0876fafab02e929bac1e2c1afbf89879eef7a72653191221a06b64371737a02726548b0c9fc1fcd687f6a09f7fd5916d05e7dffdc9f03245eda55eafdd253ed474a5640c37e7ba0b032e20e3e1cb7989329d0c771e0531a7a8d8dc4554995135c328926c8fe1704e27b9d154cc6b912b98a0296dd9eb021627a5cfdeb998aa65a6fc145a72a0e099cf76afbf3a8d856a40cb6a0b6cae2fa1340e6de441f4e166e10250d486369cace07670c005f1221e42c41796c3b04b2ae7c2872415d5a0ad31a318808c85a704c5187c5f503fdf3a030bbc3d5d39148212ffd27f1da34757a2d92bc310ead7f826fc19d140ca477adb389ae1ca38d891571ca442bdea9afe56a9f187b9c2480cdb0c0ae6a38ff4c92f2b3e4e20f6bcb2bb66e288160890dd9bd732b50d5feab52d973b3eb78adf29c8787a137537d70fd28f08b041989eb880b650167e182f95e918acd1834f408e9460387c5daea4804b831dcd8626a31f0051930ce2911c6df7b09dbc2d770749c285f7d01c5b0a85053f416620330ba658e9629b9e109d6ee3ad4079f49118c11fac9624f8dafaf526e70349d3a17dbb44d27a784a3c451f8f81d5d750ead8bacbdb804d6b28f244781b3cf58ae3ab345d8a9b06b0cfd0f39f8d475eb9de8d9b638c20416e877fc3576af431bef6e4c801b1e56ed44c33650e91587c01594da583589fc59d31c5651eddc2b94be4571ca02fb27a1bad74d2a459cffd7aba53487c9bbff5bb497c9ea55cb947d3ad54bd7d08a3efaf05d225373a611e2c072ceba37a14b33eb1ae22d54d4f3eb66280d8199cd3a5e2db41f38004231bd475a9e1e971515a8bff1834f8d3f5c8f287e0e8a239fcdba588ce62f4f6494108ea01bc403b57ac012e6f5c9734c69ad23ce3cd404a377412275a6f695f3cd95ec3bb714a54e1cbc603000a869a492ba6ee7a64b96f28c6229138aa2c8e7ea6b218473ef07c2922f0b2c2b5f287dc8fcfbf7149fd24bbf8a97f88d8e95d91f694b4fc92464279ec678cddc7c05e67ab4954237f138f43264fd9de7cd767e23e2e4aa7c408df1c375cd49e2f085e50b4f834e29115aa234e243ffe6547126a292461436d44bf3d00282f0cb79c55f0319c17c2e510d59072a69c2d75ed273691201af187f419df0a92b92d798d3d1f807dac8cf958c5675b349d6af5bff5bb29743941c12b04c07b86eac804e6b41e3f17c1010e4375424a8d8a0b5b7a0a45ce76cdfdf38c2f261e80485b54dac5371ae5b24d933bd0b96830e67bfd62f972299690b2636318ee20264fce5b37f72181a8410c0b212fbd9b519cb538276d7f28adbb6e73b5dd6c3262fd86cdd39b9bdc861831cb99494b6513354176f011787951efec9b0906222419ed3579180de12ddb3889f9130673dad898fada6700796654bbd77af1d30f5cf1e1dd10736bcbc3001998c7f7c02b1db7892ca7a220716cc01110c4795f01856763090c1440f9ca2cf4a506f804662635b71395e3d14202fc9331c3dffa5767be63628be6e15e307cc814e416dffd616bad81e1055294bbdefb79a8b9387897c512881554a28c6aa8d7576de3b3a86b91e9816ca570f4aaa123fec6b10de324c1a780847d13ceba60f4bf2547b3794f19085e8ee7696088fa4bad5eb6ddb9220281b22f25f2a6011a17d861dfa54ae10c42acf73d2042a36f42ef05e83c072bd0153f83c523f7d9926a9af303146cd10663d6746919f9e3c83db21521b964d9bdff57f747a656841d0a623acdb4dfafd2c9bef8728c4b1be450251e6b07c87b6b271b6fa9cd4e94187023f820151884f80d4d1241e25425f3b45fde1b72600f3232b544dd1c81a5dc5db124be9c00cf2f0cd21628c57d329822e667288151fdf847adf7895117bd7069b77b8949231391fa48f18e43aa93ca8c24a7d8bbe4382a0998e7394a97359b0345a239be2f9670629f04c2b88a055b1b9e0d941b40fba7f9b82ac0e2a8c5076f75460a7d00d8702d80057c9e9aaaf4f20750b806b5d5fb37ed46c9a3326eaf80b7d31d19544313ce2c43b3af7b870ecbee7ecbf5a3e45f6edf8fc721f1179074a319d186dcc05ad7e799c14e78ae5375e3c51c8d254fedab095baecf33833f152e88e7e7009fa7832c611b12d1dd01e40658b86fdc071af4b8c9b458f8aa246b42f266cd554f3714276bc45f936a8c7b2913a2a16913a3e9b32cfaf9e3cceb1fc5b6c538baefb81bb97c0a2cf52f8696ed5cdf55c24426d4e3dfa03ddb8827883d02e17b177b8b13c0e7e7f47932d3eb62b96124cb51b293ce02fe2ed562e2c66e6a92a94366daeaa5ac074298cbac3b4439eafbec15a3aa5ea9e9000b6749bacd21ad25cc3bb0fc4eddef4e2931fef59bb4ce9a9fd61efa7c06b6d661dfdb8d971e3608cd1df7bf3babd17d146c130078ba5712028a292feda3cabe806dd61b5385d51ad8e123e39e1bfba013f9555cb55ccb8b89acd70f313b3ad943e082e88234d865f780e3ad2736245d2c913435994a46c9d19deeeef30140199d6da8f0dd949f6f232f0167c0bb00e5136d6e432d1150fdc3007f98961402d7743d59fbc6378c4431b4e2f7fd03e0cc66ad698e450f9dcf221cf6b4e00cd333d4447346fc75828938c1c6ad8fc0d72e82d96ed62e452da08b160e536c3de33243773d62d2dee14f2951e00e4790736830320e1406f3c2c67a84010aebc35d9228178efb64f26e727da91551b4e3540b9b5ec85f511ad98665f24b951070aa831ca476fd7e84b403a6ac3a515cea819e446a735d19f4132a8a05f0ad4d3cc138e26426f49b8d733e40c43af699dcf7ebbc71ccc069abf946ea70f07f47ad919ea5bf2b8bcf9ae6e2de10c9424110ebdaf982a9f05ed61adf5882179b79d6fc2f01b4c198a738bca0fd7f8d456ca759fffa2ecd76e0e8aaeb129fb8686b0ecbafa0587246c49c00f3aa2c26c5703ee822bd146418241ce6033a26db4f5102e116b74c26c2d45ab7adb9a88e8e4d3cdf44857478ad4f07bbd6d140d738706ba5dee58a7cbd9bccbeb91d747d77c7fd72c6bc1e3d37c420b4e72660d5f7b85ad432e6a1b29797df64e3ac22650a6095231d7d7b4d7d91b060afe2fee3775aedc1c8db74ad7798a6d3699982419d50655aa70b228fdc7b012ac491a4f194c95874380b8c4a67cad056ec49b0ec2c4aa453d3bff03c48146f3d196fb1afdd351cbe393f5ebf803e60840014f8aa62c6263a71175ab1f1bc43632e473028a84b207eb039a68715134e5740c54a991011b4057d090fbb899b8dfaed1c8ca73f600e0d55869d8fbd53a906ec948491d3201eac6fc630a3e203898e0300d21a953d74fe68630e3cfbe36745a1bc851ee470fcadea77220f524df022c847bd6ff9e2af25b6e52324f1a5c08a6b527ac0748872bd917c55e32733bde1e37f3b5c1d99c729e0435191d9ce72f8f78c6a17460e86609c73568b48d8814322bddc3f2fdcde1df850368fc02da1884c3365bdfff2dfa94107afa23554c2c4f976b489557b1ac36d3e93778a39b98e83795ff738c22cf53a88dacd494d8a493456d40fa71b92bab373e8739580ae95f8be6f3c7b15c6a5822cc5cf700d645a6e50f9f5ff2eb5f8a26a9adb4402012ce6f7f9eca895bcabc09100ac802faacf750b0689e85d1e71b4dc3ee975f39573e86da72c70164b45a691d765af53768b933b477a12858a4a705d9eb0790079e53dc9173fa0bf47295cd9e99c42310beef0831d987389224700b8444d75935fa9941817c7e5e3959875c32a1f8a789fe1364f93e6b6ad27552e29317e6ba3a4b91f113e2cad851ba7bb9fbae7cce65bbbb91d3f0955b46d5a897dc17fd9b34fb8146e5e89d2f829966f8cb35b15524d22c04c3bcc4e4b8d8730b086f39c1384d2a392b4affe0e0065af927bcfe1320422a402d8ae5fa187dabe80724d2c056818271d43611b6babdb2690cb8df31e7305ea028ade53e1b95d82d023af6aa279d19a18aff92a8c0c982ed18b4807fc14ae51e3f6d7ecd162dc38a6b8cd787abadb1e405a7e42202dc02ab6c61e96af5a98e4ea6874fcb8fe3a85c6ad91224e60e2f792241d757654d960a0e24a85d7f2dc72b5786cb65ec0fd22cf724712f5fb45992501fbe6b9e1b1d62153a8e56fa3d3aabc7b99c3becbb2a7a48a0f8bdc91b11d5b0b02e479a172bf18a68920d5f5fa550b11a6e9541b074f3e3fc2a752d0ddc880a96696b1c1a699c5b622811d63629d604725fc2ea456b3b81d239ab57374d055dfd76dc6199da23d52e9877b734507f0c0959183f30fd47ad728a13ac4bde5a74eb261d2cad5495524b25395929b8122f8965c4ba8e0209ae4ef966278313258388b5d06ee49bb8f29b654bad8d2e8787c74cb099c1fdc018b3059e6fc7524d3ec359e5c01d0d3958798f916bf61e18d5689e3c3b55eba92d5bee49e2aa7043c3a6a5f831744447f7c5b08e1088dc2a09166cb98e56d2538c2c6d9a2c68c607c2a712bf2e55f36706b78afcd336a48e536ac7e8d08e2673e49a619f808dff7ef4c941b9132c6b9798fbf6a2859a251bef23a43966415f131fa4dddec86dc1ab6a641f61c08b199b307bd49379e997b27a272b4d544c06e3a8acbaae12ad6bd94e2b7dddbaf2e21d596fc1f8853a4059688c1baf8a4528bc4223960b0ff415af68b91554b9681b0749e5dd8d7836c27fedaba9bdc33118bcd8228b01ec77ed6a052b340655fdb08a9b9d178620d78aca1cca5c86149fc943c569a7fe8f820a18809006ec19ae0e7b3b2b59215ed1e9029cc0ef8f1cb49638a3d69d02cc3af2f10ab21f50e0da06a87217e6e3253a23b5de581e39f145fd16596cf6c8f75e492042be02c46816a87615c2da64</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">密码是pysandbox13的flag</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这篇Writeup是浙大内部题库的哦，而且只有拿到了flag才能看哦。关于这些题里独特的逃逸方法有另一篇公开文章的</summary>
    
    
    
    <category term="Writeup" scheme="https://blog.tonycrane.cc/categories/Writeup/"/>
    
    
    <category term="CTF" scheme="https://blog.tonycrane.cc/tags/CTF/"/>
    
    <category term="python" scheme="https://blog.tonycrane.cc/tags/python/"/>
    
    <category term="Writeup" scheme="https://blog.tonycrane.cc/tags/Writeup/"/>
    
  </entry>
  
  <entry>
    <title>与manim之间的往事</title>
    <link href="https://blog.tonycrane.cc/p/6222a56.html"/>
    <id>https://blog.tonycrane.cc/p/6222a56.html</id>
    <published>2021-08-23T13:34:22.000Z</published>
    <updated>2021-08-24T12:34:25.068Z</updated>
    
    <content type="html"><![CDATA[<p>最近刚到大学报到完，恰巧有些闲暇时间<br>闲来无事，来记录一下自己与一步一步推动我走到现在的manim之间的故事（<del>指流水账</del><br>这篇虽然叫「与manim之间的往事」，但是里面很多都和manim无关（逃</p><h2 id="一切的起点"><a href="#一切的起点" class="headerlink" title="一切的起点"></a>一切的起点</h2><span id="more"></span><p>现在的一切还要从初中开始说起（因为小学时期就是一直在玩，很少考虑学习的事情）<br>上了初中，关注了很多没营养的公众号 —— 初中数学、初中英语、初中物理 等等一整个系列<br>其中有一个很特别的公众号就是初中化学，总是会转载一些很有趣的实验视频<br>有一次它就转载了 <a href="https://space.bilibili.com/865267">@真·凤舞九天</a> 的<strong>疯狂化学</strong>两期视频<br>当时看得我大受震撼，于是就顺着链接爬到了贴吧</p><p>正好萌凤开始制作DEC（实验室的魔法日常）了，然后就在贴吧上每一期都找到来看<br>逐渐我发现这些视频发布的平台都是一个粉色小网站<br>“那我既然每期都从贴吧翻到哔哩哔哩来看这些视频，那我为什么不直接在这个网站上等待更新呢？”<br>凭着这个想法，我注册了B站</p><h2 id="初入B站"><a href="#初入B站" class="headerlink" title="初入B站"></a>初入B站</h2><p>所以真正带我来B站的，是大萌凤（<br>当时的入站考试还很严格，问题也都很有趣，极大地吸引了我的兴趣<br>起昵称的时候突然想到 <strong>凤舞</strong> 和我名字里的 <strong>鹤翔</strong> 还挺搭配的，所以就顺势补全起了个昵称“<strong>鹤翔万里</strong>”</p><p>刚入B站也只是每周看看更新的DEC<br>然后逐渐逛着逛着就发现了这里深藏着的一堆一堆宝藏，一点一点关注了很多up主</p><p>其中，在某个评论区，看到了有人推荐up主 <a href="https://space.bilibili.com/88461692">@3Blue1Brown</a>，就去看了一看<br>结果也是大受震撼，他可以将一个知识讲得直白易懂、又不缺乏严谨性，更重要的是<strong>动画</strong>也顺滑舒适好看</p><h2 id="初识manim"><a href="#初识manim" class="headerlink" title="初识manim"></a>初识manim</h2><p>在看了3b1b的视频后，就一直非常好奇这样的视频是怎么做的<br>在疑问了很久之后（已经到了初三），我终于看视频简介了（x<br>发现这是使用一个叫做manim的东西制作的<br>百度一搜索，结果搜到了 <a href="https://space.bilibili.com/3557916">@Solara570</a> 的<a href="https://www.bilibili.com/read/cv17444">专栏</a></p><p>一看发现，竟然是编写代码制作的，感觉很神奇<br>而且里面的代码看起来也好好看（其实就是Consolas等宽+普通高亮<br>所以也就很想学着做一做</p><p>所以就打算先跟着教程试着安装一遍，结果果然<br><strong>处 处 碰 壁</strong></p><p>安装什么都会卡住一下，特别是LaTeX，总是出问题，而且很难解决<br>当时正是初三中考复习，而且家里也限制用电脑，所以就只好先放下了<br>但当时就确立了我的一个目标：</p><p>“<strong>我要学会使用manim</strong>”</p><h2 id="踏上编程的不归路"><a href="#踏上编程的不归路" class="headerlink" title="踏上编程的不归路"></a>踏上编程的不归路</h2><p>当时在教程中了解到，这里面的代码是python语言，所以就决定要先放下manim好好学一学python（<del>注入怨念：这恰恰是不少人做不到的，很多零基础的人盲目只是要用manim，然后即使没有python基础也要硬着头皮安装，结果出现了各种问题，而且还到处问</del>）</p><p>在中考完的暑假中，我买了一本《Python编程：从入门到实践》，在极短的假期（因为高中创新班开学早）中不惜推掉部分衔接课程完整地刷了一遍书，甚至还做了一小本笔记<br>也凭借着部分网络资源，我学会了简单的python语法以及有关计算机的很多知识，也觉得这些东西确实挺有意思的<br>这时我又尝试安装了一遍manim，中途的错误少了很多，但还是卡在了安装LaTeX上<br>高中已经开学，所以我又不得不放下了manim</p><p>上了高中，因为是创新班，所以会推荐选择一两门竞赛来学习，为了学到更多的计算机知识，报名了<strong>信息竞赛</strong><br>发到了教材之后我就开始疯狂看，甚至自习晚自习，只要是有空闲时间了就拿出来看，这样一个多月学了C++的基础语法<br>（<del>当时班主任发现了还比较不高兴，要求我一直保持年级前二十，但是很显然这是保持不住的</del>）</p><p>在高一的NOIp2018后，我发现学长们都不太会使用Linux以及bash，而考试的系统还是NOI Linux<br>所以就决定干脆做几个视频放在B站上供大家参考（都是黑历史）<br>就这样，我成为了一名up主</p><p>在超前学了信息竞赛课的内容之后，我开始用那个时间来研究安装manim<br>为了解决LaTeX的报错问题，我试过很多方法，最后使用docker成功安装了环境（为此还花了一段时间了解docker）<br>在做出了第一个带有文字的动画之后很是激动</p><p>这样在2019年寒假的时候我抽了点时间来练习练习manim，制作了我的第一个manim视频<a href="https://www.bilibili.com/video/BV1Eb411r7dJ">「动态规划-01背包问题」</a><br>慢慢的，在每天自习的信息竞赛课上我又学了不少计算机方面的知识<br>当时想要做一个自己的博客，在学markdown时发现数学公式也是用LaTeX写的<br>而且了解到这个东西可以排出很好看的文档，所以就干脆又从零学了LaTeX<br>学了LaTeX之后manim安装就不再出现无法解决的问题了，也就可以顺利安装了</p><p>在高一下高二上，我也是凭着兴趣做了几个视频，从中也逐渐地发掘了manim的一些简单用法，也尝试看了一些manim源码<br>当时还觉得那些源码都还是很远的东西，觉得自己能看懂一部分就很好了</p><p>在2019年年末，我发现了同是使用manim的up主 <a href="https://space.bilibili.com/66806831/">@cigar666</a><br>一段时间后，他建立了manim的交流群，这个群也逐渐地发展壮大<br>在这个群里我也学到了很多知识，教了很多人入坑manim，也认识了好多好多全国各地的朋友</p><p>高二的寒假，我计划做了FFT算法那期视频，在那期间，我非常活跃地在群里回答各种问题<br>有一次我给出了一个很复杂的解决办法，而manim源码中其实是有轮子的<br>这时S570说了一句“还是源码看的不够”，我也就从此提高了目标：</p><p>“<strong>我要看懂manim源码</strong>”</p><h2 id="成立MK"><a href="#成立MK" class="headerlink" title="成立MK"></a>成立MK</h2><p>高二的寒假，疫情突如其来，假期也随之延长<br>而当时大部分人也都在假期中，为了更好地交流代码，我在GitHub上建立了组织，并且投票选举出了名称manim-kindergarten<br>之后在群友的合作之下又进行了很多资料的完善<br>为了方便回复一些常见的问题，我也编写了《manim常见问题》这个文档，在一年多的完善后，它已经迭代到了3.1版本</p><p>同时我也顺势做了很多比较短的视频，参加了一些活动，也被妈咪叔转发了，获得了不少粉丝，也拿到了知识领域优质up主的认证<br>而且MK内部也组织了几次联合投稿，共同完成了一些视频<br>其中我们突发奇想，尝试了使用manim来制作manim教程，结果还蛮不错<br>所以我也就单独在这个系列下完成了几个视频</p><p>在制作这个视频时，我也在逐渐深入地阅读源码，感觉没有那么晦涩难懂，代码思路还是很清晰<br>正好有MK成员开了一个文档的repo来汇总一些网上的文档，我也就正好把里面的内容归纳归纳，保留了一些有价值的内容，也补充了部分中文的文档字符串，就这样完成了一大半<a href="https://docs.manim.org.cn/">中文文档</a></p><p>疫情期间，我也加入了manim的discord频道，在里面也帮助了很多人解决了manim上的问题<br>我发现discord上manim channel的管理员是eulertour，而且他在GitHub上也是manim的collaborator，同时还做了很多项目<br>当时就在mk的QQ群里表达了一下对他的仰慕，然后就有一个群友说了句：</p><p>“其实你也可以”</p><h2 id="成为合作者"><a href="#成为合作者" class="headerlink" title="成为合作者"></a>成为合作者</h2><p>疫情期间在学校机房脱产的时候也经常会读一读manim，还顺便把一直容易出现的Text问题修复了一下<br>当时Grant正在开发基于OpenGL的manim，所以这些pull request一直是eulertour来merge的，但是在他加入了ManimCommunity之后就已经打算将3b1b/manim荒废掉，很少来管issue和pr，甚至有用的pr也只会让交到ManimCommunity里<br>但是我觉得这比较不好，毕竟还有很多人正在使用3b1b/manim，所以我就在暑假的时候抱着试一试的心态给Grant写了一封信来申请3b1b/manim存储库上的权限</p><p>结果几天后Grant真的回复了，他同意给我manim上的write权限，但是要先和eulertour沟通一下<br>几个月后的十一假期，我收到了Grant发来的成为collaborator的邀请（<del>其实中间一直没有回复是因为我的邮件跑到了Grant的垃圾信箱里</del>）</p><p>在成为collaborator后，我merge了一些有用的pull request，关掉了一些没用的/已解决的/老旧的issue<br>同时我也大致了解了新ManimGL的大致逻辑，也向Grant提了好几项改进的建议，他也采纳了很多部分</p><p>在开学了之后，为了复习高考，也基本放下了manim上的活动（还收到了来自Grant的祝福）<br>在2021年寒假，又因为疫情上了一段时间网课，我也又抽时间来玩一玩manim了<br>那时ManimGL已经基本完工，在一些准备之后，shaders分支被合并到了master分支成为了正式版本<br>我也为之写了全新的中英文文档（虽然还是很不完善）<br>在那之后我也对manim做了一些改善，关闭了一些过时的pull request，打开了disscussion，发布新的python包等等</p><p>嗯，然后就是开学-&gt;复习-&gt;高考</p><p>高考发挥的还算比较好，成功进入了ZJU-Turing<br>为了更好地汇总信息，在假期里我又为mk写了官方网站：<a href="https://manim.org.cn/">manim.org.cn</a><br>然后就是开学到现在了</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>是manim在一步一步推动着我前进<br>从想要用manim到想要看懂源码到想要为它做出点贡献<br>从一个什么都不会的初中生变成了manim的collaborator<br>这仅仅是三年啊（</p><p>所以，那么接下来继续努力吧</p><p><del>写的太水了，反正就随便写写，想到哪写到哪了，没想到你还真的看到这了_(:з」∠)_</del></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近刚到大学报到完，恰巧有些闲暇时间&lt;br&gt;闲来无事，来记录一下自己与一步一步推动我走到现在的manim之间的故事（&lt;del&gt;指流水账&lt;/del&gt;&lt;br&gt;这篇虽然叫「与manim之间的往事」，但是里面很多都和manim无关（逃&lt;/p&gt;
&lt;h2 id=&quot;一切的起点&quot;&gt;&lt;a href=&quot;#一切的起点&quot; class=&quot;headerlink&quot; title=&quot;一切的起点&quot;&gt;&lt;/a&gt;一切的起点&lt;/h2&gt;</summary>
    
    
    
    <category term="生活" scheme="https://blog.tonycrane.cc/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="随笔" scheme="https://blog.tonycrane.cc/tags/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="生活" scheme="https://blog.tonycrane.cc/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>「Learn LambdaCalculus」#0</title>
    <link href="https://blog.tonycrane.cc/p/92a6fc79.html"/>
    <id>https://blog.tonycrane.cc/p/92a6fc79.html</id>
    <published>2021-08-04T13:55:24.000Z</published>
    <updated>2021-08-23T13:41:09.725Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前段时间，GZTime也跟我聊过一些关于lambda演算的东西<br>学Haskell的时候也总是能听说这个东西<br>看起来挺有意思，来学学_(:з」∠)_</p><span id="more"></span><p>那我也引用GZTime引用的知乎同学的一句话：</p><blockquote><p>在介绍λ演算之前，我们需要放空一下我们的大脑，忘掉C语言，忘掉冯·诺伊曼机，忘掉图灵机，甚至要忘掉0和1，加和减。我们来到一个只有符号的世界。在这个新的世界里，只需要几条简单的定义和规则，便可以构造出与图灵机完全等价的计算模型，即它是图灵完全（Turing Complete）的。和图灵机一样，这个计算模型可以解决任何一个可以机械计算的问题；与图灵机倾向于硬件实现不同，它更倾向于逻辑的推理。它就是λ演算（Lambda演算）。</p></blockquote><h2 id="lambda-term"><a href="#lambda-term" class="headerlink" title="lambda term"></a>lambda term</h2><p>一个合法的lambda表达式又被称为lambda项（lambda term），以下三个规律归纳性地定义了一个合法的lambda项：</p><ul><li><strong>Variable</strong>：一个变量 x 本身也是一个合法的lambda项</li><li><strong>Abstraction</strong>：如果 M 是一个合法的lambda项，x 是一个变量，那么 (λx.M) 也是一个合法的lambda项（这相当于定义了一个 x -&gt; M 的函数）</li><li><strong>Application</strong>：如果 M 和 N 都是合法lambda项，那么 (M N) 也是一个合法lambda项</li></ul><p>lambda表达式的组成有变量、抽象符号λ和一个点.、括号</p><p>所有lambda项构成$\Lambda$空间，通过上述合法lambda项的定义，$\Lambda$空间的正式定义是：</p><ul><li>如果$x$是一个变量，那么$x\in\Lambda$</li><li>如果$x$是一个变量且$M\in\Lambda$，那么$(\lambda x.M)\in\Lambda$</li><li>如果$M, N\in\Lambda$，那么$(M\ N)\in\Lambda$</li></ul><h3 id="notation"><a href="#notation" class="headerlink" title="notation"></a>notation</h3><p>为了使lambda表达式的记法更清晰，可以有以下简化：</p><ul><li>一个lambda项最外侧的括号可以省略。比如 (M N) 可以写成 M N </li><li>应用是左结合的。比如 M N P 表示的实际是 ((M N) P)<br>  这和Haskell中函数左结合是一样的</li><li>抽象是尽可能向右延伸的。比如 λx.M N 实际上表示的是 λx.(M N) 而不是 (λ. M) N<br>  这和Haskell中lambda表达式向右一直延伸是一致的，因此一般要为lambda表达式加上括号</li><li>嵌套的多个lambda表达式可以缩写成类似多元函数的样子。比如 λx.λy.λz.M 就可以缩写成 λxyz.M</li></ul><h3 id="Free-amp-bound-variables"><a href="#Free-amp-bound-variables" class="headerlink" title="Free &amp; bound variables"></a>Free &amp; bound variables</h3><p>在一个lambda表达式中，也有自由变量（free variables）和约束变量（bound variables）的概念。</p><p>在lambda项 λx.M 中，λx被称为binder，它将输入的x与M中的变量x绑定在一起，这时x就是约束变量，而其它的所有变量都是自由变量。</p><p>&emsp;比如在表达式 λx.x+y 中，x就是约束变量，y是自由变量。</p><p>对于一个lambda项M的自由变量构成的集合FV(M)，也有一些规律需要满足：</p><ul><li>如果 x 是一个变量，那么 FV(x) = {x} </li><li>FV(λx.M) = FV(M) \ {x} （M中除去x之外的变量都是自由变量）</li><li>FV(M N) = FV(M) ∪ FV(N) （M应用在N上得到的lambda项的自由变量是MN两个lambda项的自由变量的并集）</li></ul><h3 id="Substitution"><a href="#Substitution" class="headerlink" title="Substitution"></a>Substitution</h3><p>lambda项也有一种记法叫做替换（substitution），记法 t[x:=r] 表示将lambda项t中的自由变量x都替换成r。它满足以下规律：</p><ul><li>x[x:=r]=r （一个变量就是自由变量，将其替换成r就变为r）</li><li>y[x:=r]=y if x!=y （如果x和y不相等，那么）</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前段时间，GZTime也跟我聊过一些关于lambda演算的东西&lt;br&gt;学Haskell的时候也总是能听说这个东西&lt;br&gt;看起来挺有意思，来学学_(:з」∠)_&lt;/p&gt;</summary>
    
    
    
    
    <category term="Haskell" scheme="https://blog.tonycrane.cc/tags/Haskell/"/>
    
    <category term="笔记" scheme="https://blog.tonycrane.cc/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>「Learn Rust」#0 总章</title>
    <link href="https://blog.tonycrane.cc/p/db45bee5.html"/>
    <id>https://blog.tonycrane.cc/p/db45bee5.html</id>
    <published>2021-08-03T15:08:28.000Z</published>
    <updated>2021-08-23T13:24:46.257Z</updated>
    
    <content type="html"><![CDATA[<p style="text-align: center;">学习一门新语言之Haskell</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Haskell学的差不多了，也没啥事想干了<br>GZTime之前也跟我推荐过Rust挺好玩的<br>这几天看一看<br>一样，没有教程，只是我的笔记而已</p><span id="more"></span><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Mac上安装只需要安装rustup即可：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl --proto <span class="string">&#x27;=https&#x27;</span> --tlsv1.2 https://sh.rustup.rs -sSf | sh</span><br></pre></td></tr></table></figure><p>然后更新、卸载、检查：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ rustup update</span><br><span class="line">$ rustup self uninstall</span><br><span class="line">$ rustc --version</span><br></pre></td></tr></table></figure><p>Rust代码的后缀名是<code>.rs</code>，通过<code>rustc code.rs</code>来编译出二进制文件<code>code</code>再运行</p><h2 id="Cargo"><a href="#Cargo" class="headerlink" title="Cargo"></a>Cargo</h2><p>通过rustup安装后自带cargo，可以通过<code>cargo --version</code>检查</p><p>通过<code>cargo new project_name</code>来新建一个项目，这时会在当前目录下自动生成下面的目录结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">project_name</span><br><span class="line">    ├── .git/</span><br><span class="line">    ├── .gitignore</span><br><span class="line">    ├── Cargo.toml</span><br><span class="line">    └── src</span><br><span class="line">        └── main.rs</span><br></pre></td></tr></table></figure><p>cargo会根据输入的项目名称新建一个文件夹，并且默认使用git进行版本控制（可以使用<code>cargo new ... --vcs none</code>取消版本控制）</p><p>其中main.rs文件中就是一个Hell World程序。Cargo.toml是这个项目的配置文件：</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[package]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;project_name&quot;</span></span><br><span class="line"><span class="attr">version</span> = <span class="string">&quot;0.1.0&quot;</span></span><br><span class="line"><span class="attr">edition</span> = <span class="string">&quot;2018&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html</span></span><br><span class="line"></span><br><span class="line"><span class="section">[dependencies]</span></span><br></pre></td></tr></table></figure><h3 id="构建、运行、发布"><a href="#构建、运行、发布" class="headerlink" title="构建、运行、发布"></a>构建、运行、发布</h3><ul><li>使用<code>cargo build</code>会构建这个项目，并且将可执行文件创建在<code>target/debug/</code>文件夹中</li><li>使用<code>cargo run</code>直接构建并运行这个项目</li><li>使用<code>cargo check</code>检查项目，但不生产可执行文件、也不输出结果</li><li>使用<code>cargo build --release</code>来发布，产生但可执行文件在<code>target/release/</code>文件夹中，不用于直接build，它会进行一些优化来使程序运行地更快</li></ul><h2 id="常见编程概念"><a href="#常见编程概念" class="headerlink" title="常见编程概念"></a>常见编程概念</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p><code>let</code>语句会创建一个变量，但是默认都是不可变的（immutable）。即一旦使用let创建一个变量并为其赋值，那这个变量将不允许被改动，如果在代码中改动了这个变量，那么将不会通过编译</p><p>但是可以再使用let语句来创建一个同名变量：</p><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> x = x + <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>这时，原来的x就被隐藏（shadowing）了（这种方式的前后两个x本质上还是两个变量，它们允许有着不同的数据类型）</p><p>在let后面加上mut也可以创建一个可变的变量：</p><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> x = <span class="number">1</span>;</span><br><span class="line">x = x + <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>但这时x不能更改数据类型</p><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>常量不同于变量，它一定是不可变的。常量通过<code>const</code>关键字创建，而且需要明确指定数据类型（Rust常量命名规范是用全大写）：</p><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MAX_POINT: <span class="built_in">u32</span> = <span class="number">100_000</span>;</span><br></pre></td></tr></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>Rust是静态类型语言，编译器需要在编译时得到所有变量的类型，但是也可以自动推测类型。</p><p>Rust中的类型分为两种，标量（scalar）和复合（compound）</p><h4 id="scalar"><a href="#scalar" class="headerlink" title="scalar"></a>scalar</h4><p><strong>整型</strong>：</p><table><thead><tr><th align="center">长度</th><th align="center">有符号</th><th align="center">无符号</th></tr></thead><tbody><tr><td align="center">8-bit</td><td align="center">i8</td><td align="center">u8</td></tr><tr><td align="center">16-bit</td><td align="center">i16</td><td align="center">u16</td></tr><tr><td align="center">32-bit</td><td align="center">i32</td><td align="center">u32</td></tr><tr><td align="center">64-bit</td><td align="center">i64</td><td align="center">u64</td></tr><tr><td align="center">128-bit</td><td align="center">i128</td><td align="center">u128</td></tr><tr><td align="center">arch</td><td align="center">isize</td><td align="center">usize</td></tr></tbody></table><p><code>isize</code>和<code>usize</code>是根据系统而定（32/64）</p><p>同时整型的值也可以用不同进制表示（十六进制<code>0x</code>开头，八进制<code>0o</code>开头，二进制<code>0b</code>开头，单字节字符<code>b</code>开头（b’A’）），在数值中间也可以增加<code>_</code>来增强可读性，在数值结尾也可以加上类型后缀来明确类型</p><p><strong>浮点型</strong>：<br>单精度浮点<code>f32</code>，双精度浮点<code>f64</code></p><p><strong>布尔型</strong>：<br><code>bool</code>，值是小写<code>true/false</code></p><p><strong>字符型</strong>：<br><code>char</code>，四字节（使用unicode）。字符是单引号而字符串是双引号</p><h4 id="compound"><a href="#compound" class="headerlink" title="compound"></a>compound</h4><p><strong>元组</strong>：<br>元素类型可以不同，但是整个元组的类型和各个元素的类型都有关，例如：</p><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> tup: (<span class="built_in">i32</span>, <span class="built_in">f64</span>, <span class="built_in">u8</span>) = (<span class="number">500</span>, <span class="number">6.4</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>可以通过<code>.</code>加索引来访问元素：</p><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = tup.<span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>列表</strong>：<br>不同于Python/Haskell，Rust中的列表的长度也是不可变的，而且列表中的所有元素的类型也必须一致。含有五个i32类型的元素的列表的类型就可以写成<code>[i32; 5]</code></p><p>同时<code>[3; 5]</code>这种写法也等价于<code>[3, 3, 3, 3, 3]</code></p><p>可以通过<code>[index]</code>来访问元素，如<code>lst[1]</code>。但如果索引超出列表元素个数，那么编译将不会报错，但运行时会报错</p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>通过<code>fn</code>关键字来定义函数，参数的类型必须指定，如果有返回值，返回值的类型也要在()后面用-&gt; type指定。返回值可以在函数中途直接return返回，也可以在函数结尾直接写出要返回的值（不加分号，此时是表达式而不是语句），比如：</p><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">plus_one</span></span>(x: <span class="built_in">i32</span>) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">    x + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样，用{}括上的代码块也是一个表达式，它也可以有返回值：</p><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> y = &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">3</span>;</span><br><span class="line">    x + <span class="number">1</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h3><h4 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h4><p>常规的if语句，比如：</p><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> a == <span class="number">1</span> &#123;</span><br><span class="line">    ...;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> a == <span class="number">2</span> &#123;</span><br><span class="line">    ...;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ...;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不同于Haskell，它可以没有else只有if</p><p>if语句也可以用在let上，这时{}中要是一个表达式而不是语句，即不带分号：</p><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> number = <span class="keyword">if</span> condition &#123;</span><br><span class="line">    <span class="number">5</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="number">6</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><p><strong>loop</strong>：<br>使用loop会将块一直循环直到遇到break，也可以从loop循环返回值，比如：</p><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = <span class="keyword">loop</span> &#123;</span><br><span class="line">    counter += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> counter == <span class="number">10</span> &#123;</span><br><span class="line">        <span class="keyword">break</span> counter * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>while</strong>：</p><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> condition &#123;</span><br><span class="line">    ...;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>for</strong>：</p><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> lst.iter() &#123;</span><br><span class="line">    ...;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="所有权"><a href="#所有权" class="headerlink" title="所有权"></a>所有权</h2><p>鸽了，明天再写</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://kaisery.github.io/trpl-zh-cn">Rust程序设计语言 简体中文版</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p style=&quot;text-align: center;&quot;&gt;学习一门新语言之Haskell&lt;/p&gt;

&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Haskell学的差不多了，也没啥事想干了&lt;br&gt;GZTime之前也跟我推荐过Rust挺好玩的&lt;br&gt;这几天看一看&lt;br&gt;一样，没有教程，只是我的笔记而已&lt;/p&gt;</summary>
    
    
    
    
    <category term="笔记" scheme="https://blog.tonycrane.cc/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Rust" scheme="https://blog.tonycrane.cc/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>「Learn Haskell」#7 一些其它类型类</title>
    <link href="https://blog.tonycrane.cc/p/68ef8146.html"/>
    <id>https://blog.tonycrane.cc/p/68ef8146.html</id>
    <published>2021-07-25T04:46:38.000Z</published>
    <updated>2021-07-25T04:54:13.884Z</updated>
    
    <content type="html"><![CDATA[<div style="display: flex; justify-content: space-between;"><p><a href="/p/d4bb2633.html">&lt; #6</a></p><p><a href="/p/96c32eae.html">#A &gt;</a></p></div><h2 id="Foldable"><a href="#Foldable" class="headerlink" title="Foldable"></a>Foldable</h2><p>Foldable是表示可以折叠（fold）的类型类，在<code>Data.Foldable</code>中定义，这使得和fold相关的函数可以用在任意Foldable的实例类型上。它的定义是：</p><span id="more"></span><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Foldable</span> t <span class="keyword">where</span></span></span><br><span class="line">    fold     :: <span class="type">Monoid</span> m =&gt; t m -&gt; m</span><br><span class="line">    foldMap  :: <span class="type">Monoid</span> m =&gt; (a -&gt; m) -&gt; t a -&gt; m</span><br><span class="line">    foldMap&#x27; :: <span class="type">Monoid</span> m =&gt; (a -&gt; m) -&gt; t a -&gt; m</span><br><span class="line">    foldr    :: (a -&gt; b -&gt; b) -&gt; b -&gt; t a -&gt; b</span><br><span class="line">    foldr&#x27;   :: (a -&gt; b -&gt; b) -&gt; b -&gt; t a -&gt; b</span><br><span class="line">    foldl    :: (b -&gt; a -&gt; b) -&gt; b -&gt; t a -&gt; b</span><br><span class="line">    foldl&#x27;   :: (b -&gt; a -&gt; b) -&gt; b -&gt; t a -&gt; b</span><br><span class="line">    foldr1   :: (a -&gt; a -&gt; a) -&gt; t a -&gt; a</span><br><span class="line">    foldl1   :: (a -&gt; a -&gt; a) -&gt; t a -&gt; a</span><br><span class="line">    toList   :: t a -&gt; [a]</span><br><span class="line">    null     :: t a -&gt; <span class="type">Bool</span></span><br><span class="line">    length   :: t a -&gt; <span class="type">Int</span></span><br><span class="line">    elem     :: <span class="type">Eq</span> a =&gt; a -&gt; t a -&gt; <span class="type">Bool</span></span><br><span class="line">    maximum  :: <span class="type">Ord</span> a =&gt; t a -&gt; a</span><br><span class="line">    minimum  :: <span class="type">Ord</span> a =&gt; t a -&gt; a</span><br><span class="line">    sum      :: <span class="type">Num</span> a =&gt; t a -&gt; a</span><br><span class="line">    product  :: <span class="type">Num</span> a =&gt; t a -&gt; a</span><br><span class="line">    <span class="meta">&#123;-# MINIMAL foldMap | foldr #-&#125;</span></span><br></pre></td></tr></table></figure><p>最少只要实现<code>foldr</code>和<code>foldMap</code>其中之一就可以使一个类型成为Foldable的实例，其它的函数都有由这两个函数提供的默认实现，而且这两个函数之间也有相互实现。因此只要实现foldr或foldMap一个函数就可以使用所有其它Foldable中的函数。foldr函数在前面已经有学过，foldMap的例子是：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; foldMap <span class="type">Sum</span> [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line"><span class="type">Sum</span> &#123;getSum = <span class="number">9</span>&#125;</span><br><span class="line"><span class="title">ghci</span>&gt; foldMap <span class="type">Product</span> [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line"><span class="type">Product</span> &#123;getProduct = <span class="number">15</span>&#125;</span><br><span class="line"><span class="title">ghci</span>&gt; foldMap (replicate <span class="number">3</span>) [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure><h3 id="Foldable实例"><a href="#Foldable实例" class="headerlink" title="Foldable实例"></a>Foldable实例</h3><p>[]、Maybe、Either a、(,) a都是Foldable的实例，标准容器库中的Map、Set等也都是Foldable的实例。也可以自定义二叉树类型，并使其成为Foldable的实例：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">Tree</span> a = <span class="type">Empty</span> | <span class="type">Leaf</span> a | <span class="type">Node</span> (<span class="type">Tree</span> <span class="title">a</span>) a (<span class="type">Tree</span> <span class="title">a</span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Foldable</span> <span class="type">Tree</span> <span class="keyword">where</span></span> </span><br><span class="line">    foldMap :: <span class="type">Monoid</span> m =&gt; (a -&gt; m) -&gt; <span class="type">Tree</span> a -&gt; m</span><br><span class="line">    foldMap f <span class="type">Empty</span>        = mempty</span><br><span class="line">    foldMap f (<span class="type">Leaf</span> x)     = f x</span><br><span class="line">    foldMap f (<span class="type">Node</span> l k r) = foldMap f l `mappend` f k `mappend` foldMap f r</span><br></pre></td></tr></table></figure><h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><ul><li><code>asum</code> :: (Alternative f, Foldable t) =&gt; t (f a) -&gt; f a，用&lt;|&gt;逐个连接所有元素</li><li><code>sequenceA_</code> :: (Applicative f, Foldable t) =&gt; t (f a) -&gt; f ()，由于丢弃结果，所以Foldable t就可以满足；因此不同于sequenceA需要Traversable</li><li><code>traverse_</code> :: (Applicative f, Foldable t) =&gt; (a -&gt; f b) -&gt; t a -&gt; f ()</li><li><code>for_</code> :: (Applicative f, Foldable t) =&gt; t a -&gt; (a -&gt; f b) -&gt; f ()</li></ul><h2 id="Traversable"><a href="#Traversable" class="headerlink" title="Traversable"></a>Traversable</h2><p>Traversable是表示可遍历的类型类，在<code>Data.Traversable</code>模块中定义，它是Foldable的升级版，同时也是一个Functor，它的定义是：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> (<span class="type">Functor</span> <span class="title">t</span>, <span class="type">Foldable</span> <span class="title">t</span>) =&gt; <span class="type">Traversable</span> t <span class="keyword">where</span></span> </span><br><span class="line">    traverse  :: <span class="type">Applicative</span> f =&gt; (a -&gt; f b) -&gt; t a -&gt; f (t b)</span><br><span class="line">    sequenceA :: <span class="type">Applicative</span> f =&gt; t (f a) -&gt; f (t a)</span><br><span class="line">    mapM      ::       <span class="type">Monad</span> m =&gt; (a -&gt; m b) -&gt; t a -&gt; m (t b)</span><br><span class="line">    sequence  ::       <span class="type">Monad</span> m =&gt; t (m a) -&gt; m (t a)</span><br><span class="line">    <span class="meta">&#123;-# MINIMAL traverse | sequenceA #-&#125;</span></span><br></pre></td></tr></table></figure><p>最少只需要实现traverse函数或者sequenceA函数。其中各个函数的功能通过类型签名也都能推测出来。但是其中mapM就是traverse，sequence就是sequenceA，它们存在只是历史遗留（</p><h3 id="Traversable实例"><a href="#Traversable实例" class="headerlink" title="Traversable实例"></a>Traversable实例</h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Traversable</span> <span class="type">Maybe</span> <span class="keyword">where</span></span></span><br><span class="line">    traverse _ <span class="type">Nothing</span> = pure <span class="type">Nothing</span></span><br><span class="line">    traverse f (<span class="type">Just</span> x) = <span class="type">Just</span> &lt;$&gt; f x</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Traversable</span> [] <span class="keyword">where</span></span></span><br><span class="line">    <span class="meta">&#123;-# INLINE traverse #-&#125;</span></span><br><span class="line">    traverse f = foldr cons_f (pure [])</span><br><span class="line">      <span class="keyword">where</span> cons_f x ys = liftA2 (:) (f x) ys</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Traversable</span> (<span class="type">Either</span> <span class="title">a</span>) <span class="keyword">where</span></span></span><br><span class="line">    traverse _ (<span class="type">Left</span> x) = pure (<span class="type">Left</span> x)</span><br><span class="line">    traverse f (<span class="type">Right</span> y) = <span class="type">Right</span> &lt;$&gt; f y</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Traversable</span> ((,) a) <span class="keyword">where</span></span></span><br><span class="line">    traverse f (x, y) = (,) x &lt;$&gt; f y</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>上面的Tree也可以成为Traversable的实例：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Functor</span> <span class="type">Tree</span> <span class="keyword">where</span></span></span><br><span class="line">    fmap :: (a -&gt; b) -&gt; <span class="type">Tree</span> a -&gt; <span class="type">Tree</span> b</span><br><span class="line">    fmap     g <span class="type">Empty</span>        = <span class="type">Empty</span></span><br><span class="line">    fmap     g (<span class="type">Leaf</span> x)     = <span class="type">Leaf</span> $ g x</span><br><span class="line">    fmap     g (<span class="type">Node</span> l x r) = <span class="type">Node</span> (fmap g l)</span><br><span class="line">                                   (g x)</span><br><span class="line">                                   (fmap g r)</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Traversable</span> <span class="type">Tree</span> <span class="keyword">where</span></span></span><br><span class="line">    traverse :: <span class="type">Applicative</span> f =&gt; (a -&gt; f b) -&gt; <span class="type">Tree</span> a -&gt; f (<span class="type">Tree</span> b) </span><br><span class="line">    traverse g <span class="type">Empty</span>        = pure <span class="type">Empty</span></span><br><span class="line">    traverse g (<span class="type">Leaf</span> x)     = <span class="type">Leaf</span> &lt;$&gt; g x</span><br><span class="line">    traverse g (<span class="type">Node</span> l x r) = <span class="type">Node</span> &lt;$&gt; traverse g l</span><br><span class="line">                                   &lt;*&gt; g x</span><br><span class="line">                                   &lt;*&gt; traverse g r</span><br></pre></td></tr></table></figure><h3 id="Traversable-Laws"><a href="#Traversable-Laws" class="headerlink" title="Traversable Laws"></a>Traversable Laws</h3><p>Traversable也有两条定律：</p><ol><li>traverse Identity <code>=</code> Identity</li><li>traverse (Compose . fmap g . f) <code>=</code> Compose . fmap (traverse g) . traverse f </li></ol><p>其中Identity和Compose分别定义在<code>Data.Functor.Identity</code>和<code>Data.Functor.Compose</code>两个模块中：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">newtype</span> <span class="type">Identity</span> a = <span class="type">Identity</span> &#123; <span class="title">runIdentity</span> :: <span class="title">a</span> &#125; <span class="keyword">deriving</span> (...)</span></span><br><span class="line"><span class="class"><span class="keyword">newtype</span> <span class="type">Compose</span> f g a = <span class="type">Compose</span> &#123; <span class="title">getCompose</span> :: <span class="title">f</span> (<span class="title">g</span> <span class="title">a</span>) &#125; <span class="keyword">deriving</span> (...)</span></span><br></pre></td></tr></table></figure><h2 id="Bifunctor"><a href="#Bifunctor" class="headerlink" title="Bifunctor"></a>Bifunctor</h2><p>Functor的实例的kind都是* -&gt; *，因此fmap只能将一个函数映射到一个值上。而Bifunctor（在<code>Data.Bifunctor</code>模块中定义）的实例的kind是* -&gt; * -&gt; *，而且它的bimap可以同时将两个函数映射到两个值上：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Bifunctor</span> p <span class="keyword">where</span></span> </span><br><span class="line">    bimap  :: (a -&gt; b) -&gt; (c -&gt; d) -&gt; p a c -&gt; p b d </span><br><span class="line">    first  :: (a -&gt; b) -&gt; p a c -&gt; p b c </span><br><span class="line">    second :: (b -&gt; c) -&gt; p a b -&gt; p a c </span><br><span class="line">    <span class="meta">&#123;-# MINIMAL bimap | first, second #-&#125;</span></span><br></pre></td></tr></table></figure><p>同时bimap和first,second之间也可以相互转换：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">bimap</span> f g = first f . second g</span><br><span class="line"></span><br><span class="line"><span class="title">first</span>  f = bimap f id</span><br><span class="line"><span class="title">second</span> g = bimap id g</span><br></pre></td></tr></table></figure><p>对于Functor，((,) e)和Either e才是Functor的实例，因为他们是* -&gt; *。但是对于Bifunctor，(,)和Either就是Bifunctor的实例：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; bimap (+<span class="number">1</span>) length (<span class="number">4</span>, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">(<span class="number">5</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h3 id="Bifunctor-Laws"><a href="#Bifunctor-Laws" class="headerlink" title="Bifunctor Laws"></a>Bifunctor Laws</h3><ol><li>bimap id id <code>=</code> id<br> first id <code>=</code> id<br> second id <code>=</code> id</li><li>bimap (f . g) (h . i) <code>=</code> bimap f h . bimap g i<br> first  (f . g) <code>=</code> first f  . first g<br> second (f . g) <code>=</code> second f . second g</li></ol><h2 id="Category"><a href="#Category" class="headerlink" title="Category"></a>Category</h2><p>Haskell中的Category将一般的函数推广到了普遍的态射上，它在<code>Control.Category</code>模块中，定义是：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Category</span> cat <span class="keyword">where</span></span> </span><br><span class="line">    id  :: cat a a </span><br><span class="line">    (.) :: cat b c -&gt; cat a b -&gt; cat a c</span><br></pre></td></tr></table></figure><p>它的实例有<code>(-&gt;)</code>和<code>Kleisli m</code>：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Category</span> (-&gt;) <span class="keyword">where</span></span></span><br><span class="line">    id = <span class="type">GHC</span>.<span class="type">Base</span>.id</span><br><span class="line">    (.) = (<span class="type">GHC</span>.<span class="type">Base</span>..)</span><br></pre></td></tr></table></figure><p>Kleisli是一个范畴，用来表示函数a -&gt; m b，Haskell中，它在<code>Control.Arrow</code>模块中定义：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">newtype</span> <span class="type">Kleisli</span> m a b = <span class="type">Kleisli</span> &#123; <span class="title">runKleisli</span> :: <span class="title">a</span> -&gt; <span class="title">m</span> <span class="title">b</span> &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Monad</span> m =&gt; <span class="type">Category</span> (<span class="type">Kleisli</span> <span class="title">m</span>) <span class="keyword">where</span></span></span><br><span class="line">    id :: <span class="type">Kleisli</span> m a a</span><br><span class="line">    id = <span class="type">Kleisli</span> return</span><br><span class="line"></span><br><span class="line">    (.) :: <span class="type">Kleisli</span> m b c -&gt; <span class="type">Kleisli</span> m a b -&gt; <span class="type">Kleisli</span> m a c</span><br><span class="line">    <span class="type">Kleisli</span> g . <span class="type">Kleisli</span> h = <span class="type">Kleisli</span> (h &gt;=&gt; g)</span><br></pre></td></tr></table></figure><p>Category要满足的定律只有id是(.)操作的单位元，以及(.)操作是可结合的</p><p>同时Category还提供了两个函数<code>&lt;&lt;&lt;</code>和<code>&gt;&gt;&gt;</code>：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(&lt;&lt;&lt;) :: <span class="type">Category</span> cat =&gt; cat b c -&gt; cat a b -&gt; cat a c</span><br><span class="line">(&lt;&lt;&lt;) = (.)</span><br><span class="line"></span><br><span class="line">(&gt;&gt;&gt;) :: <span class="type">Category</span> cat =&gt; cat a b -&gt; cat b c -&gt; cat a c </span><br><span class="line"><span class="title">f</span> &gt;&gt;&gt; g = g . f </span><br></pre></td></tr></table></figure><h2 id="Arrow"><a href="#Arrow" class="headerlink" title="Arrow"></a>Arrow</h2><p>Arrow将函数进一步抽象化，它定义在<code>Control.Arrow</code>模块中：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Category</span> a =&gt; <span class="type">Arrow</span> a <span class="keyword">where</span></span> </span><br><span class="line">    arr    :: (b -&gt; c) -&gt; a b c </span><br><span class="line">    first  :: a b c -&gt; a (b, d) (c, d)</span><br><span class="line">    second :: a b c -&gt; a (d, b) (d, c)</span><br><span class="line">    (***)  :: a b c -&gt; a b&#x27; c&#x27; -&gt; a (b, b&#x27;) (c, c&#x27;)</span><br><span class="line">    (&amp;&amp;&amp;)  :: a b c -&gt; a b c&#x27; -&gt; a b (c, c&#x27;)</span><br><span class="line">    <span class="meta">&#123;-# MINIMAL arr, (first | (***)) #-&#125;</span></span><br></pre></td></tr></table></figure><p>其中：</p><ul><li><code>arr</code>函数将一个函数变成一个Arrow</li><li><code>first</code>函数将一个Arrow变成一个二元组间的Arrow，且只会对一个元素进行操作，第二个元素保持不变</li><li><code>second</code>函数与first相反，第一个元素保持不变</li><li><code>***</code>函数是Arrow之间的parallel composition，对于函数: (g *** h) (x, y) = (g x, h y)</li><li><code>&amp;&amp;&amp;</code>函数是Arrow之间的fanout composition，对于函数: (g &amp;&amp;&amp; h) x = (g x, h x)</li></ul><p>它的实例也有(-&gt;)和Kleisli：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Arrow</span> (-&gt;) <span class="keyword">where</span></span></span><br><span class="line">  arr :: (b -&gt; c) -&gt; (b -&gt; c)</span><br><span class="line">  arr g = g</span><br><span class="line"></span><br><span class="line">  first :: (b -&gt; c) -&gt; ((b,d) -&gt; (c,d))</span><br><span class="line">  first g (x,y) = (g x, y)</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Monad</span> m =&gt; <span class="type">Arrow</span> (<span class="type">Kleisli</span> <span class="title">m</span>) <span class="keyword">where</span></span></span><br><span class="line">  arr :: (b -&gt; c) -&gt; <span class="type">Kleisli</span> m b c</span><br><span class="line">  arr f = <span class="type">Kleisli</span> (return . f)</span><br><span class="line"></span><br><span class="line">  first :: <span class="type">Kleisli</span> m b c -&gt; <span class="type">Kleisli</span> m (b,d) (c,d)</span><br><span class="line">  first (<span class="type">Kleisli</span> f) = <span class="type">Kleisli</span> (\ ~(b,d) -&gt; <span class="keyword">do</span> c &lt;- f b</span><br><span class="line">                                              return (c,d) )</span><br></pre></td></tr></table></figure><p>常用函数：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">returnA</span> :: <span class="type">Arrow</span> a =&gt; a b b</span><br><span class="line"><span class="title">returnA</span> = arr id</span><br><span class="line"></span><br><span class="line">(^&gt;&gt;) :: <span class="type">Arrow</span> a =&gt; (b -&gt; c) -&gt; a c d -&gt; a b d</span><br><span class="line"><span class="title">f</span> ^&gt;&gt; a = arr f &gt;&gt;&gt; a</span><br><span class="line"></span><br><span class="line">(&gt;&gt;^) :: <span class="type">Arrow</span> a =&gt; a b c -&gt; (c -&gt; d) -&gt; a b d</span><br><span class="line"><span class="title">a</span> &gt;&gt;^ f = a &gt;&gt;&gt; arr f</span><br><span class="line"></span><br><span class="line">(&lt;&lt;^) :: <span class="type">Arrow</span> a =&gt; a c d -&gt; (b -&gt; c) -&gt; a b d</span><br><span class="line"><span class="title">a</span> &lt;&lt;^ f = a &lt;&lt;&lt; arr f</span><br><span class="line"></span><br><span class="line">(^&lt;&lt;) :: <span class="type">Arrow</span> a =&gt; (c -&gt; d) -&gt; a b c -&gt; a b d</span><br><span class="line"><span class="title">f</span> ^&lt;&lt; a = arr f &lt;&lt;&lt; a</span><br></pre></td></tr></table></figure><h3 id="Arrow-notation"><a href="#Arrow-notation" class="headerlink" title="Arrow notation"></a>Arrow notation</h3><p>类似do-notation，Arrow也提供了一套方便的语句：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">proc</span> x -&gt; <span class="keyword">do</span> </span><br><span class="line">    y &lt;- action1 -&lt; ... </span><br><span class="line">    z &lt;- action2 -&lt; ...</span><br><span class="line">    returnA -&lt; ...</span><br></pre></td></tr></table></figure><p>其中proc代替了lambda表达式中的斜杠\，-&lt;右边的为输入，左边的为接收输入的函数。比如，下面三种写法达成的效果是一样的：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">f</span> :: <span class="type">Int</span> -&gt; (<span class="type">Int</span>, <span class="type">Int</span>)</span><br><span class="line"><span class="title">f</span> = \x -&gt;</span><br><span class="line">    <span class="keyword">let</span> y  = <span class="number">2</span> * x</span><br><span class="line">        z1 = y + <span class="number">3</span></span><br><span class="line">        z2 = y - <span class="number">5</span></span><br><span class="line">    <span class="keyword">in</span> (z1, z2) </span><br><span class="line"><span class="comment">-- ghci&gt; f 10 </span></span><br><span class="line"><span class="comment">-- (23,15)</span></span><br><span class="line"></span><br><span class="line"><span class="title">fM</span> :: <span class="type">Int</span> -&gt; <span class="type">Identity</span> (<span class="type">Int</span>, <span class="type">Int</span>)</span><br><span class="line"><span class="title">fM</span> = \x -&gt; <span class="keyword">do</span></span><br><span class="line">    y  &lt;- return (<span class="number">2</span> * x)</span><br><span class="line">    z1 &lt;- return (y + <span class="number">3</span>)</span><br><span class="line">    z2 &lt;- return (y - <span class="number">5</span>)</span><br><span class="line">    return (z1, z2)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ghci&gt; runIdentity (fM 10)</span></span><br><span class="line"><span class="comment">-- (23,15)</span></span><br><span class="line"></span><br><span class="line"><span class="title">fA</span> :: <span class="type">Int</span> -&gt; (<span class="type">Int</span>, <span class="type">Int</span>)</span><br><span class="line"><span class="title">fA</span> = <span class="keyword">proc</span> x -&gt; <span class="keyword">do</span></span><br><span class="line">    y  &lt;- (<span class="number">2</span> *) -&lt; x</span><br><span class="line">    z1 &lt;- (+ <span class="number">3</span>) -&lt; y</span><br><span class="line">    z2 &lt;- (subtract <span class="number">5</span>) -&lt; y</span><br><span class="line">    returnA -&lt; (z1, z2)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ghci&gt; fA 10</span></span><br><span class="line"><span class="comment">-- (23,15)</span></span><br></pre></td></tr></table></figure><h3 id="ArrowChoice"><a href="#ArrowChoice" class="headerlink" title="ArrowChoice"></a>ArrowChoice</h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Arrow</span> a =&gt; <span class="type">ArrowChoice</span> a <span class="keyword">where</span></span></span><br><span class="line">    left :: a b c -&gt; a (<span class="type">Either</span> b d) (<span class="type">Either</span> c d)</span><br><span class="line">    left = (+++ id)</span><br><span class="line"></span><br><span class="line">    right :: a b c -&gt; a (<span class="type">Either</span> d b) (<span class="type">Either</span> d c)</span><br><span class="line">    right = (id +++)</span><br><span class="line"></span><br><span class="line">    (+++) :: a b c -&gt; a b&#x27; c&#x27; -&gt; a (<span class="type">Either</span> b b&#x27;) (<span class="type">Either</span> c c&#x27;)</span><br><span class="line">    f +++ g = left f &gt;&gt;&gt; arr mirror &gt;&gt;&gt; left g &gt;&gt;&gt; arr mirror</span><br><span class="line">      <span class="keyword">where</span></span><br><span class="line">        mirror :: <span class="type">Either</span> x y -&gt; <span class="type">Either</span> y x</span><br><span class="line">        mirror (<span class="type">Left</span> x) = <span class="type">Right</span> x</span><br><span class="line">        mirror (<span class="type">Right</span> y) = <span class="type">Left</span> y</span><br><span class="line"></span><br><span class="line">    (|||) :: a b d -&gt; a c d -&gt; a (<span class="type">Either</span> b c) d</span><br><span class="line">    f ||| g = f +++ g &gt;&gt;&gt; arr untag</span><br><span class="line">      <span class="keyword">where</span></span><br><span class="line">        untag (<span class="type">Left</span> x) = x</span><br><span class="line">        untag (<span class="type">Right</span> y) = y</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">ArrowChoice</span> (-&gt;) <span class="keyword">where</span></span></span><br><span class="line">    left f = f +++ id</span><br><span class="line">    right f = id +++ f</span><br><span class="line">    f +++ g = (<span class="type">Left</span> . f) ||| (<span class="type">Right</span> . g)</span><br><span class="line">    (|||) = either</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Monad</span> m =&gt; <span class="type">ArrowChoice</span> (<span class="type">Kleisli</span> <span class="title">m</span>) <span class="keyword">where</span></span></span><br><span class="line">    left f = f +++ arr id</span><br><span class="line">    right f = arr id +++ f</span><br><span class="line">    f +++ g = (f &gt;&gt;&gt; arr <span class="type">Left</span>) ||| (g &gt;&gt;&gt; arr <span class="type">Right</span>)</span><br><span class="line">    <span class="type">Kleisli</span> f ||| <span class="type">Kleisli</span> g = <span class="type">Kleisli</span> (either f g)</span><br></pre></td></tr></table></figure><h3 id="ArrowZero-amp-ArrowPlus"><a href="#ArrowZero-amp-ArrowPlus" class="headerlink" title="ArrowZero &amp; ArrowPlus"></a>ArrowZero &amp; ArrowPlus</h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Arrow</span> a =&gt; <span class="type">ArrowZero</span> a <span class="keyword">where</span></span></span><br><span class="line">    zeroArrow :: a b c</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">ArrowZero</span> a =&gt; <span class="type">ArrowPlus</span> a <span class="keyword">where</span></span></span><br><span class="line">    (&lt;+&gt;) :: a b c -&gt; a b c -&gt; a b c</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">MonadPlus</span> m =&gt; <span class="type">ArrowZero</span> (<span class="type">Kleisli</span> <span class="title">m</span>) <span class="keyword">where</span></span></span><br><span class="line">    zeroArrow = <span class="type">Kleisli</span> (\_ -&gt; mzero)</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">MonadPlus</span> m =&gt; <span class="type">ArrowPlus</span> (<span class="type">Kleisli</span> <span class="title">m</span>) <span class="keyword">where</span></span></span><br><span class="line">    <span class="type">Kleisli</span> f &lt;+&gt; <span class="type">Kleisli</span> g = <span class="type">Kleisli</span> (\x -&gt; f x `mplus` g x)</span><br></pre></td></tr></table></figure><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; runKleisli ((<span class="type">Kleisli</span> (\x -&gt; [x * <span class="number">2</span>])) &lt;+&gt; (<span class="type">Kleisli</span> (\x -&gt; [x, -x]))) <span class="number">2</span></span><br><span class="line">[<span class="number">4</span>,<span class="number">2</span>,<span class="number">-2</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; either (+<span class="number">2</span>) (*<span class="number">3</span>) (<span class="type">Left</span> <span class="number">3</span>)</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="title">ghci</span>&gt; either (+<span class="number">2</span>) (*<span class="number">3</span>) (<span class="type">Right</span> <span class="number">3</span>)</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="title">ghci</span>&gt; (+<span class="number">2</span>) ||| (*<span class="number">3</span>) $ (<span class="type">Left</span> <span class="number">3</span>)</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="title">ghci</span>&gt; (+<span class="number">2</span>) +++ (*<span class="number">3</span>) $ (<span class="type">Left</span> <span class="number">3</span>)</span><br><span class="line"><span class="type">Left</span> <span class="number">5</span></span><br><span class="line"><span class="title">ghci</span>&gt; (+<span class="number">2</span>) ||| (*<span class="number">3</span>) $ (<span class="type">Right</span> <span class="number">3</span>)</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="title">ghci</span>&gt; (+<span class="number">2</span>) +++ (*<span class="number">3</span>) $ (<span class="type">Right</span> <span class="number">3</span>)</span><br><span class="line"><span class="type">Right</span> <span class="number">9</span></span><br><span class="line"><span class="title">ghci</span>&gt; left (+<span class="number">2</span>) (<span class="type">Left</span> <span class="number">3</span>)</span><br><span class="line"><span class="type">Left</span> <span class="number">5</span></span><br><span class="line"><span class="title">ghci</span>&gt; right (*<span class="number">3</span>) (<span class="type">Right</span> <span class="number">3</span>)</span><br><span class="line"><span class="type">Right</span> <span class="number">9</span></span><br><span class="line"><span class="title">ghci</span>&gt; left (+<span class="number">2</span>) (<span class="type">Right</span> <span class="number">3</span>)</span><br><span class="line"><span class="type">Right</span> <span class="number">3</span></span><br><span class="line"><span class="title">ghci</span>&gt; right (*<span class="number">3</span>) (<span class="type">Left</span> <span class="number">3</span>)</span><br><span class="line"><span class="type">Left</span> <span class="number">3</span></span><br><span class="line"><span class="title">ghci</span>&gt; runKleisli ((<span class="type">Kleisli</span> (\x -&gt; [x * <span class="number">2</span>])) ||| (<span class="type">Kleisli</span> (\x -&gt; [x, -x]))) (<span class="type">Left</span> <span class="number">3</span>)</span><br><span class="line">[<span class="number">6</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; runKleisli ((<span class="type">Kleisli</span> (\x -&gt; [x * <span class="number">2</span>])) ||| (<span class="type">Kleisli</span> (\x -&gt; [x, -x]))) (<span class="type">Right</span> <span class="number">3</span>)</span><br><span class="line">[<span class="number">3</span>,<span class="number">-3</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; runKleisli ((<span class="type">Kleisli</span> (\x -&gt; [x * <span class="number">2</span>])) +++ (<span class="type">Kleisli</span> (\x -&gt; [x, -x]))) (<span class="type">Left</span> <span class="number">3</span>)</span><br><span class="line">[<span class="type">Left</span> <span class="number">6</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; runKleisli ((<span class="type">Kleisli</span> (\x -&gt; [x * <span class="number">2</span>])) +++ (<span class="type">Kleisli</span> (\x -&gt; [x, -x]))) (<span class="type">Right</span> <span class="number">3</span>)</span><br><span class="line">[<span class="type">Right</span> <span class="number">3</span>,<span class="type">Right</span> (<span class="number">-3</span>)]</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://wiki.haskell.org/Typeclassopedia">Typeclassopedia - Haskell wiki</a></li><li><a href="https://blog.csdn.net/zwvista/article/details/78679542">Haskell语言学习笔记（40）Arrow（1） - zwvista</a></li><li><a href="https://ocharles.org.uk/blog/guest-posts/2014-12-21-arrows.html">24 Days of GHC Extensions: Arrows - Tom Ellis</a></li><li><a href="https://blog.csdn.net/zwvista/article/details/78690485">Haskell语言学习笔记（47）Arrow（2） - zwvista</a></li></ul><hr><div style="text-align: center;"><p style="font-size: 1.3rem; font-weight: bold;">目录</p><p>#0&nbsp;|&nbsp;<a href="/p/b3ca5c18.html">总章</a>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;<br>#1&nbsp;|&nbsp;<a href="/p/d63b5b5f.html">基础语法与函数</a>&emsp;&emsp;&emsp;<br>#2&nbsp;|&nbsp;<a href="/p/53e482b7.html">高阶函数与模块</a>&emsp;&emsp;&emsp;<br>#3&nbsp;|&nbsp;<a href="/p/369b7e08.html">类型与类型类</a>&emsp;&emsp;&emsp;&emsp;<br>#4&nbsp;|&nbsp;<a href="/p/a5bbe48a.html">输入输出与文件</a>&emsp;&emsp;&emsp;<br>#5&nbsp;|&nbsp;<a href="/p/290ecb74.html">函子、应用函子与单子</a><br>#6&nbsp;|&nbsp;<a href="/p/d4bb2633.html">半群与幺半群</a>&emsp;&emsp;&emsp;&emsp;<br>#7&nbsp;|&nbsp;<a href="/p/68ef8146.html">一些其它类型类</a>&emsp;&emsp;&emsp;<br>#A&nbsp;|&nbsp;<a href="/p/96c32eae.html">Haskell与范畴论</a>&emsp;&nbsp;&thinsp;</p></div>]]></content>
    
    
    <summary type="html">&lt;div style=&quot;display: flex; justify-content: space-between;&quot;&gt;

&lt;p&gt;&lt;a href=&quot;/p/d4bb2633.html&quot;&gt;&amp;lt; #6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/p/96c32eae.html&quot;&gt;#A &amp;gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;Foldable&quot;&gt;&lt;a href=&quot;#Foldable&quot; class=&quot;headerlink&quot; title=&quot;Foldable&quot;&gt;&lt;/a&gt;Foldable&lt;/h2&gt;&lt;p&gt;Foldable是表示可以折叠（fold）的类型类，在&lt;code&gt;Data.Foldable&lt;/code&gt;中定义，这使得和fold相关的函数可以用在任意Foldable的实例类型上。它的定义是：&lt;/p&gt;</summary>
    
    
    
    
    <category term="Haskell" scheme="https://blog.tonycrane.cc/tags/Haskell/"/>
    
    <category term="笔记" scheme="https://blog.tonycrane.cc/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>「Learn Haskell」#A Haskell与范畴论</title>
    <link href="https://blog.tonycrane.cc/p/96c32eae.html"/>
    <id>https://blog.tonycrane.cc/p/96c32eae.html</id>
    <published>2021-07-19T06:01:00.000Z</published>
    <updated>2021-07-25T04:51:23.712Z</updated>
    
    <content type="html"><![CDATA[<p>Haskell中的函子单子等都与范畴论（category theory）有很多联系，所以打算简单了解一下范畴论的相关内容。</p><blockquote><p><strong>范畴论</strong>是数学的一门学科，以抽象的方法处理数学概念，将这些概念形式化成一组组的“物件”及“态射”。数学中许多重要的领域可以形式化为范畴。使用范畴论可以令这些领域中许多难理解、难捉摸的数学结论更容易叙述证明。</p><div style="text-align: right">———— 维基百科</div></blockquote><h2 id="范畴（Category）"><a href="#范畴（Category）" class="headerlink" title="范畴（Category）"></a>范畴（Category）</h2><p>范畴本质上是一个简单的集合，一个范畴$\mathbf{C}$包含三个组成成分：</p><span id="more"></span><ul><li>一个类$\mathrm{ob}(\mathbf{C})$：其中元素称为<strong>对象（objects）</strong></li><li>一个类$\mathrm{hom}(\mathbf{C})$：其中元素称为<strong>态射（morphisms）</strong>（或<strong>箭号（arrows）</strong>）：每个态射连接了两个对象：源对象（source object）、目标对象（target object）。如果$f$是从源对象$A$到目标对象$B$（$A, B\in \mathrm{ob}(\mathbf{C})$）的态射，那么记为$f : A\to B$</li><li>一个二元运算，称为态射<strong>复合（composition）</strong>：两个态射$g : A\to B$、$f : B\to C$的复合记为$f\circ g : A\to C$<br>在Haskell和大部分数学理论中都是从右向左计算，即$f\circ g$中是先计算$g : A\to B$再计算$f : B\to C$</li></ul><p>许多东西都可以组成范畴。比如:</p><p>&emsp;$\mathbf{Set}$是一个范畴，对象为所有集合，态射为集合之间的函数，复合即函数之间的复合</p><p>&emsp;$\mathbf{Grp}$是一个范畴，对象为所有群，态射为群同态（group homomorphisms），例如对于群$(G,*)$和$(H,\cdot )$，有群同态$h : (G,*)\to (H,\cdot )$，则需要对于$G$中的任意元素$u,v$满足<br>$$h(u*v)=h(u)\cdot h(v)$$</p><p><strong>注意</strong>：态射不必须为函数；而且可以存在源对象和目标对象都相同的不同态射</p><h3 id="范畴公理"><a href="#范畴公理" class="headerlink" title="范畴公理"></a>范畴公理</h3><p>每个范畴都需要满足三条定律：</p><ol><li>态射复合需要满足<strong>结合律（associativity）</strong>：<br>$$f\circ (g\circ h) = (f\circ g)\circ h$$</li><li>范畴在复合操作下是<strong>闭合的（closed）</strong>：<br>&emsp;&emsp;&emsp;如果范畴$\mathbf{C}$中存在态射$f : B\to C$、$g : A\to B$，那么范畴$\mathbf{C}$中也一定存在态射$h : A\to C$，且$h=f\circ g$</li><li>每个对象都需要有<strong>单位态射（identity morphisms）</strong>：<br>&emsp;&emsp;&emsp;对于范畴$\mathbf{C}$中的对象$A$，一定存在单位态射$\mathrm{id}_A : A\to A$，且对于每个态射$g : A\to B$，一定有：<br>$$g\circ\mathrm{id}_A = \mathrm{id}_B\circ g = g$$</li></ol><h3 id="mathbf-Hask-范畴"><a href="#mathbf-Hask-范畴" class="headerlink" title="$\mathbf{Hask}$范畴"></a>$\mathbf{Hask}$范畴</h3><p>范畴$\mathbf{Hask}$的对象为Haskell中的类型（types），态射是Haskell中的函数，复合运算是<code>(.)</code>。即从类型A到类型B的函数 f :: A -&gt; B 就是$\mathbf{Hask}$范畴中的一个态射。而函数 f :: B -&gt; C 、g :: A -&gt; B 的组合 f . g 就是一个新的函数 h :: A -&gt; C。</p><p>对于三条定律：</p><ol><li>第一条显然满足：f . (g . h) = (f . g) . h</li><li>第二条也显然满足，如果有函数 f :: B -&gt; C 、g :: A -&gt; B，一定有函数 h = (f . g) :: A -&gt; C </li><li>对于第三条定律，Haskell中存在单位函数 id ，但id是多态（polymorphic）的，要为其指定类型使其变成单态（monomorphic）的。比如态射$\mathrm{id}_A$在Haskell中就可以表示为 id :: A -&gt; A。并且显然满足第三条定律（其中 f :: A -&gt; B）：<p style="text-align: center;">(id :: B -> B) . f = f . (id :: A -> A) = f</p></li></ol><h2 id="函子（Functors）"><a href="#函子（Functors）" class="headerlink" title="函子（Functors）"></a>函子（Functors）</h2><p>一个范畴中的态射将两个对象联系起来，而函子则会将两个范畴联系起来。换句话说，函子就是从一个范畴到另一个范畴的变换。比如对于范畴$\mathbf{C}$、$\mathbf{D}$，定义函子$F : \mathbf{C}\to\mathbf{D}$满足：</p><ul><li>对于$\mathbf{C}$中的任意对象$A$，在$\mathbf{D}$中都有对象$F(A)$</li><li>对于$\mathbf{C}$中的任意态射$f : A\to B$，在$\mathbf{D}$中都有态射$F(f) : F(A)\to F(B)$</li></ul><p>比如：</p><p>&emsp;遗忘函子（forgetful functor）$U : \mathbf{Grp}\to\mathbf{Set}$，将一个群映射到一个集合中，将群同态映射到集合间的函数</p><p>&emsp;幂集函子（power set functor）$P : \mathbf{Set}\to\mathbf{Set}$，将一个集合映射到它的幂集，将原集合中的函数$f : A\to B$映射到函数$P(f) : \mathcal{P}(A)\to\mathcal{P}(B)$，即从$U\subseteq A$到值域$f(U)\subseteq B$的映射</p><p>&emsp;自函子（endofunctor）$1_{\mathbf{C}} : \mathbf{C}\to\mathbf{C}$，将一个范畴映射到它本身</p><h3 id="函子公理"><a href="#函子公理" class="headerlink" title="函子公理"></a>函子公理</h3><p>函子$F : \mathbf{C}\to\mathbf{D}$也需要满足两个公理：</p><ol><li>对于任意对象$X\in\mathbf{C}$，恒有$F(\mathrm{id}_X)=\mathrm{id}_{F(X)}$</li><li>对于态射$f : Y\to Z$、$g : X\to Y$，恒有$F(f\circ g) = F(f)\circ F(g)$</li></ol><h3 id="mathbf-Hask-范畴上的函子"><a href="#mathbf-Hask-范畴上的函子" class="headerlink" title="$\mathbf{Hask}$范畴上的函子"></a>$\mathbf{Hask}$范畴上的函子</h3><p>Haskell中的Functor定义是：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Functor</span> (<span class="title">f</span> :: * -&gt; *) <span class="keyword">where</span></span> </span><br><span class="line">    fmap :: (a -&gt; b) -&gt; f a -&gt; f b</span><br></pre></td></tr></table></figure><p>对于Haskell中的Functor，它实际上是从$\mathbf{Hask}$范畴（types）到它子范畴的变换。比如列表函子$\mathtt{[]} : \mathbf{Hask}\to\mathbf{Lst}$（其中$\mathbf{Lst}$是所有Haskell中列表类型构成的范畴）</p><p>它也达成了范畴论中对于函子的要求。函子需要进行两个操作：将一个范畴中的对象映射到另一个范畴中、将一个范畴中的态射映射到另一个范畴中。以Maybe为例，它实现了函子的要求：</p><ol><li>Maybe是一个类型构造器，他可以将任意类型 T 变成新类型 Maybe T，相当于从$\mathbf{Hask}$范畴的对象变成了$\mathbf{Maybe}$范畴的对象 </li><li>fmap函数接收一个 a -&gt; b 类型的函数，返回一个 Maybe a -&gt; Maybe b 类型的函数，相当于将$\mathbf{Hask}$范畴中的态射$f : A\to B$映射成了$\mathbf{Maybe}$范畴中的态射$\mathbf{Maybe}(f) : \mathbf{Maybe}(A)\to\mathbf{Maybe}(B)$</li></ol><p><strong>注意</strong>：时刻记住这里研究的是$\mathbf{Hask}$范畴和它的子范畴，对象是类型而不是值，态射是函数也指的是从类型到类型</p><p>同时，Haskell中的Functor也满足函子公理：</p><ol><li>fmap id = id 即 fmap (id :: A -&gt; A) = (id :: f A -&gt; f A)</li><li>fmap (f . g) = fmap f . fmap g</li></ol><h2 id="单子（Monads）"><a href="#单子（Monads）" class="headerlink" title="单子（Monads）"></a>单子（Monads）</h2><blockquote><p>一个单子说白了不过就是自函子范畴上的一个幺半群而已 _(:з」∠)_</p></blockquote><p>自函子在前面说到过是从一个范畴到自身的一个函子，如范畴$\mathbf{C}$上的自函子是$F : \mathbf{C}\to\mathbf{C}$。自函子范畴就是对象都是自函子的范畴。幺半群和Haskell中学到的Monoid类型类一样，是一个有可结合二元运算和单位元的代数结构。因此单子就是一个自函子，而且它有可结合二元运算（Haskell中<code>&gt;=&gt;</code>）和单位元（Haskell中<code>return</code>）。</p><p>一个单子$M : \mathbf{C}\to\mathbf{C}$还包含两个态射（对于范畴$\mathbf{C}$中的所有对象$X$）：</p><ol><li>$\mathrm{unit}_X^M : X\to M(X)$</li><li>$\mathrm{join}_X^M : M(M(X))\to M(X)$</li></ol><p>（当式子中的单子明显是$M$时，可以省略上标${}^M$）</p><p>Haskell中Monad的定义是：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Functor</span> m =&gt; <span class="type">Monad</span> m <span class="keyword">where</span></span> </span><br><span class="line">    return :: a -&gt; m a </span><br><span class="line">    (&gt;&gt;=)  :: m a -&gt; (a -&gt; m b) -&gt; m b</span><br></pre></td></tr></table></figure><p>其中很显然多态函数<code>return</code>对应了定义中的$\mathrm{unit}$，但是<code>&gt;&gt;=</code>和$mathrm{join}$的对应关系并不明显。因此Haskell中有一个工具函数<code>join</code>，它的效果就是定义中的$\mathrm{join}$，而且它可以和<code>&gt;&gt;=</code>互相定义：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">join</span> :: <span class="type">Monad</span> m =&gt; m (m a) -&gt; m a</span><br><span class="line"><span class="title">join</span> x = x &gt;&gt;= id</span><br><span class="line"></span><br><span class="line">(&gt;&gt;=) :: m a -&gt; (a -&gt; m b) -&gt; m b </span><br><span class="line"><span class="title">x</span> &gt;&gt;= f = join $ fmap f x</span><br></pre></td></tr></table></figure><p>所以Haskell中为Monad要求定义<code>&gt;&gt;=</code>就相当于定义了$\mathrm{join}$</p><p>例如，幂集函子$P : \mathbf{Set}\to\mathbf{Set}$也是一个单子，可以为它定义$\mathrm{unit}$和$\mathrm{join}$两个态射。Haskell中的列表也可以近似看作幂集函子。</p><p>&emsp;态射/函数的类型：</p><table><thead><tr><th align="center">幂集函子</th><th align="center">Haskell中列表</th></tr></thead><tbody><tr><td align="center">一个集合$S$和一个态射$f : A\to B$</td><td align="center">一个类型 T 和一个函数 f :: A -&gt; B</td></tr><tr><td align="center">$P(f) : \mathcal{P}(A)\to\mathcal{P}(B)$</td><td align="center">fmap f :: [A] -&gt; [B]</td></tr><tr><td align="center">$\mathrm{unit}_S : S\to\mathcal{P}(S)$</td><td align="center">return :: T -&gt; [T]</td></tr><tr><td align="center">$\mathrm{join}_S : \mathcal{P}(\mathcal{P}(S))\to\mathcal{P}(S)$</td><td align="center">join :: [[T]] -&gt; [T]</td></tr></tbody></table><p>&emsp;态射/函数的定义：</p><table><thead><tr><th align="center">幂集函子</th><th align="center">Haskell中列表</th></tr></thead><tbody><tr><td align="center">$(\mathcal{P}(f))(S) = \{f(a):a\in S\}$</td><td align="center">fmap f xs = [ f a | a &lt;- xs ]</td></tr><tr><td align="center">$\mathrm{unit}_S(x) = \{x\}$</td><td align="center">return x = [x]</td></tr><tr><td align="center">$\mathrm{join}_S(L) = \bigcup L$</td><td align="center">join xs = concat xs</td></tr></tbody></table><h3 id="单子公理"><a href="#单子公理" class="headerlink" title="单子公理"></a>单子公理</h3><p>给定一个单子$M : \mathbf{C}\to\mathbf{C}$，和一个态射$f : A\to B$（其中$A,B\in \mathbf{C}$），那么满足下面四条定律：</p><ol><li>$\mathrm{join}\circ M(\mathrm{join})=\mathrm{join}\circ\mathrm{join}$</li><li>$\mathrm{join}\circ M(\mathrm{unit})=\mathrm{join}\circ\mathrm{unit}=\mathrm{id}$</li><li>$\mathrm{unit}\circ f = M(f)\circ\mathrm{unit}$</li><li>$\mathrm{join}\circ M(M(f)) = M(f)\circ\mathrm{join}$</li></ol><p>也可以很自然地将其转化为Haskell中的表述：</p><ol><li>join . fmap join <code>=</code> join . join </li><li>join . fmap return <code>=</code> join . return <code>=</code> id </li><li>return . f <code>=</code> fmap f . return </li><li>join . fmap (fmap f) <code>=</code> fmap f . join</li></ol><p>在Haskell中，使用<code>&gt;&gt;=</code>也有三个定律和这四个定律是等价的：</p><ol><li>return x &gt;&gt;= f <code>=</code> f x <figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  return x &gt;&gt;= f </span><br><span class="line">= join (fmap f (return x)) = join (fmap f . return $ x)</span><br><span class="line">= join (return (f x)) = join (return . f $ x)</span><br><span class="line">= join . return $ (f x)</span><br><span class="line">= id (f x)</span><br><span class="line">= f x</span><br></pre></td></tr></table></figure></li><li>m &gt;&gt;= return <code>=</code> m<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  m &gt;&gt;= return </span><br><span class="line">= join (fmap return m) = join . fmap return $ m </span><br><span class="line">= id m</span><br><span class="line">= m </span><br></pre></td></tr></table></figure></li><li>(m &gt;&gt;= f) &gt;&gt;= g <code>=</code> m &gt;&gt;= (\x -&gt; f x &gt;&gt;= g)<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  (m &gt;&gt;= f) &gt;&gt;= g </span><br><span class="line">= (join (fmap f m)) &gt;&gt;= g = join (fmap g (join (fmap f m)))</span><br><span class="line">= join . fmap g . join $ fmap f m </span><br><span class="line">= join . join . fmap (fmap g) $ fmap f m </span><br><span class="line">= join . join . fmap (fmap g) . fmap f $ m </span><br><span class="line">= join . join . fmap (fmap g . f) $ m </span><br><span class="line">= join . fmap join . fmap (fmap g . f) $ m </span><br><span class="line">= join . fmap (join . (fmap g . f)) $ m </span><br><span class="line">= join . fmap (\x -&gt; join (fmap g (f x))) $ m </span><br><span class="line">= join . fmap (\x -&gt; f x &gt;&gt;= g) $ m </span><br><span class="line">= join (fmap (\x -&gt; f x &gt;&gt;= g) m)</span><br><span class="line">= m &gt;&gt;= (\x -&gt; f x &gt;&gt;= g)</span><br></pre></td></tr></table></figure></li></ol><p>（范畴论就先简单看这些，只是为了更好理解Haskell中概念而已）</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://en.wikibooks.org/wiki/Haskell/Category_theory">Haskell/Category theory - wikibooks</a></li><li><a href="https://en.wikipedia.org/wiki/Category_theory">Category theory - wikipedia</a></li><li><a href="https://zh.wikipedia.org/wiki/%E8%8C%83%E7%95%B4%E8%AE%BA">范畴论 - 维基百科</a></li><li><a href="https://en.wikipedia.org/wiki/Monad_(category_theory)">Monad (category theory) - wikipedia</a></li><li><a href="https://en.wikipedia.org/wiki/Functor">Functor - wikipedia</a></li></ul><hr><div style="text-align: center;"><p style="font-size: 1.3rem; font-weight: bold;">目录</p><p>#0&nbsp;|&nbsp;<a href="/p/b3ca5c18.html">总章</a>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;<br>#1&nbsp;|&nbsp;<a href="/p/d63b5b5f.html">基础语法与函数</a>&emsp;&emsp;&emsp;<br>#2&nbsp;|&nbsp;<a href="/p/53e482b7.html">高阶函数与模块</a>&emsp;&emsp;&emsp;<br>#3&nbsp;|&nbsp;<a href="/p/369b7e08.html">类型与类型类</a>&emsp;&emsp;&emsp;&emsp;<br>#4&nbsp;|&nbsp;<a href="/p/a5bbe48a.html">输入输出与文件</a>&emsp;&emsp;&emsp;<br>#5&nbsp;|&nbsp;<a href="/p/290ecb74.html">函子、应用函子与单子</a><br>#6&nbsp;|&nbsp;<a href="/p/d4bb2633.html">半群与幺半群</a>&emsp;&emsp;&emsp;&emsp;<br>#7&nbsp;|&nbsp;<a href="/p/68ef8146.html">一些其它类型类</a>&emsp;&emsp;&emsp;<br>#A&nbsp;|&nbsp;<a href="/p/96c32eae.html">Haskell与范畴论</a>&emsp;&nbsp;&thinsp;</p></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;Haskell中的函子单子等都与范畴论（category theory）有很多联系，所以打算简单了解一下范畴论的相关内容。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;范畴论&lt;/strong&gt;是数学的一门学科，以抽象的方法处理数学概念，将这些概念形式化成一组组的“物件”及“态射”。数学中许多重要的领域可以形式化为范畴。使用范畴论可以令这些领域中许多难理解、难捉摸的数学结论更容易叙述证明。&lt;/p&gt;
&lt;div style=&quot;text-align: right&quot;&gt;———— 维基百科&lt;/div&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;范畴（Category）&quot;&gt;&lt;a href=&quot;#范畴（Category）&quot; class=&quot;headerlink&quot; title=&quot;范畴（Category）&quot;&gt;&lt;/a&gt;范畴（Category）&lt;/h2&gt;&lt;p&gt;范畴本质上是一个简单的集合，一个范畴$\mathbf{C}$包含三个组成成分：&lt;/p&gt;</summary>
    
    
    
    
    <category term="Haskell" scheme="https://blog.tonycrane.cc/tags/Haskell/"/>
    
    <category term="笔记" scheme="https://blog.tonycrane.cc/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="范畴论" scheme="https://blog.tonycrane.cc/tags/%E8%8C%83%E7%95%B4%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>「Learn Haskell」#6 半群与幺半群</title>
    <link href="https://blog.tonycrane.cc/p/d4bb2633.html"/>
    <id>https://blog.tonycrane.cc/p/d4bb2633.html</id>
    <published>2021-07-17T03:15:47.000Z</published>
    <updated>2021-07-25T04:54:13.884Z</updated>
    
    <content type="html"><![CDATA[<div style="display: flex; justify-content: space-between;"><p><a href="/p/290ecb74.html">&lt; #5</a></p><p><a href="/p/68ef8146.html">#7 &gt;</a></p></div><h2 id="Semigroup"><a href="#Semigroup" class="headerlink" title="Semigroup"></a>Semigroup</h2><p>半群（semigroup）是一个集合$S$，它需要指定一个二元运算符$\oplus$，并且满足</p><p>$$<br>a\oplus b \in S\quad a, b\in S<br>$$</p><p>以及结合（associative）律：</p><p>$$<br>(a\oplus b)\oplus c = a\oplus (b\oplus c)<br>$$</p><p>这个二元运算符在Haskell的Semigroup中被定义为<code>&lt;&gt;</code>函数：</p><span id="more"></span><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Semigroup</span> a <span class="keyword">where</span></span></span><br><span class="line">    (&lt;&gt;) :: a -&gt; a -&gt; a </span><br><span class="line"></span><br><span class="line">    sconcat :: <span class="type">NonEmpty</span> a -&gt; a </span><br><span class="line">    sconcat (a :| <span class="keyword">as</span>) = go a <span class="keyword">as</span> <span class="keyword">where</span> </span><br><span class="line">        go b (c:cs) = b &lt;&gt; go c cs </span><br><span class="line">        go b []     = b</span><br><span class="line">    </span><br><span class="line">    stimes :: <span class="type">Integarl</span> b =&gt; b -&gt; a -&gt; a </span><br><span class="line">    stimes = ...</span><br></pre></td></tr></table></figure><p>除此之外还有<code>sconcat</code>和<code>stimes</code>函数，都给出了默认实现。对于列表，&lt;&gt;相当于(++)，stimes相当于concat . replicate：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; [<span class="number">1</span>, <span class="number">2</span>] &lt;&gt; [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; sconcat $ fromList [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]]</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; stimes <span class="number">3</span> [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br></pre></td></tr></table></figure><h3 id="Semigroup-Law"><a href="#Semigroup-Law" class="headerlink" title="Semigroup Law"></a>Semigroup Law</h3><ul><li>(x &lt;&gt; y) &lt;&gt; z <code>=</code> x &lt;&gt; (y &lt;&gt; z)</li></ul><h3 id="补：NonEmpty"><a href="#补：NonEmpty" class="headerlink" title="补：NonEmpty"></a>补：NonEmpty</h3><p>NonEmpty表示非空列表，定义是：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">NonEmpty</span> a = a :| [a] <span class="keyword">deriving</span> (<span class="type">Eq</span>, <span class="type">Ord</span>)</span></span><br></pre></td></tr></table></figure><p>使用一个元素和一个列表用<code>:|</code>连接就可以生成一个NonEmpty类型的列表</p><p><code>Data.List.NonEmpty</code>模块中实现了很多普通列表有的函数，需要qualified import后调用，使用fromList、toList函数可以在普通列表和非空列表之间转换</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; <span class="keyword">import</span> <span class="keyword">qualified</span> Data.List.NonEmpty <span class="keyword">as</span> NE</span><br><span class="line"><span class="title">ghci</span>&gt; arr = <span class="type">NE</span>.fromList [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; arr</span><br><span class="line"><span class="number">1</span> :| [<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; <span class="type">NE</span>.head arr </span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="title">ghci</span>&gt; <span class="type">NE</span>.tail arr </span><br><span class="line">[<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure><h2 id="Monoid"><a href="#Monoid" class="headerlink" title="Monoid"></a>Monoid</h2><p>幺半群（Monoid）是一个有单位元素$e$的半群，即$e$满足：</p><p>$$<br>e\oplus x = x\oplus e = x<br>$$</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Semigroup</span> a =&gt; <span class="type">Monoid</span> a <span class="keyword">where</span></span> </span><br><span class="line">    mempty  :: a </span><br><span class="line">    </span><br><span class="line">    mappend :: a -&gt; a -&gt; a </span><br><span class="line">    mappend = (&lt;&gt;)</span><br><span class="line"></span><br><span class="line">    mconcat :: [a] -&gt; a </span><br><span class="line">    mconcat = foldr mappend mempty </span><br></pre></td></tr></table></figure><p>可以看出Monoid要求了三个函数，其中最少只需要<code>mempty</code>，它直接返回一个值，表示单位元素。<code>mappend</code>即Semigroup中的&lt;&gt;运算符，<code>mconcat</code>也提供了默认实现</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><h4 id="a"><a href="#a" class="headerlink" title="[a]"></a>[a]</h4><p>因为Monoid的实例是一个具体类型，而不是像Functor等一样等类型构造器，所以[]并不是Monoid的实例，但是具体类型[a]是一个幺半群：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Semigroup</span> [a] <span class="keyword">where</span></span> </span><br><span class="line">    (&lt;&gt;) = (++)</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Monoid</span> [a] <span class="keyword">where</span></span> </span><br><span class="line">    mempty = [] </span><br><span class="line">    mconcat xss = [x | xs &lt;- xss, x &lt;- xs]</span><br></pre></td></tr></table></figure><p>列表的单位元素(mempty)就是空列表[]，运算符就是合并列表(++)，mconcat也用列表推导重新实现提高效率</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; mempty :: [<span class="type">Int</span>] </span><br><span class="line">[]</span><br><span class="line"><span class="title">ghci</span>&gt; [<span class="number">1</span>, <span class="number">2</span>] &lt;&gt; [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; [<span class="number">1</span>, <span class="number">2</span>] `mappend` [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; mconcat [[<span class="number">1</span>,<span class="number">2</span>], [<span class="number">3</span>,<span class="number">4</span>]]</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br></pre></td></tr></table></figure><h4 id="Ordering"><a href="#Ordering" class="headerlink" title="Ordering"></a>Ordering</h4><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Semigroup</span> <span class="type">Ordering</span> <span class="keyword">where</span></span></span><br><span class="line">    <span class="type">LT</span> &lt;&gt; _ = <span class="type">LT</span></span><br><span class="line">    <span class="type">EQ</span> &lt;&gt; y = y</span><br><span class="line">    <span class="type">GT</span> &lt;&gt; _ = <span class="type">GT</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Monoid</span> <span class="type">Ordering</span> <span class="keyword">where</span></span></span><br><span class="line">    mempty = <span class="type">EQ</span></span><br></pre></td></tr></table></figure><p>主要可以用于比较字典序：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; mconcat (zipWith compare <span class="string">&quot;abcd&quot;</span> <span class="string">&quot;acbd&quot;</span>)</span><br><span class="line"><span class="type">LT</span></span><br></pre></td></tr></table></figure><h4 id="Sum-amp-Product"><a href="#Sum-amp-Product" class="headerlink" title="Sum &amp; Product"></a>Sum &amp; Product</h4><p>对于数字，加法和乘法都满足结合律，所以对于Num，有两种实现Monoid的方式，但是不能为同一类型设置两种实例方式，所以<code>Data.Monoid</code>中提供了两个包装器————Sum和Product：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">newtype</span> <span class="type">Sum</span> a = <span class="type">Sum</span> &#123;<span class="title">getSum</span> :: <span class="title">a</span>&#125; <span class="keyword">deriving</span> (...)</span></span><br><span class="line"><span class="class"><span class="keyword">newtype</span> <span class="type">Product</span> a = <span class="type">Product</span> &#123;<span class="title">getProduct</span> :: <span class="title">a</span>&#125; <span class="keyword">deriving</span> (...)</span></span><br></pre></td></tr></table></figure><p>它们使用Sum或Product来包装起一个数字，可以通过getSum或getProduct来获取其中的值</p><p>对于加法，二元操作为(+)，单位元素为0；对于乘法，二元操作为(*)，单位元素为1:</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Num</span> a =&gt; <span class="type">Semigroup</span> (<span class="type">Sum</span> <span class="title">a</span>) <span class="keyword">where</span></span></span><br><span class="line">    (&lt;&gt;) = coerce ((+) :: a -&gt; a -&gt; a)</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Num</span> a =&gt; <span class="type">Monoid</span> (<span class="type">Sum</span> <span class="title">a</span>) <span class="keyword">where</span></span></span><br><span class="line">    mempty = <span class="type">Sum</span> <span class="number">0</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Num</span> a =&gt; <span class="type">Semigroup</span> (<span class="type">Product</span> <span class="title">a</span>) <span class="keyword">where</span></span></span><br><span class="line">    (&lt;&gt;) = coerce ((*) :: a -&gt; a -&gt; a)</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Num</span> a =&gt; <span class="type">Monoid</span> (<span class="type">Product</span> <span class="title">a</span>) <span class="keyword">where</span></span></span><br><span class="line">    mempty = <span class="type">Product</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; <span class="type">Sum</span> <span class="number">5</span> &lt;&gt; <span class="type">Sum</span> <span class="number">6</span> &lt;&gt; <span class="type">Sum</span> <span class="number">10</span></span><br><span class="line"><span class="type">Sum</span> &#123;getSum = <span class="number">21</span>&#125;</span><br><span class="line"><span class="title">ghci</span>&gt; getSum . mconcat . fmap <span class="type">Sum</span> $ [<span class="number">5</span>, <span class="number">6</span>, <span class="number">10</span>]</span><br><span class="line"><span class="number">21</span></span><br><span class="line"><span class="title">ghci</span>&gt; <span class="type">Product</span> <span class="number">5</span> &lt;&gt; <span class="type">Product</span> <span class="number">6</span> &lt;&gt; <span class="type">Product</span> <span class="number">10</span></span><br><span class="line"><span class="type">Product</span> &#123;getProduct = <span class="number">300</span>&#125;</span><br><span class="line"><span class="title">ghci</span>&gt; getProduct . mconcat . fmap <span class="type">Product</span> $ [<span class="number">5</span>, <span class="number">6</span>, <span class="number">10</span>]</span><br><span class="line"><span class="number">300</span></span><br></pre></td></tr></table></figure><h4 id="All-amp-Any"><a href="#All-amp-Any" class="headerlink" title="All &amp; Any"></a>All &amp; Any</h4><p>和数字一样，布尔值也有两种实现Monoid的方式，因此<code>Data.Monoid</code>模块中也提供了两个包装器，分别实现了这两种Monoid：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">newtype</span> <span class="type">All</span> = <span class="type">All</span> &#123; <span class="title">getAll</span> :: <span class="type">Bool</span> &#125; <span class="keyword">deriving</span> (...)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Semigroup</span> <span class="type">All</span> <span class="keyword">where</span></span></span><br><span class="line">        (&lt;&gt;) = coerce (&amp;&amp;)</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Monoid</span> <span class="type">All</span> <span class="keyword">where</span></span></span><br><span class="line">        mempty = <span class="type">All</span> <span class="type">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">newtype</span> <span class="type">Any</span> = <span class="type">Any</span> &#123; <span class="title">getAny</span> :: <span class="type">Bool</span> &#125; <span class="keyword">deriving</span> (...)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Semigroup</span> <span class="type">Any</span> <span class="keyword">where</span></span></span><br><span class="line">        (&lt;&gt;) = coerce (||)</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Monoid</span> <span class="type">Any</span> <span class="keyword">where</span></span></span><br><span class="line">        mempty = <span class="type">Any</span> <span class="type">False</span></span><br></pre></td></tr></table></figure><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; getAll (<span class="type">All</span> <span class="type">True</span> &lt;&gt; mempty &lt;&gt; <span class="type">All</span> <span class="type">False</span>)</span><br><span class="line"><span class="type">False</span></span><br><span class="line"><span class="title">ghci</span>&gt; getAll (mconcat (map (\x -&gt; <span class="type">All</span> (even x)) [<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]))</span><br><span class="line"><span class="type">False</span></span><br><span class="line"><span class="title">ghci</span>&gt; getAny (<span class="type">Any</span> <span class="type">True</span> &lt;&gt; mempty &lt;&gt; <span class="type">Any</span> <span class="type">False</span>)</span><br><span class="line"><span class="type">True</span></span><br><span class="line"><span class="title">ghci</span>&gt; getAny (mconcat (map (\x -&gt; <span class="type">Any</span> (even x)) [<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]))</span><br><span class="line"><span class="type">True</span></span><br></pre></td></tr></table></figure><h4 id="Monoid-a-gt-Maybe-a"><a href="#Monoid-a-gt-Maybe-a" class="headerlink" title="Monoid a =&gt; Maybe a"></a>Monoid a =&gt; Maybe a</h4><p>如果a是一个(幺)半群，那么Maybe a也是一个幺半群，单位元就是Nothing：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Semigroup</span> a =&gt; <span class="type">Semigroup</span> (<span class="type">Maybe</span> <span class="title">a</span>) <span class="keyword">where</span></span></span><br><span class="line">    <span class="type">Nothing</span> &lt;&gt; b       = b</span><br><span class="line">    a       &lt;&gt; <span class="type">Nothing</span> = a</span><br><span class="line">    <span class="type">Just</span> a  &lt;&gt; <span class="type">Just</span> b  = <span class="type">Just</span> (a &lt;&gt; b)</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Semigroup</span> a =&gt; <span class="type">Monoid</span> (<span class="type">Maybe</span> <span class="title">a</span>) <span class="keyword">where</span></span></span><br><span class="line">    mempty = <span class="type">Nothing</span></span><br></pre></td></tr></table></figure><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; <span class="type">Nothing</span> &lt;&gt; <span class="type">Just</span> <span class="string">&quot;andy&quot;</span></span><br><span class="line"><span class="type">Just</span> <span class="string">&quot;andy&quot;</span></span><br><span class="line"><span class="title">ghci</span>&gt; <span class="type">Just</span> <span class="type">LT</span> &lt;&gt; <span class="type">Nothing</span></span><br><span class="line"><span class="type">Just</span> <span class="type">LT</span></span><br><span class="line"><span class="title">ghci</span>&gt; <span class="type">Just</span> (<span class="type">Sum</span> <span class="number">3</span>) &lt;&gt; <span class="type">Just</span> (<span class="type">Sum</span> <span class="number">4</span>) </span><br><span class="line"><span class="type">Just</span> (<span class="type">Sum</span> &#123;getSum = <span class="number">7</span>&#125;)</span><br></pre></td></tr></table></figure><h4 id="First-amp-Last"><a href="#First-amp-Last" class="headerlink" title="First &amp; Last"></a>First &amp; Last</h4><p>对于Maybe也有两种实现Monoid的方法，即&lt;&gt;操作每次恒取左边和每次恒取右边（在没有Nothing的情况下），所以<code>Data.Monoid</code>模块中也提供了两个新的包装器：First和Last：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">newtype</span> <span class="type">First</span> a = <span class="type">First</span> &#123; <span class="title">getFirst</span> :: <span class="type">Maybe</span> <span class="title">a</span> &#125; <span class="keyword">deriving</span> (...)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Semigroup</span> (<span class="type">First</span> <span class="title">a</span>) <span class="keyword">where</span></span></span><br><span class="line">    <span class="type">First</span> <span class="type">Nothing</span> &lt;&gt; b = b</span><br><span class="line">    a             &lt;&gt; _ = a</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Monoid</span> (<span class="type">First</span> <span class="title">a</span>) <span class="keyword">where</span></span></span><br><span class="line">    mempty = <span class="type">First</span> <span class="type">Nothing</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">newtype</span> <span class="type">Last</span> a = <span class="type">Last</span> &#123; <span class="title">getLast</span> :: <span class="type">Maybe</span> <span class="title">a</span> &#125; <span class="keyword">deriving</span> (...)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Semigroup</span> (<span class="type">Last</span> <span class="title">a</span>) <span class="keyword">where</span></span></span><br><span class="line">    a &lt;&gt; <span class="type">Last</span> <span class="type">Nothing</span> = a</span><br><span class="line">    _ &lt;&gt; b            = b</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Monoid</span> (<span class="type">Last</span> <span class="title">a</span>) <span class="keyword">where</span></span></span><br><span class="line">    mempty = <span class="type">Last</span> <span class="type">Nothing</span></span><br></pre></td></tr></table></figure><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; getFirst (<span class="type">First</span> (<span class="type">Just</span> <span class="string">&quot;hello&quot;</span>) &lt;&gt; <span class="type">First</span> <span class="type">Nothing</span> &lt;&gt; <span class="type">First</span> (<span class="type">Just</span> <span class="string">&quot;world&quot;</span>))</span><br><span class="line"><span class="type">Just</span> <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="title">ghci</span>&gt; getLast (<span class="type">Last</span> (<span class="type">Just</span> <span class="string">&quot;hello&quot;</span>) &lt;&gt; <span class="type">Last</span> <span class="type">Nothing</span> &lt;&gt; <span class="type">Last</span> (<span class="type">Just</span> <span class="string">&quot;world&quot;</span>))</span><br><span class="line"><span class="type">Just</span> <span class="string">&quot;world&quot;</span></span><br><span class="line"><span class="title">ghci</span>&gt; getFirst . mconcat . map <span class="type">First</span> $ [<span class="type">Nothing</span>, <span class="type">Just</span> <span class="number">9</span>, <span class="type">Just</span> <span class="number">10</span>]  </span><br><span class="line"><span class="type">Just</span> <span class="number">9</span></span><br><span class="line"><span class="title">ghci</span>&gt; getLast . mconcat . map <span class="type">Last</span> $ [<span class="type">Nothing</span>, <span class="type">Just</span> <span class="number">9</span>, <span class="type">Just</span> <span class="number">10</span>]  </span><br><span class="line"><span class="type">Just</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><h4 id="Min-amp-Max"><a href="#Min-amp-Max" class="headerlink" title="Min &amp; Max"></a>Min &amp; Max</h4><p>对于有界的类型，也有两种实现Monoid的方式，每次二元操作都取最小或最大。<code>Data.Semigroup</code>模块中提供了两个包装其器：Min和Max：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">newtype</span> <span class="type">Min</span> a = <span class="type">Min</span> &#123; <span class="title">getMin</span> :: <span class="title">a</span> &#125; <span class="keyword">deriving</span> (...)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Ord</span> a =&gt; <span class="type">Semigroup</span> (<span class="type">Min</span> <span class="title">a</span>) <span class="keyword">where</span></span></span><br><span class="line">    (&lt;&gt;) = coerce (min :: a -&gt; a -&gt; a)</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> (<span class="type">Ord</span> <span class="title">a</span>, <span class="type">Bounded</span> <span class="title">a</span>) =&gt; <span class="type">Monoid</span> (<span class="type">Min</span> <span class="title">a</span>) <span class="keyword">where</span></span></span><br><span class="line">    mempty = maxBound</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">newtype</span> <span class="type">Max</span> a = <span class="type">Max</span> &#123; <span class="title">getMax</span> :: <span class="title">a</span> &#125; <span class="keyword">deriving</span> (...)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Ord</span> a =&gt; <span class="type">Semigroup</span> (<span class="type">Max</span> <span class="title">a</span>) <span class="keyword">where</span></span></span><br><span class="line">    (&lt;&gt;) = coerce (max :: a -&gt; a -&gt; a)</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> (<span class="type">Ord</span> <span class="title">a</span>, <span class="type">Bounded</span> <span class="title">a</span>) =&gt; <span class="type">Monoid</span> (<span class="type">Max</span> <span class="title">a</span>) <span class="keyword">where</span></span></span><br><span class="line">    mempty = minBound</span><br></pre></td></tr></table></figure><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; <span class="type">Min</span> <span class="number">3</span> &lt;&gt; <span class="type">Min</span> <span class="number">5</span></span><br><span class="line"><span class="type">Min</span> &#123;getMin = <span class="number">3</span>&#125;</span><br><span class="line"><span class="title">ghci</span>&gt; <span class="type">Max</span> <span class="number">3</span> &lt;&gt; <span class="type">Max</span> <span class="number">5</span></span><br><span class="line"><span class="type">Max</span> &#123;getMax = <span class="number">5</span>&#125;</span><br><span class="line"><span class="title">ghci</span>&gt; getMin . mconcat . map <span class="type">Min</span> $ [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] :: <span class="type">Int</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="title">ghci</span>&gt; getMax . mconcat . map <span class="type">Max</span> $ [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] :: <span class="type">Int</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h4><p>当元组内的所有元素都是幺半群时，整个元组也是一个幺半群：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> (<span class="type">Semigroup</span> <span class="title">a</span>, <span class="type">Semigroup</span> <span class="title">b</span>) =&gt; <span class="type">Semigroup</span> (<span class="title">a</span>, <span class="title">b</span>) <span class="keyword">where</span></span></span><br><span class="line">        (a,b) &lt;&gt; (a&#x27;,b&#x27;) = (a&lt;&gt;a&#x27;,b&lt;&gt;b&#x27;)</span><br><span class="line">        stimes n (a,b) = (stimes n a, stimes n b)</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> (<span class="type">Monoid</span> <span class="title">a</span>, <span class="type">Monoid</span> <span class="title">b</span>) =&gt; <span class="type">Monoid</span> (<span class="title">a</span>,<span class="title">b</span>) <span class="keyword">where</span></span></span><br><span class="line">        mempty = (mempty, mempty)</span><br></pre></td></tr></table></figure><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; mconcat $ map (\x -&gt; (<span class="type">Min</span> x, <span class="type">Max</span> x)) [<span class="number">1.</span><span class="number">.10</span>] :: (<span class="type">Min</span> <span class="type">Int</span>, <span class="type">Max</span> <span class="type">Int</span>)</span><br><span class="line">(<span class="type">Min</span> &#123;getMin = <span class="number">1</span>&#125;,<span class="type">Max</span> &#123;getMax = <span class="number">10</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="Monoid-Laws"><a href="#Monoid-Laws" class="headerlink" title="Monoid Laws"></a>Monoid Laws</h3><ul><li>mempty &lt;&gt; x <code>=</code> x</li><li>x &lt;&gt; mempty <code>=</code> x</li><li>(x &lt;&gt; y) &lt;&gt; z <code>=</code> x &lt;&gt; (y &lt;&gt; z)</li></ul><h2 id="Monoidal-classes"><a href="#Monoidal-classes" class="headerlink" title="Monoidal classes"></a>Monoidal classes</h2><p>Applicative、Monad、Arrow都有有幺半群性质的子类型类，分别是Alternative、MonadPlus、ArrowPlus</p><h3 id="Alternative"><a href="#Alternative" class="headerlink" title="Alternative"></a>Alternative</h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Applicative</span> f =&gt; <span class="type">Alternative</span> f <span class="keyword">where</span></span></span><br><span class="line">    <span class="comment">-- | The identity of &#x27;&lt;|&gt;&#x27;</span></span><br><span class="line">    empty :: f a</span><br><span class="line">    <span class="comment">-- | An associative binary operation</span></span><br><span class="line">    (&lt;|&gt;) :: f a -&gt; f a -&gt; f a</span><br><span class="line"></span><br><span class="line">    some :: f a -&gt; f [a]</span><br><span class="line">    some v = (:) &lt;$&gt; v &lt;*&gt; many v</span><br><span class="line">    many :: f a -&gt; f [a]</span><br><span class="line">    many v = some v &lt;|&gt; pure []</span><br></pre></td></tr></table></figure><p>其中empty是幺半群中的单位元素，&lt;|&gt;是幺半群中的二元运算符。some和many是两个函数（<del>意义还不懂</del>）</p><h4 id="Alternative实例"><a href="#Alternative实例" class="headerlink" title="Alternative实例"></a>Alternative实例</h4><h5 id><a href="#" class="headerlink" title="[]"></a>[]</h5><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Alternative</span> [] <span class="keyword">where</span></span></span><br><span class="line">    empty = []</span><br><span class="line">    (&lt;|&gt;) = (++)</span><br></pre></td></tr></table></figure><p>和Monoid一样，单位元素是空列表，二元运算是列表合并</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] &lt;|&gt; empty &lt;|&gt; [<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; some []</span><br><span class="line">[]</span><br><span class="line"><span class="title">ghci</span>&gt; many []</span><br><span class="line">[[]]</span><br></pre></td></tr></table></figure><h5 id="Maybe"><a href="#Maybe" class="headerlink" title="Maybe"></a>Maybe</h5><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Alternative</span> <span class="type">Maybe</span> <span class="keyword">where</span></span></span><br><span class="line">    empty = <span class="type">Nothing</span></span><br><span class="line">    <span class="type">Nothing</span> &lt;|&gt; r = r</span><br><span class="line">    l       &lt;|&gt; _ = l</span><br></pre></td></tr></table></figure><p>Maybe作为Alternative的单位元素是Nothing，二元运算是始终取左边（当左边不为Nothing时）</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; <span class="type">Nothing</span> &lt;|&gt; <span class="type">Just</span> <span class="number">1</span> &lt;|&gt; <span class="type">Just</span> <span class="number">2</span> </span><br><span class="line"><span class="type">Just</span> <span class="number">1</span> </span><br><span class="line"><span class="title">ghci</span>&gt; some <span class="type">Nothing</span></span><br><span class="line"><span class="type">Nothing</span> </span><br><span class="line"><span class="title">ghci</span>&gt; many <span class="type">Nothing</span> </span><br><span class="line"><span class="type">Just</span> []</span><br></pre></td></tr></table></figure><h5 id="ZipList"><a href="#ZipList" class="headerlink" title="ZipList"></a>ZipList</h5><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Alternative</span> <span class="type">ZipList</span> <span class="keyword">where</span></span></span><br><span class="line">   empty = <span class="type">ZipList</span> []</span><br><span class="line">   <span class="type">ZipList</span> xs &lt;|&gt; <span class="type">ZipList</span> ys = <span class="type">ZipList</span> (xs ++ drop (length xs) ys)</span><br></pre></td></tr></table></figure><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;&gt;getZipList $ <span class="type">ZipList</span> [<span class="number">1</span>,<span class="number">2</span>] &lt;|&gt; <span class="type">ZipList</span> [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">&lt;&gt;getZipList $ <span class="type">ZipList</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>] &lt;|&gt; <span class="type">ZipList</span> [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br></pre></td></tr></table></figure><h4 id="Alternative-Laws"><a href="#Alternative-Laws" class="headerlink" title="Alternative Laws"></a>Alternative Laws</h4><ul><li><code>Monoid laws</code>:  <figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">empty</span> &lt;|&gt; x = x </span><br><span class="line"><span class="title">x</span> &lt;|&gt; empty = x </span><br><span class="line">(x &lt;|&gt; y) &lt;|&gt; z = x &lt;|&gt; (y &lt;|&gt; z)</span><br></pre></td></tr></table></figure></li><li><code>Left zero law</code>：empty &lt;*&gt; f <code>=</code> empty<br>以上的定律是都满足都，下面的定律只有部分满足：</li><li><code>Right zero law</code>：f &lt;*&gt; empty <code>=</code> empty （大部分包括Maybe、[]满足，IO不满足）</li><li><code>Left distribution</code>：(a &lt;|&gt; b) &lt;*&gt; c <code>=</code> (a &lt;*&gt; c) &lt;|&gt; (b &lt;*&gt; c) （Maybe、[]满足，IO及大部分parsers不满足）</li><li><code>Right distribution</code>：a &lt;*&gt; (b &lt;|&gt; c) <code>=</code> (a &lt;*&gt; b) &lt;|&gt; (a &lt;*&gt; c) （大部分不满足，但Maybe满足）</li><li><code>Left catch</code>：(pure a) &lt;|&gt; x = pure a （Maybe、IO、parsers满足，但[]不满足）</li></ul><h4 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h4><ul><li><code>asum</code> :: (Foldable t, Alternative f) =&gt; t (f a) -&gt; f a，相当于foldr (&lt;|&gt;) empty：  <figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; asum [<span class="type">Nothing</span>, <span class="type">Just</span> <span class="number">5</span>, <span class="type">Just</span> <span class="number">3</span>]</span><br><span class="line"><span class="type">Just</span> <span class="number">5</span></span><br><span class="line"><span class="title">ghci</span>&gt; asum [[<span class="number">2</span>],[<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>]]</span><br><span class="line">[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br></pre></td></tr></table></figure></li><li><code>guard</code> :: (Alternative f) =&gt; Bool -&gt; f ()：  <figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">guard</span> <span class="type">True</span>  = pure ()</span><br><span class="line"><span class="title">guard</span> <span class="type">False</span> = empty </span><br></pre></td></tr></table></figure></li></ul><h3 id="MonadPlus"><a href="#MonadPlus" class="headerlink" title="MonadPlus"></a>MonadPlus</h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> (<span class="type">Alternative</span> <span class="title">m</span>, <span class="type">Monad</span> <span class="title">m</span>) =&gt; <span class="type">MonadPlus</span> m <span class="keyword">where</span></span></span><br><span class="line">   mzero :: m a</span><br><span class="line">   mzero = empty</span><br><span class="line"></span><br><span class="line">   mplus :: m a -&gt; m a -&gt; m a</span><br><span class="line">   mplus = (&lt;|&gt;)</span><br></pre></td></tr></table></figure><h4 id="MonadPlus实例"><a href="#MonadPlus实例" class="headerlink" title="MonadPlus实例"></a>MonadPlus实例</h4><p>[]、Maybe都是MonadPlus的实例，mzero和mplus都由Alternative实现</p><h4 id="MonadPlus-Laws"><a href="#MonadPlus-Laws" class="headerlink" title="MonadPlus Laws"></a>MonadPlus Laws</h4><ul><li><code>Monoid laws</code></li><li><code>Left zero</code>：mzero &gt;&gt;= f <code>=</code> mzero</li><li><code>Right zero</code>：m &gt;&gt; mzero <code>=</code> mzero </li></ul><h4 id="常用函数-1"><a href="#常用函数-1" class="headerlink" title="常用函数"></a>常用函数</h4><ul><li><code>msum</code> = asum </li><li><code>mfilter</code>：  <figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">mfilter</span> p ma = <span class="keyword">do</span></span><br><span class="line">    a &lt;- ma</span><br><span class="line">    <span class="keyword">if</span> p a <span class="keyword">then</span> return a <span class="keyword">else</span> mzero</span><br></pre></td></tr></table></figure></li></ul><h3 id="ArrowPlus"><a href="#ArrowPlus" class="headerlink" title="ArrowPlus"></a>ArrowPlus</h3><p>ArrowZero和ArrowPlus分别为Arrow设置了Monoid中的单位元素和二元运算符，使之成为了一个幺半群：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Arrow</span> arr =&gt; <span class="type">ArrowZero</span> arr <span class="keyword">where</span></span></span><br><span class="line">    zeroArrow :: b `arr` c</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">ArrowZero</span> arr =&gt; <span class="type">ArrowPlus</span> arr <span class="keyword">where</span></span></span><br><span class="line">    (&lt;+&gt;) :: (b `arr` c) -&gt; (b `arr` c) -&gt; (b `arr` c)</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://wiki.haskell.org/Typeclassopedia">Typeclassopedia - Haskell wiki</a></li><li><a href="https://blog.csdn.net/zwvista/article/details/54863519">Haskell语言学习笔记（8）Monoid - zwvista</a></li><li><a href="https://blog.csdn.net/zwvista/article/details/62238541">Haskell语言学习笔记（16）Alternative - zwvista</a></li></ul><hr><div style="text-align: center;"><p style="font-size: 1.3rem; font-weight: bold;">目录</p><p>#0&nbsp;|&nbsp;<a href="/p/b3ca5c18.html">总章</a>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;<br>#1&nbsp;|&nbsp;<a href="/p/d63b5b5f.html">基础语法与函数</a>&emsp;&emsp;&emsp;<br>#2&nbsp;|&nbsp;<a href="/p/53e482b7.html">高阶函数与模块</a>&emsp;&emsp;&emsp;<br>#3&nbsp;|&nbsp;<a href="/p/369b7e08.html">类型与类型类</a>&emsp;&emsp;&emsp;&emsp;<br>#4&nbsp;|&nbsp;<a href="/p/a5bbe48a.html">输入输出与文件</a>&emsp;&emsp;&emsp;<br>#5&nbsp;|&nbsp;<a href="/p/290ecb74.html">函子、应用函子与单子</a><br>#6&nbsp;|&nbsp;<a href="/p/d4bb2633.html">半群与幺半群</a>&emsp;&emsp;&emsp;&emsp;<br>#7&nbsp;|&nbsp;<a href="/p/68ef8146.html">一些其它类型类</a>&emsp;&emsp;&emsp;<br>#A&nbsp;|&nbsp;<a href="/p/96c32eae.html">Haskell与范畴论</a>&emsp;&nbsp;&thinsp;</p></div>]]></content>
    
    
    <summary type="html">&lt;div style=&quot;display: flex; justify-content: space-between;&quot;&gt;

&lt;p&gt;&lt;a href=&quot;/p/290ecb74.html&quot;&gt;&amp;lt; #5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/p/68ef8146.html&quot;&gt;#7 &amp;gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;


&lt;h2 id=&quot;Semigroup&quot;&gt;&lt;a href=&quot;#Semigroup&quot; class=&quot;headerlink&quot; title=&quot;Semigroup&quot;&gt;&lt;/a&gt;Semigroup&lt;/h2&gt;&lt;p&gt;半群（semigroup）是一个集合$S$，它需要指定一个二元运算符$\oplus$，并且满足&lt;/p&gt;
&lt;p&gt;$$&lt;br&gt;a\oplus b \in S\quad a, b\in S&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;以及结合（associative）律：&lt;/p&gt;
&lt;p&gt;$$&lt;br&gt;(a\oplus b)\oplus c = a\oplus (b\oplus c)&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;这个二元运算符在Haskell的Semigroup中被定义为&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;函数：&lt;/p&gt;</summary>
    
    
    
    
    <category term="Haskell" scheme="https://blog.tonycrane.cc/tags/Haskell/"/>
    
    <category term="笔记" scheme="https://blog.tonycrane.cc/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>「Learn Haskell」#5 函子、应用函子与单子</title>
    <link href="https://blog.tonycrane.cc/p/290ecb74.html"/>
    <id>https://blog.tonycrane.cc/p/290ecb74.html</id>
    <published>2021-07-09T07:12:39.000Z</published>
    <updated>2021-07-25T04:54:13.884Z</updated>
    
    <content type="html"><![CDATA[<div style="display: flex; justify-content: space-between;"><p><a href="/p/a5bbe48a.html">&lt; #4</a></p><p><a href="/p/d4bb2633.html">#6 &gt;</a></p></div><h2 id="Functors"><a href="#Functors" class="headerlink" title="Functors"></a>Functors</h2><p>函子（Functor）是一个类型类（typeclass），和其他类型类一样，它规定了其实例类必须实现的功能（例如Eq类型类规定了它的实例必须是可以比较是否相等的），Functor规定类它的实例必须是可以进行映射的。Functor要求使用<code>fmap</code> :: (a -&gt; b) -&gt; f a -&gt; f b 函数来实现这个功能，它接收一个a -&gt; b类型的函数、一个内部元素为a类型的函子，返回一个内部元素为b类型的函子</p><span id="more"></span><p>Functor可以比作盒子，那fmap函数就相当于给定一个函数和一个盒子，将盒子中的全部元素都应用这个函数，再返回应用函数后的盒子</p><p>函子的实例必须是一个Kind为* -&gt; *的类型构造器，因为它要求其是一个盒子，盒子在接收内容后才会成为一个具体的类型。fmap中的<code>f a</code>和<code>f b</code>也是因为<code>f</code>是一个类型构造器，在接收类型a/b后才会变成一个具体类型（f a和f b）出现在函数类型声明中</p><p>Functor的定义是:</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Functor</span> f <span class="keyword">where</span></span></span><br><span class="line">    fmap :: (a -&gt; b) -&gt; f a -&gt; f b</span><br><span class="line">    (&lt;$) :: a -&gt; f a -&gt; f b</span><br><span class="line">    (&lt;$) = fmap . const</span><br></pre></td></tr></table></figure><p>可以发现Functor不仅需要fmap函数，还需要一个&lt;$函数，它接收一个a类型的变量和一个内容为b类型的函子，返回一个内容为a类型的函子；作用就是将传入的函子中的所有元素都替换为传入的第一个参数，比如：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; &#x27;a&#x27; &lt;$ [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="string">&quot;aaa&quot;</span></span><br></pre></td></tr></table></figure><p>但它不是声明一个函子实例必须的，因为它可以使用fmap和const函数复合来实现，其中const的类型签名：</p><p style="text-align: center;">const :: a -> b -> a</p><p>即接收两个参数，但始终只返回第一个参数</p><h3 id="Functor实例"><a href="#Functor实例" class="headerlink" title="Functor实例"></a>Functor实例</h3><h4 id><a href="#" class="headerlink" title="[]"></a>[]</h4><p>列表[]是一个函子，它通过map函数来实现fmap的功能：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Functor</span> [] <span class="keyword">where</span></span></span><br><span class="line">    fmap = map</span><br></pre></td></tr></table></figure><p style="text-align: center;">map :: (a -> b) -> [a] -> [b]</p><p>map和fmap要求的相同，达成的目的也一致。map接收一个函数和一个列表，它会将列表中的所有元素都应用这个函数后再返回这个列表</p><h4 id="Maybe"><a href="#Maybe" class="headerlink" title="Maybe"></a>Maybe</h4><p>Maybe也具有kind * -&gt; *，它也是一个函子：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Functor</span> <span class="type">Maybe</span> <span class="keyword">where</span></span></span><br><span class="line">    fmap f <span class="type">Nothing</span> = <span class="type">Nothing</span></span><br><span class="line">    fmap f (<span class="type">Just</span> x) = <span class="type">Just</span> (f x)</span><br><span class="line"></span><br><span class="line"><span class="title">ghci</span>&gt; fmap (*<span class="number">2</span>) <span class="type">Nothing</span></span><br><span class="line"><span class="type">Nothing</span></span><br><span class="line"><span class="title">ghci</span>&gt; fmap (*<span class="number">2</span>) (<span class="type">Just</span> <span class="number">2</span>)</span><br><span class="line"><span class="type">Just</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><h4 id="Either-a"><a href="#Either-a" class="headerlink" title="Either a"></a>Either a</h4><p>Either的kind是* -&gt; * -&gt; *，显然它不是函子，但是固定了一个传入类型的Either a的kind是* -&gt; *，也是一个函子：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Functor</span> (<span class="type">Either</span> <span class="title">a</span>) <span class="keyword">where</span></span></span><br><span class="line">    fmap f (<span class="type">Left</span> x) = <span class="type">Left</span> x</span><br><span class="line">    fmap f (<span class="type">Right</span> x) = <span class="type">Right</span> (f x)</span><br><span class="line"></span><br><span class="line"><span class="title">ghci</span>&gt; fmap (*<span class="number">2</span>) (<span class="type">Left</span> <span class="number">4</span>)</span><br><span class="line"><span class="type">Left</span> <span class="number">4</span></span><br><span class="line"><span class="title">ghci</span>&gt; fmap (*<span class="number">2</span>) (<span class="type">Right</span> <span class="number">4</span>)</span><br><span class="line"><span class="type">Right</span> <span class="number">8</span></span><br></pre></td></tr></table></figure><p>因为使用Either时一般用右值表示正常结果，左值表示异常信息，所以使用fmap时只对右值进行操作，如果时左值则保持不变（而且左值此时也作为确定类型确定值存在）</p><h4 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h4><p>IO也是一个函子，使用fmap对IO中内容应用函数：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Functor</span> <span class="type">IO</span> <span class="keyword">where</span></span></span><br><span class="line">    fmap f action = <span class="keyword">do</span></span><br><span class="line">        result &lt;- action</span><br><span class="line">        return (f result)</span><br><span class="line"></span><br><span class="line"><span class="title">ghci</span>&gt; fmap (<span class="string">&quot;input: &quot;</span>++) getLine</span><br><span class="line"><span class="title">test</span></span><br><span class="line"><span class="string">&quot;input: test&quot;</span></span><br></pre></td></tr></table></figure><h4 id="a"><a href="#a" class="headerlink" title="(,) a"></a>(,) a</h4><p>(,)表示一个二元组的类型构造器，(,) :: * -&gt; * -&gt; *，而确定了第一个元素的类型后就变成了(,) a，它的kind是* -&gt; *。也是一个函子，进行fmap函数时只对第二个元素应用：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Functor</span> ((,) a) <span class="keyword">where</span></span></span><br><span class="line">    fmap f (x, y) = (x, f y)</span><br></pre></td></tr></table></figure><p>只剩一个元素的三元组和四元组也都是函子，fmap也只对最后一个元素应用：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Functor</span> ((,,) a b) <span class="keyword">where</span></span></span><br><span class="line">    fmap f (a, b, c) = (a, b, f c)</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Functor</span> ((,,,) a b c) <span class="keyword">where</span></span></span><br><span class="line">    fmap f (a, b, c, d) = (a, b, c, f d)</span><br></pre></td></tr></table></figure><h4 id="gt-r"><a href="#gt-r" class="headerlink" title="(-&gt;) r"></a>(-&gt;) r</h4><p>-&gt;也是一个类型构造器，它的kind：</p><p style="text-align: center;">(->) :: * -> * -> *</p><p>一个映射（一元函数）的类型a -&gt; b也可以写成(-&gt;) a b，它是由类型a和类型b输入到类型构造器-&gt;中后形成的一个具体类型。所以确定了输入类型后的一元函数的类型就是(-&gt;) r（其中<code>r</code>是输入的类型）</p><p>规定的fmap的类型签名是：</p><p style="text-align: center;">fmap :: (a -> b) -> f a -> f b</p><p>其中的f是函子，而在这个实例中(-&gt;) r就是函子，将其带入f可以得到：</p><p style="text-align: center;">fmap :: (a -> b) -> ((-> r) a) -> ((-> r) b)</p><p>把其中的(-&gt;)换成中缀可以得到：</p><p style="text-align: center;">fmap :: (a -> b) -> (r -> a) -> (r -> b)</p><p>传入两个函数，一个类型为a -&gt; b，一个类型为r -&gt; a，返回一个函数，类型为r -&gt; b。<br>不难推测这个fmap是将这两个函数复合了，先对输入对r应用第二个函数产生类型a的结果，然后在应用第一个函数产生类型b的结果，所以(-&gt;) r定义的fmap是：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Functor</span> ((-&gt;) r) <span class="keyword">where</span></span></span><br><span class="line">    fmap f g = (\x -&gt; f (g x))</span><br></pre></td></tr></table></figure><p>所以(-&gt;) r的fmap其实就是函数复合(.)：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Functor</span> ((-&gt;) r) <span class="keyword">where</span></span></span><br><span class="line">    fmap = (.)</span><br></pre></td></tr></table></figure><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; :t fmap (*<span class="number">3</span>) (+<span class="number">100</span>)  </span><br><span class="line"><span class="title">fmap</span> (*<span class="number">3</span>) (+<span class="number">100</span>) :: (<span class="type">Num</span> a) =&gt; a -&gt; a  </span><br><span class="line"><span class="title">ghci</span>&gt; fmap (*<span class="number">3</span>) (+<span class="number">100</span>) <span class="number">1</span>  </span><br><span class="line"><span class="number">303</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; (*<span class="number">3</span>) `fmap` (+<span class="number">100</span>) $ <span class="number">1</span>  </span><br><span class="line"><span class="number">303</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; (*<span class="number">3</span>) . (+<span class="number">100</span>) $ <span class="number">1</span>  </span><br><span class="line"><span class="number">303</span></span><br></pre></td></tr></table></figure><h3 id="Functor-Laws"><a href="#Functor-Laws" class="headerlink" title="Functor Laws"></a>Functor Laws</h3><p>所有的函子都应该满足两个定律。这两个定律不是Haskell强制要求的，但应该确保一个函子满足这两个定律：</p><ol><li><code>fmap id = id</code>（其中id为函数<code>(\x -&gt; x)</code>）：即对一个函子fmap id，那它应该返回本身（fmap id a = id a = a，a为一个函子），比如： <figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; fmap id [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; fmap id (<span class="type">Just</span> <span class="number">2</span>)</span><br><span class="line"><span class="type">Just</span> <span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><code>fmap (f . g) = fmap f . fmap g</code>：即函子的fmap支持结合律<br> fmap (f . g) a = fmap f . fmap g $ a = fmap f (fmap g a)，其中<code>a</code>为一个函子<br> fmap (f . g) (Just x) = fmap f (fmap g (Just x)) = fmap f (Just (g x)) = Just (f (g x)) <figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; fmap ((*<span class="number">3</span>) . (+<span class="number">100</span>)) (<span class="type">Just</span> <span class="number">1</span>)</span><br><span class="line"><span class="type">Just</span> <span class="number">303</span></span><br></pre></td></tr></table></figure></li></ol><p>满足第一个定律的函子一定满足第二个定律，所以只要检查函子是否满足第一个定律即可</p><h3 id="Intuition"><a href="#Intuition" class="headerlink" title="Intuition"></a>Intuition</h3><p>对于函子和fmap，有两种理解方法</p><ol><li>函子是一种容器（container）；fmap接收一个函数和一个容器，在容器内部应用这个函数，返回应用后的新容器</li><li>函子是一种计算上下文（context）；fmap是柯里化的，把其类型签名看作<p style="text-align: center;">fmap :: (a -> b) -> (f a -> f b)</p>接收一个函数返回另一个函数，传入函数g :: a -> b，fmap将其转换为新的函数<p style="text-align: center;">fmap g :: f a -> f b</p>使普通的函数g可以在计算上下文<code>f</code>中使用，这种转换也被称为提升（lift）</li></ol><h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><h4 id="lt-gt"><a href="#lt-gt" class="headerlink" title="&lt;$&gt;"></a>&lt;$&gt;</h4><p><code>&lt;$&gt;</code>函数是<code>fmap</code>的中缀形式（它看着类似<code>$</code>，<code>f $ 3</code>将f应用在单个值3上，而<code>f &lt;$&gt; [1, 2, 3]</code>将f应用在一个函子上，也就是应用在一个函子内部的所有值上）：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; fmap (*<span class="number">2</span>) (<span class="type">Just</span> <span class="number">2</span>)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="title">ghci</span>&gt; (*<span class="number">2</span>) &lt;$&gt; <span class="type">Just</span> <span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><h4 id="gt"><a href="#gt" class="headerlink" title="$&gt;"></a>$&gt;</h4><p><code>$&gt;</code>函数包含在<code>Data.Functor</code>模块中</p><p style="text-align: center;">($>) :: Functor f => f a -> b -> f b</p> <p>Functor定义时要求了<code>&lt;$</code>函数，将函子内部的元素全部替换为指定的某个值，而<code>$&gt;</code>正好将<code>&lt;$</code>函数的两个参数反了过来，相当于<code>flip (&lt;$)</code>：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; &#x27;a&#x27; &lt;$ [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="string">&quot;aaa&quot;</span></span><br><span class="line"><span class="title">ghci</span>&gt; [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] $&gt; &#x27;a&#x27;</span><br><span class="line"><span class="string">&quot;aaa&quot;</span></span><br></pre></td></tr></table></figure><h4 id="void"><a href="#void" class="headerlink" title="void"></a>void</h4><p><code>void</code>函数也包含在<code>Data.Functor</code>模块中</p><p style="text-align: center;">void :: Functor f => f a -> f ()</p><p>void函数把一个函子内部的全部元素都变成空（<code>()</code>），<code>void x</code>相当于<code>() &lt;$ x</code>：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; void [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">[(), (), ()]</span><br><span class="line"><span class="title">ghci</span>&gt; void (<span class="type">Just</span> <span class="number">2</span>)</span><br><span class="line"><span class="type">Just</span> ()</span><br></pre></td></tr></table></figure><h2 id="Applicative-Functor"><a href="#Applicative-Functor" class="headerlink" title="Applicative Functor"></a>Applicative Functor</h2><p>应用函子（Applicative Functor）是函子的升级版，它包含在<code>Control.Applicative</code>模块中。</p><p>fmap进行的操作是将一个普通一元函数应用在一个函子内部。而如果要将一个包含函数的函子应用在另一个函子上，fmap就处理不了了，但是应用函子的方法可以处理。应用函子的定义：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Functor</span> f =&gt; <span class="type">Applicative</span> f <span class="keyword">where</span></span></span><br><span class="line">    pure :: a -&gt; f a</span><br><span class="line">    (&lt;*&gt;) :: f (a -&gt; b) -&gt; f a -&gt; f b</span><br></pre></td></tr></table></figure><p>应用函子要求实现两个函数：</p><ul><li><code>pure</code> :: a -&gt; f a，不难理解，pure接收一个值，并将其放在默认的上下文/容器中。对于列表，pure = []；对于Maybe，pure = Just</li><li><code>&lt;*&gt;</code> :: f (a -&gt; b) -&gt; f a -&gt; f b，类似于fmap :: (a -&gt; b) -&gt; f a -&gt; f b，但不同的是&lt;*&gt;的第一个参数的类型是f (a -&gt; b)不是a -&gt; b。所以&lt;*&gt;的第一个参数是在上下文中的函数，而不是一个普通函数。换句话说，&lt;*&gt;接收一个装有函数的函子和另一个函子，应用函数后返回新的函子。</li></ul><h3 id="Applicative-Functor实例"><a href="#Applicative-Functor实例" class="headerlink" title="Applicative Functor实例"></a>Applicative Functor实例</h3><h4 id="Maybe-1"><a href="#Maybe-1" class="headerlink" title="Maybe"></a>Maybe</h4><p>Maybe是一个应用函子：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Applicative</span> <span class="type">Maybe</span> <span class="keyword">where</span></span></span><br><span class="line">    pure = <span class="type">Just</span></span><br><span class="line">    <span class="type">Nothing</span> &lt;*&gt; _ = <span class="type">Nothing</span></span><br><span class="line">    (<span class="type">Just</span> f) &lt;*&gt; something = fmap f something</span><br></pre></td></tr></table></figure><ul><li><code>pure</code>函数：将一个值放在默认的上下文中，而对于Maybe，默认的上下文就是Just，所以pure x = Just x</li><li><code>&lt;*&gt;</code>函数：将装有函数的函子中的函数应用另一个函子中<ul><li>第一个参数是Nothing，即第一个函子不包含函数，那返回的结果就也会是Nothing</li><li>第一个参数是装有函数f的函子Just f，将其中的函数f应用在函子something中，只需要将f提取出来使用fmap应用在函子something中即可</li></ul></li></ul><p>实际应用的例子：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; <span class="type">Just</span> (+<span class="number">3</span>) &lt;*&gt; <span class="type">Just</span> <span class="number">9</span></span><br><span class="line"><span class="type">Just</span> <span class="number">12</span></span><br><span class="line"><span class="title">ghci</span>&gt; pure (+<span class="number">3</span>) &lt;*&gt; <span class="type">Just</span> <span class="number">9</span></span><br><span class="line"><span class="type">Just</span> <span class="number">12</span></span><br><span class="line"><span class="title">ghci</span>&gt; (+<span class="number">3</span>) &lt;$&gt; <span class="type">Just</span> <span class="number">9</span></span><br><span class="line"><span class="type">Just</span> <span class="number">12</span></span><br><span class="line"><span class="title">ghci</span>&gt; <span class="type">Nothing</span> &lt;*&gt; <span class="type">Just</span> <span class="number">9</span></span><br><span class="line"><span class="type">Nothing</span></span><br></pre></td></tr></table></figure><p>第一个例子，Just (+3)是一个包含函数(+3)的函子，将其应用在函子Just 9中，将Just (+3)中的函数(+3)提取出来，应用在Just 9中，得到了Just 12</p><p>第二个例子，可以发现，在这里pure (+3)和Just (+3)等效，因为pure将函数(+3)放在默认上下文中，也就是Just中了</p><p>而&lt;*&gt;能做的不止这些，他可以连续传入更多函子作为参数，比如：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; pure (+) &lt;*&gt; <span class="type">Just</span> <span class="number">3</span> &lt;*&gt; <span class="type">Just</span> <span class="number">9</span></span><br><span class="line"><span class="type">Just</span> <span class="number">12</span></span><br><span class="line"><span class="title">ghci</span>&gt; pure (\x y z -&gt; x + y + z) &lt;*&gt; <span class="type">Just</span> <span class="number">3</span> &lt;*&gt; <span class="type">Just</span> <span class="number">4</span> &lt;*&gt; <span class="type">Just</span> <span class="number">5</span></span><br><span class="line"><span class="type">Just</span> <span class="number">12</span></span><br></pre></td></tr></table></figure><p>&lt;*&gt;函数一样是默认左结合的，pure (+) &lt;*&gt; Just 3 &lt;*&gt; Just 9相当于(pure (+) &lt;*&gt; Just 3) &lt;*&gt; Just 9，而pure (+) &lt;*&gt; Just 3将(+)应用在Just 3上，得到的就是Just (+3)一个包含函数的函子，又将其通过&lt;*&gt;应用在了Just 9上，得到了Just 12:</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  pure (\x y z -&gt; x + y + z) &lt;*&gt; <span class="type">Just</span> <span class="number">3</span> &lt;*&gt; <span class="type">Just</span> <span class="number">4</span> &lt;*&gt; <span class="type">Just</span> <span class="number">5</span></span><br><span class="line">= (pure (\x y z -&gt; x + y + z) &lt;*&gt; <span class="type">Just</span> <span class="number">3</span>) &lt;*&gt; <span class="type">Just</span> <span class="number">4</span> &lt;*&gt; <span class="type">Just</span> <span class="number">5</span></span><br><span class="line">= (<span class="type">Just</span> (\y z -&gt; <span class="number">3</span> + y + z) &lt;*&gt; <span class="type">Just</span> <span class="number">4</span>) &lt;*&gt; <span class="type">Just</span> <span class="number">5</span></span><br><span class="line">= <span class="type">Just</span> (\z -&gt; <span class="number">3</span> + <span class="number">4</span> + z) &lt;*&gt; <span class="type">Just</span> <span class="number">5</span> = <span class="type">Just</span> (+<span class="number">7</span>) &lt;*&gt; <span class="type">Just</span> <span class="number">5</span></span><br><span class="line">= <span class="type">Just</span> <span class="number">12</span></span><br></pre></td></tr></table></figure><p>所以可以使用类似pure f &lt;*&gt; x &lt;*&gt; y &lt;*&gt; …来将一个普通多元函数f应用在多个函子上。</p><p>而且pure f &lt;*&gt; x实际上先将普通函数f放在上下文中，然后执行&lt;*&gt;时再将其提取出来执行fmap，所以它就相当于将普通函数应用在函子x上，即fmap f x，也可以写成f &lt;$&gt; x。所以常用的写法就是：</p><p style="text-align: center;">f <$> x <*> y <*> ...</*></*></$></p><h4 id="-1"><a href="#-1" class="headerlink" title="[]"></a>[]</h4><p>列表也是一个应用函子：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Applicative</span> [] <span class="keyword">where</span></span></span><br><span class="line">    pure x = [x]</span><br><span class="line">    fs &lt;*&gt; xs = [f x | f &lt;- fs, x &lt;- xs]</span><br></pre></td></tr></table></figure><ul><li><code>pure</code>函数：对于列表而言，一个值的最小上下文就是只包含这个值的列表[x]</li><li><code>&lt;*&gt;</code>函数：列表的&lt;*&gt;函数是通过列表推导来实现的。因为不同于Maybe的Just只包含一个值，列表可以包含很多值，第一个传入的列表中可能会包含很多函数，第二个传入的列表也会包含很多值，所以就需要先从第一个列表中取出一个函数然后依次应用在第二个列表的每个值中，再取出第一个列表中的第二个函数应用在第二个列表的每个值中……最终返回得到的所有结果的列表</li></ul><p>使用例子：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; [(+<span class="number">3</span>), (*<span class="number">2</span>)] &lt;*&gt; [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">[<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">4</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; [(+), (*)]  &lt;*&gt;  [<span class="number">1</span>, <span class="number">2</span>]  &lt;*&gt;  [<span class="number">3</span>, <span class="number">4</span>]  </span><br><span class="line">[<span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br></pre></td></tr></table></figure><h4 id="IO-1"><a href="#IO-1" class="headerlink" title="IO"></a>IO</h4><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Applicative</span> <span class="type">IO</span> <span class="keyword">where</span></span></span><br><span class="line">    pure = return</span><br><span class="line">    a &lt;*&gt; b = <span class="keyword">do</span></span><br><span class="line">        f &lt;- a</span><br><span class="line">        x &lt;- b</span><br><span class="line">        return (f x)</span><br></pre></td></tr></table></figure><p>也不难理解，pure函数直接将传入的值return，相当于放在了IO的上下文中。而&lt;*&gt;函数先将两个IO中内容提取出来，然后应用函数后return，形成新的IO函子</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; (++) &lt;$&gt; getLine &lt;*&gt; getLine</span><br><span class="line"><span class="type">Line1</span></span><br><span class="line"><span class="type">Line2</span></span><br><span class="line"><span class="string">&quot;Line1Line2&quot;</span></span><br></pre></td></tr></table></figure><h4 id="gt-r-1"><a href="#gt-r-1" class="headerlink" title="(-&gt;) r"></a>(-&gt;) r</h4><p>(-&gt;) r同样也是一个应用函子，和函子的分析一样，先来分析它的&lt;*&gt;函数的类型签名：</p><p style="text-align: center;"><*> :: f (a -> b) -> f a -> f b</*></p><p>其中f为(-&gt;) r，将其代入并替换为中缀：</p><p style="text-align: center;"><*> :: (r -> a -> b) -> (r -> a) -> (r -> b)</*></p><p>可以看出它接收两个函数f :: r -&gt; a -&gt; b、g :: r -&gt; a，返回另一个函数h :: (r -&gt; b)</p><p>那么返回的函数的输入为r，输出为b，所以先对输入应用函数g得到a，然后在对r和a应用f得到b，所以推测&lt;*&gt;函数的操作就是：</p><p style="text-align: center;">\x -> f x (g x)</p><p>于是：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Applicative</span> ((-&gt;) r) <span class="keyword">where</span></span></span><br><span class="line">    pure x = (\_ -&gt; x)</span><br><span class="line">    f &lt;*&gt; g = \x -&gt; f x (g x)</span><br></pre></td></tr></table></figure><p>将一个值放在函数的上下文中，最小上下文就应该返回这个值本身，所以pure函数定义为(_ -&gt; x)，即无论输入什么，都返回x</p><p>应用函子的&lt;*&gt;函数接收两个函子，返回一个新的函子。对于(-&gt;) r，它接收两个函数，返回一个新的函数。具体例子：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; (+) &lt;$&gt; (+<span class="number">3</span>) &lt;*&gt; (*<span class="number">100</span>) $ <span class="number">5</span></span><br><span class="line"><span class="number">508</span></span><br></pre></td></tr></table></figure><p>执行这句时发生了什么？：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  (+) &lt;$&gt; (+<span class="number">3</span>) &lt;*&gt; (*<span class="number">100</span>) $ <span class="number">5</span></span><br><span class="line">= ((+) &lt;$&gt; (+<span class="number">3</span>)) &lt;*&gt; (*<span class="number">100</span>) $ <span class="number">5</span></span><br><span class="line">= ((+) . (+<span class="number">3</span>)) &lt;*&gt; (*<span class="number">100</span>) $ <span class="number">5</span> = (\a -&gt; (+) ((+<span class="number">3</span>) a)) &lt;*&gt; (*<span class="number">100</span>) $ <span class="number">5</span></span><br><span class="line">= (\a b -&gt; (a + <span class="number">3</span> + b)) &lt;*&gt; (*<span class="number">100</span>) $ <span class="number">5</span></span><br><span class="line">= (\x -&gt; x + <span class="number">3</span> + ((*<span class="number">100</span>) x)) $ <span class="number">5</span></span><br><span class="line">= (\x -&gt; x + <span class="number">3</span> + x * <span class="number">100</span>) $ <span class="number">5</span></span><br><span class="line">= <span class="number">5</span> + <span class="number">3</span> + <span class="number">5</span> * <span class="number">100</span> = <span class="number">508</span></span><br><span class="line">= (<span class="number">5</span> + <span class="number">3</span>) + (<span class="number">5</span> * <span class="number">100</span>)</span><br></pre></td></tr></table></figure><p>所以就相当于先对输入分别执行(+3)和(*100)，然后将两个结果执行了(+)</p><p>同样：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; (\x y z -&gt; [x,y,z]) &lt;$&gt; (+<span class="number">3</span>) &lt;*&gt; (*<span class="number">2</span>) &lt;*&gt; (/<span class="number">2</span>) $ <span class="number">5</span>  </span><br><span class="line">[<span class="number">8.0</span>,<span class="number">10.0</span>,<span class="number">2.5</span>]  </span><br></pre></td></tr></table></figure><p>先对5分别执行(+3)、(*2)、(/2)，然后将得到的三个结果传入(\x y z -&gt; [x,y,z])得到了最终的结果</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  f &lt;$&gt; g &lt;*&gt; h &lt;*&gt; i</span><br><span class="line">= (\x -&gt; f (g x) (h x) (i x))</span><br></pre></td></tr></table></figure><h4 id="ZipList"><a href="#ZipList" class="headerlink" title="ZipList"></a>ZipList</h4><p>普通列表实现的&lt;*&gt;函数是将每个函数应用在所有值上，但还有一种实现方法是将每个函数应用在对应值上，因为同一个类型不能存在同一函数的两种实现形式，所以引入了一个新的列表ZipList，包含在<code>Control.Applicative</code>模块中</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Applicative</span> <span class="type">ZipList</span> <span class="keyword">where</span></span></span><br><span class="line">    pure x = <span class="type">ZipList</span> (repeat x)</span><br><span class="line">    <span class="type">ZipList</span> fs &lt;*&gt; <span class="type">ZipList</span> xs = <span class="type">ZipList</span> (zipWith ($) fs xs)</span><br></pre></td></tr></table></figure><p>但是ZipList并不是Show的实例，所以不能直接显示出来，要使用<code>getZipList</code>来获取它内部的列表：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; getZipList $ (+) &lt;$&gt; <span class="type">ZipList</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] &lt;*&gt; <span class="type">ZipList</span> [<span class="number">100</span>,<span class="number">100.</span>.]  </span><br><span class="line">[<span class="number">101</span>,<span class="number">102</span>,<span class="number">103</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; getZipList $ (,,) &lt;$&gt; <span class="type">ZipList</span> <span class="string">&quot;dog&quot;</span> &lt;*&gt; <span class="type">ZipList</span> <span class="string">&quot;cat&quot;</span> &lt;*&gt; <span class="type">ZipList</span> <span class="string">&quot;rat&quot;</span>  </span><br><span class="line">[(&#x27;d&#x27;,&#x27;c&#x27;,&#x27;r&#x27;),(&#x27;o&#x27;,&#x27;a&#x27;,&#x27;a&#x27;),(&#x27;g&#x27;,&#x27;t&#x27;,&#x27;t&#x27;)]  </span><br></pre></td></tr></table></figure><h3 id="Applicative-Functor-Laws"><a href="#Applicative-Functor-Laws" class="headerlink" title="Applicative Functor Laws"></a>Applicative Functor Laws</h3><p>应用函子一般有四个定律，都是保证pure的正确性的：</p><ol><li><code>Identity law</code>：pure id &lt;*&gt; v = v</li><li><code>Homomorphism</code>：pure f &lt;*&gt; pure x = pure (f x)</li><li><code>Interchange</code>：u &lt;*&gt; pure v = pure ($ v) &lt;*&gt; u</li><li><code>Composition</code>：u &lt;*&gt; (v &lt;*&gt; w) = pure (.) &lt;*&gt; u &lt;*&gt; v &lt;*&gt; w</li></ol><h3 id="Intuition-1"><a href="#Intuition-1" class="headerlink" title="Intuition"></a>Intuition</h3><p>理解应用函子的方式也是将其看作是计算上下文（context），比如要计算：<br>$$<br>[[\ \ g\ x_1\ x_2\ \cdots\ x_n\ \ ]]<br>$$</p><p>其中$x_i$的类型是$f\ t_i$，$f$是应用函子（看作上下文）。而函数$g$的类型是：</p><p>$$<br>t_1\to t_2\to\cdots\to t_n\to t<br>$$</p><p>所以双括号（idiom brackets）的作用是将一个普通函数应用在包含在上下文中的参数上。$g\ x_1$可以通过fmap来执行，将$g$提升（lift）到$x_1$的上下文中，然后应用在$x_1$上。但是fmap返回的结果是一个函子，换句话说，$g\ x_1$结果的类型是：</p><p>$$<br>f\ \ (t_2\to t_3\to\cdots\to t_n\to t)<br>$$</p><p>但是fmap并不能将上下文中的函数应用在上下文中的参数上，于是应用函子的&lt;*&gt;函数提供了这个方法，所以计算$[[\ g\ x_1\ x_2\ \cdots\ x_n\ ]]$，只需要：</p><p style="text-align: center;">g <$> x1 <*> x2 <*> ... <*> xn</*></*></*></$></p><p>而pure函数的作用就是将一个不在上下文中的值（函数或参数）提升到上下文中，但不进行其他操作。比如参数$x_2$如果不在上下文中，需要用pure提升到上下文中才能按上面计算：</p><p style="text-align: center;">g <$> x1 <*> pure x2 <*> ... <*> xn</*></*></*></$></p><h3 id="常用函数-1"><a href="#常用函数-1" class="headerlink" title="常用函数"></a>常用函数</h3><h4 id="liftA-amp-liftA2-amp-liftA3"><a href="#liftA-amp-liftA2-amp-liftA3" class="headerlink" title="liftA &amp; liftA2 &amp; liftA3"></a>liftA &amp; liftA2 &amp; liftA3</h4><p style="text-align: center;">liftA :: Applicative f => (a -> b) -> f a -> f b</p><p style="text-align: center;">liftA2 :: Applicative f => (a -> b -> c) -> f a -> f b -> f c</p><p style="text-align: center;">liftA3 :: Applicative f => (a -> b -> c -> d) -> f a -> f b -> f c -> f d</p><p>不难推测liftA就是fmap，<code>liftA2 f x1 x2</code>相当于<code>f &lt;$&gt; x1 &lt;*&gt; x2</code>，<code>liftA3 f x1 x2 x3</code>相当于<code>f &lt;$&gt; x1 &lt;*&gt; x2 &lt;*&gt; x3</code></p><h4 id="lt-amp-gt"><a href="#lt-amp-gt" class="headerlink" title="&lt;* &amp; *&gt;"></a>&lt;* &amp; *&gt;</h4><p>类型类似函子的<code>&lt;$</code>和<code>$&gt;</code>：</p><p style="text-align: center;">(&lt;*) :: Applicative f => f a -> f b -> f a</p><p style="text-align: center;">(*>) :: Applicative f => f a -> f b -> f b</p><p>&lt;*接收两个函子，如果两个函子中又一个为空，就返回空，否则返回的类型与第一个函子相同。*&gt;反过来</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; <span class="type">Just</span> <span class="number">3</span> &lt;* <span class="type">Just</span> <span class="number">4</span></span><br><span class="line"><span class="type">Just</span> <span class="number">3</span></span><br><span class="line"><span class="title">ghci</span>&gt; <span class="type">Just</span> <span class="number">3</span> *&gt; <span class="type">Just</span> <span class="number">4</span></span><br><span class="line"><span class="type">Just</span> <span class="number">4</span></span><br><span class="line"><span class="title">ghci</span>&gt; <span class="type">Nothing</span> &lt;* <span class="type">Just</span> <span class="number">3</span></span><br><span class="line"><span class="type">Nothing</span></span><br><span class="line"><span class="title">ghci</span>&gt; <span class="type">Nothing</span> *&gt; <span class="type">Just</span> <span class="number">3</span></span><br><span class="line"><span class="type">Nothing</span></span><br><span class="line"><span class="title">ghci</span>&gt; [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] &lt;* [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] *&gt; [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">[<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; [] &lt;* [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">[]</span><br><span class="line"><span class="title">ghci</span>&gt; [] *&gt; [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">[]</span><br></pre></td></tr></table></figure><h4 id="lt-gt-1"><a href="#lt-gt-1" class="headerlink" title="&lt;**&gt;"></a>&lt;**&gt;</h4><p style="text-align: center;">(**) :: Applicative f => f a -> f (a -> b) -> f b</p><p>接收的参数是&lt;*&gt;反转过来的，即先接收一个参数函子，然后接收一个函数函子，在将其应用返回。但是和flip(&lt;*&gt;)不同，它先取参数函子的每个参数，然后再取函数函子中的函数逐个应用：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; [(+<span class="number">1</span>), (+<span class="number">2</span>), (+<span class="number">3</span>)] &lt;*&gt; [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">[<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; [<span class="number">1</span>, <span class="number">2</span>] &lt;**&gt; [(+<span class="number">1</span>), (+<span class="number">2</span>), (+<span class="number">3</span>)]</span><br><span class="line">[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; flip(&lt;*&gt;) [<span class="number">1</span>, <span class="number">2</span>] [(+<span class="number">1</span>), (+<span class="number">2</span>), (+<span class="number">3</span>)]</span><br><span class="line">[<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br></pre></td></tr></table></figure><h4 id="when-amp-unless"><a href="#when-amp-unless" class="headerlink" title="when &amp; unless"></a>when &amp; unless</h4><p style="text-align: center;">when :: Applicative f => Bool -> f () -> f ()</p><p>传入的第一个是一个结果为Bool类型的测试，如果测试为True，则调用第二个参数，否则返回pure ()。（when函数在上文IO操作中使用过）</p><p>unless则与when相反，测试为True返回pure ()</p><h4 id="sequenceA"><a href="#sequenceA" class="headerlink" title="sequenceA"></a>sequenceA</h4><p style="text-align: center;">sequenceA :: (Traversable t, Applicative f) => t (f a) -> f (t a)</p><p>应用在列表上时，它的类型相当于：</p><p style="text-align: center;">[f a] -> f [a]</p><p>所以在列表上它的使用方法：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; sequenceA [<span class="type">Just</span> <span class="number">3</span>, <span class="type">Just</span> <span class="number">2</span>, <span class="type">Just</span> <span class="number">1</span>]  </span><br><span class="line"><span class="type">Just</span> [<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]  </span><br><span class="line"><span class="title">ghci</span>&gt; sequenceA [<span class="type">Just</span> <span class="number">3</span>, <span class="type">Nothing</span>, <span class="type">Just</span> <span class="number">1</span>]  </span><br><span class="line"><span class="type">Nothing</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; sequenceA [(+<span class="number">3</span>),(+<span class="number">2</span>),(+<span class="number">1</span>)] <span class="number">3</span>  </span><br><span class="line">[<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>]  </span><br><span class="line"><span class="title">ghci</span>&gt; sequenceA [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]]  </span><br><span class="line">[[<span class="number">1</span>,<span class="number">4</span>],[<span class="number">1</span>,<span class="number">5</span>],[<span class="number">1</span>,<span class="number">6</span>],[<span class="number">2</span>,<span class="number">4</span>],[<span class="number">2</span>,<span class="number">5</span>],[<span class="number">2</span>,<span class="number">6</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">3</span>,<span class="number">5</span>],[<span class="number">3</span>,<span class="number">6</span>]]  </span><br><span class="line"><span class="title">ghci</span>&gt; sequenceA [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>],[]]  </span><br><span class="line">[]  </span><br></pre></td></tr></table></figure><p>它在对同一个参数应用不同函数时很有用：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; map (\f -&gt; f <span class="number">7</span>) [(&gt;<span class="number">4</span>), (&lt;<span class="number">10</span>), odd]  </span><br><span class="line">[<span class="type">True</span>,<span class="type">True</span>,<span class="type">True</span>]  </span><br><span class="line"><span class="title">ghci</span>&gt; sequenceA [(&gt;<span class="number">4</span>), (&lt;<span class="number">10</span>), odd] <span class="number">7</span>  </span><br><span class="line">[<span class="type">True</span>,<span class="type">True</span>,<span class="type">True</span>]  </span><br></pre></td></tr></table></figure><h2 id="Monad"><a href="#Monad" class="headerlink" title="Monad"></a>Monad</h2><p>单子（Monad）是对Applicative Functor的扩展（但是诞生比Applicative早），Functor的<code>&lt;$&gt;</code>函数实现了将普通函数应用在上下文值上，Applicative的<code>&lt;*&gt;</code>函数将上下文中函数应用在上下文值上。而Monad提供了一个函数<code>&gt;&gt;=</code>（bind），将一个接收普通值返回上下文值的函数应用在上下文值上：</p><!--more--><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Applicative</span> m =&gt; <span class="type">Monad</span> m <span class="keyword">where</span></span></span><br><span class="line">    (&gt;&gt;=) :: m a -&gt; (a -&gt; m b) -&gt; m b</span><br><span class="line">    (&gt;&gt;) :: m a -&gt; m b -&gt; m b</span><br><span class="line">    return :: a -&gt; m a</span><br><span class="line">    m &gt;&gt; n = m &gt;&gt;= \_ -&gt; n</span><br><span class="line">    return = pure</span><br></pre></td></tr></table></figure><ul><li><code>return</code>函数：和<code>pure</code>一样，只是有另一个名字</li><li><code>&gt;&gt;</code>函数：提供了默认的实现方法，它的作用和Applicative的*&gt;函数一样</li><li><code>&gt;&gt;=</code>函数（bind）：比Applicative升级的函数，第一个参数是一个单子，第二个参数是一个接收值返回单子的函数，将这个函数应用在第一个参数单子中的值上，并返回得到的新单子</li></ul><h3 id="Monad实例"><a href="#Monad实例" class="headerlink" title="Monad实例"></a>Monad实例</h3><h4 id="Maybe-2"><a href="#Maybe-2" class="headerlink" title="Maybe"></a>Maybe</h4><p>Maybe是一个单子实例，Applicative已经为它实现了return，因此只需要&gt;&gt;=函数：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Monad</span> <span class="type">Maybe</span> <span class="keyword">where</span></span></span><br><span class="line">    (<span class="type">Just</span> x) &gt;&gt;= f = f x </span><br><span class="line">    <span class="type">Nothing</span>  &gt;&gt;= _ = <span class="type">Nothing</span></span><br></pre></td></tr></table></figure><p>根据定义就很容易实现Maybe的&gt;&gt;=函数了，而且也很好理解</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; <span class="type">Just</span> <span class="number">1</span> &gt;&gt;= \x -&gt; <span class="type">Just</span> (x + <span class="number">1</span>)</span><br><span class="line"><span class="type">Just</span> <span class="number">2</span></span><br><span class="line"><span class="title">ghci</span>&gt; <span class="type">Just</span> <span class="number">1</span> &gt;&gt;= \x -&gt; return (x + <span class="number">1</span>)</span><br><span class="line"><span class="type">Just</span> <span class="number">2</span></span><br><span class="line"><span class="title">ghci</span>&gt; <span class="type">Nothing</span> &gt;&gt;= \x -&gt; <span class="type">Just</span> (x + <span class="number">1</span>)</span><br><span class="line"><span class="type">Nothing</span></span><br><span class="line"><span class="title">ghci</span>&gt; <span class="type">Just</span> <span class="number">1</span> &gt;&gt;= \x -&gt; <span class="type">Just</span> (x + <span class="number">1</span>) &gt;&gt; <span class="type">Nothing</span> &gt;&gt;= \y -&gt; <span class="type">Just</span> (y + <span class="number">1</span>)</span><br><span class="line"><span class="type">Nothing</span></span><br></pre></td></tr></table></figure><p>最后一个例子中出现了&gt;&gt; Nothing，这时Nothing前的部分全都相当于没用，因为&gt;&gt;操作符的左右两边只要有一个出现Nothing，那整体就会是Nothing。这个特性可以用于在中途随时判断失误，只要有一处失误，结果就会是Nothing</p><h4 id="-2"><a href="#-2" class="headerlink" title="[]"></a>[]</h4><p>列表也是一个单子：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Monad</span> [] <span class="keyword">where</span></span></span><br><span class="line">    xs &gt;&gt;= f = concat (map f xs)</span><br></pre></td></tr></table></figure><p>将这个函数应用在xs的每个值上，将返回的所有列表平铺成一个列表：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>] &gt;&gt;= \x -&gt; [x,-x]  </span><br><span class="line">[<span class="number">3</span>,<span class="number">-3</span>,<span class="number">4</span>,<span class="number">-4</span>,<span class="number">5</span>,<span class="number">-5</span>]  </span><br><span class="line"><span class="title">ghci</span>&gt; [<span class="number">1</span>,<span class="number">2</span>] &gt;&gt;= \n -&gt; [&#x27;a&#x27;,&#x27;b&#x27;] &gt;&gt;= \ch -&gt; return (n,ch)  </span><br><span class="line">[(<span class="number">1</span>,&#x27;a&#x27;),(<span class="number">1</span>,&#x27;b&#x27;),(<span class="number">2</span>,&#x27;a&#x27;),(<span class="number">2</span>,&#x27;b&#x27;)]  </span><br></pre></td></tr></table></figure><h4 id="IO-2"><a href="#IO-2" class="headerlink" title="IO"></a>IO</h4><p>IO也是一个单子，但是实现方法比较深奥（逃</p><h4 id="gt-r-2"><a href="#gt-r-2" class="headerlink" title="(-&gt;) r"></a>(-&gt;) r</h4><p>(-&gt;) r也是一个单子，和Functor、Applicative一样，先分析它的&gt;&gt;=类型签名：</p><p style="text-align: center;">(>>=) :: (-> r) a -> (a -> (-> r) b) -> (-> r) b</p><p style="text-align: center;">(>>=) :: (r -> a) -> (a -> r -> b) -> (r -> b)</p><p>也可以看出来，它接收两个函数f :: r -&gt; a、g :: a -&gt; r -&gt; b，然后返回一个新的函数h :: r -&gt; b</p><p>那么函数h接收一个类型为r的参数，返回一个类型为b的值。所以先对输入应用f得到类型为a的中间值，然后再将这个值和输入参数一起传入函数g得到结果。所以函数h的定义应该是：</p><p style="text-align: center;">\x -> g (f x) x</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Monad</span> ((-&gt;) r) <span class="keyword">where</span></span></span><br><span class="line">    f &gt;&gt;= g = \x -&gt; g (f x) x</span><br></pre></td></tr></table></figure><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; (+<span class="number">3</span>) &gt;&gt;= (+) $ <span class="number">1</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="title">ghci</span>&gt; (+) &lt;$&gt; (+<span class="number">3</span>) &lt;*&gt; id $ <span class="number">1</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><h3 id="do-notation"><a href="#do-notation" class="headerlink" title="do-notation"></a>do-notation</h3><p>Haskell的do语句为链式的&gt;&gt;=应用提供了类似命令式（imperative style）的语法糖。比如<code>a &gt;&gt;= \x -&gt; b &gt;&gt; c &gt;&gt;= \y -&gt; d</code>：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">a</span> &gt;&gt;= \x -&gt;</span><br><span class="line"><span class="title">b</span> &gt;&gt;</span><br><span class="line"><span class="title">c</span> &gt;&gt;= \y -&gt;</span><br><span class="line"><span class="title">d</span></span><br></pre></td></tr></table></figure><p>其中有abcd四个值，可以看出a中内容绑定到了x上，c中内容绑定到了y上。使用do语句来表示这个操作可以写成：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">do</span> &#123; x &lt;- a </span><br><span class="line">   ;      b </span><br><span class="line">   ; y &lt;- c </span><br><span class="line">   ;      d </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>其中的大括号和分号可以省略不写（挤在一行时不能省略）。do语句也只是一个语法糖，它可以递归地转换成普通的Monad操作语句：</p><ul><li><code>do e</code>：e</li><li><code>do &#123; e; ... &#125;</code>：e &gt;&gt; do { … }</li><li><code>do &#123; v &lt;- e; ... &#125;</code>：e &gt;&gt;= \v -&gt; do { … }</li><li><code>do &#123; let ...; ... &#125;</code>：let … in do { … }</li></ul><h4 id="ApplicativeDo"><a href="#ApplicativeDo" class="headerlink" title="ApplicativeDo"></a>ApplicativeDo</h4><p>比如如下一个do语句：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">do</span> x &lt;- a </span><br><span class="line">   y &lt;- b </span><br><span class="line">   z &lt;- c </span><br><span class="line">   return (f x y z)</span><br></pre></td></tr></table></figure><p>它可以转化成：</p><p style="text-align: center;">a >>= \x -> b >>= \y -> c >>= \z -> return (f x y z)</p><p>但是经过观察可以发现，整个语句实际上将函数f应用在了三个上下文中的值上，所以仅用Applicative的&lt;$&gt;和&lt;*&gt;完全可以实现：</p><p style="text-align: center;">f <$> a <*> b <*> c</*></*></$></p><p>而且在运行的时候Applicative的效率会比Monad高，所以Haskell会将do语句尽可能优先转换为Applicative的表示方法然后再计算</p><h3 id="Monad-Laws"><a href="#Monad-Laws" class="headerlink" title="Monad Laws"></a>Monad Laws</h3><ol><li><code>Left identity</code>： return a &gt;&gt;= k      <code>=</code> k a</li><li><code>Right identity</code>：m        &gt;&gt;= return <code>=</code> m</li><li><code>Associativity</code>：(m &gt;&gt;= g) &gt;&gt;= h      <code>=</code> m &gt;&gt;= (\x -&gt; g x &gt;&gt;= h)</li></ol><p>前两个定律很好理解：</p><ul><li>将a注入上下文之后绑定（bind）给函数k(:: a -&gt; m a)，相当于直接将a直接传入函数k</li><li>将已经包含在上下文中的值绑定给return函数，相当于保持不变</li></ul><p>第三个定律是结合律，把它写成更像结合律的表示方法是：</p><p style="text-align: center;">(m >>= (\x -> g x)) >>= h <code>=</code> m >>= (\x -> g x >>= h)</p><h4 id="组合运算符（-gt-gt-）形式"><a href="#组合运算符（-gt-gt-）形式" class="headerlink" title="组合运算符（&gt;=&gt;）形式"></a>组合运算符（&gt;=&gt;）形式</h4><p><code>Control.Monad</code>模块中还定义了函数<code>&gt;=&gt;</code>（Kleisli-composition operator）：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">infixr</span> <span class="number">1</span> &gt;=&gt;</span><br><span class="line">(&gt;=&gt;) :: <span class="type">Monad</span> m =&gt; (a -&gt; m b) -&gt; (b -&gt; m c) -&gt; (a -&gt; m c)</span><br><span class="line"><span class="title">f</span> &gt;=&gt; g = \x -&gt; f x &gt;&gt;= g</span><br></pre></td></tr></table></figure><p>使用&gt;=&gt;运算符可以将两个用于绑定的函数结合在一起。用它表示的Monad定律更加清晰直观：</p><ol><li><code>Left identity</code>：return &gt;=&gt; f <code>=</code> f</li><li><code>Right identity</code>：f &gt;=&gt; return <code>=</code> f</li><li><code>Associativity</code>：(f &gt;=&gt; g) &gt;=&gt; h <code>=</code> f &gt;=&gt; (g &gt;=&gt; h)</li></ol><h4 id="do-notation形式"><a href="#do-notation形式" class="headerlink" title="do-notation形式"></a>do-notation形式</h4><p>Monad的这三个定律还可以使用do语句来描述：</p><ol><li><code>Left identity</code>： <figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">do</span> &#123; x&#x27; &lt;- return x;</span><br><span class="line">     f x&#x27;             =   <span class="keyword">do</span> &#123; f x &#125; </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><code>Right identity</code>： <figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">do</span> &#123; x &lt;- m; </span><br><span class="line">     return x         =   <span class="keyword">do</span> &#123; m &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><code>Associativity</code>： <figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">do</span> &#123; y &lt;- <span class="keyword">do</span> &#123; x &lt;- m;       <span class="keyword">do</span> &#123; x &lt;- m;              <span class="keyword">do</span> &#123; x &lt;- m;</span><br><span class="line">               f x                <span class="keyword">do</span> &#123; y &lt;- f x;            y &lt;- f x;</span><br><span class="line">             &#125;           =             g y         =        g y</span><br><span class="line">     g y                             &#125;                    &#125;</span><br><span class="line">   &#125;                            &#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="Intuition-2"><a href="#Intuition-2" class="headerlink" title="Intuition"></a>Intuition</h3><p>Monad也可以很自然地看成Applicative的升级版，比如Applicative的操作全部是固定的，而Monad的操作可以在中途突然改变</p><p>同时Monad也完成了Functor和Applicative无法完成的操作。比如要用fmap和实现&gt;&gt;=函数（即达成操作 m a -&gt; (a -&gt; m b) -&gt; m b），先假设 f :: a -&gt; m b，那么fmap f的类型就会是 m a -&gt; m (m b)，将m a应用在fmap f上会得到结果m (m b)，而不是m b。但是目前只可以使用pure将一个值装入上下文中（a -&gt; m a），而没有一个函数可以从上下文中提取值（m a -&gt; a）。那么就需要定义一个新的函数来实现这个操作的效果（m (m b) -&gt; m b）。因此Monad的另一个等效的定义方法是：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Applicative</span> m =&gt; <span class="type">Monad&#x27;</span> m <span class="keyword">where</span></span></span><br><span class="line">    join :: m (m a) -&gt; m a </span><br><span class="line">    </span><br><span class="line">    (&gt;&gt;=) :: m a -&gt; (a -&gt; m b) -&gt; m b </span><br><span class="line">    x &gt;&gt;= f = join $ fmap f x</span><br></pre></td></tr></table></figure><p>但是定义&gt;&gt;=函数会更为直观方便，所以Haskell采用了用&gt;&gt;=函数定义Monad的方法</p><p>同时Haskell还提供了join函数的定义：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">join</span> :: <span class="type">Monad</span> m =&gt; m (m a) -&gt; m a </span><br><span class="line"><span class="title">join</span> x = x &gt;&gt;= id</span><br></pre></td></tr></table></figure><h3 id="常用函数-2"><a href="#常用函数-2" class="headerlink" title="常用函数"></a>常用函数</h3><h4 id="liftM-amp-ap"><a href="#liftM-amp-ap" class="headerlink" title="liftM &amp; ap"></a>liftM &amp; ap</h4><p style="text-align: center;">liftM :: Monad m => (a -> b) -> m a -> m b</p><p style="text-align: center;">ap :: Monad m => m (a -> b) -> m a -> m b</p><p>所以liftM其实就是fmap、ap就是&lt;*&gt;，但是老版本的GHC定义Monad并没有Functor、Applicative的约束，所以实现了liftM、ap，并且保留了这个名字</p><p>因此一个单子也可以通过<code>pure = return</code>、<code>(&lt;*&gt;) = ap</code>直接成为应用函子的实例</p><h4 id="sequence"><a href="#sequence" class="headerlink" title="sequence"></a>sequence</h4><p style="text-align: center;">sequence :: Monad m => [m a] -> m [a]</p><p>sequence的作用显而易见，而且在IO部分也使用到了。但是这个版本是在<code>GHC.Base</code>模块中定义的，还有一个更广泛的使用Traversable的定义在<code>Data.Traversable</code>模块中 </p><h4 id="replicateM"><a href="#replicateM" class="headerlink" title="replicateM"></a>replicateM</h4><p style="text-align: center;">replicateM :: Applicative m => Int -> m a -> m [a]</p><h4 id="mapM-amp-forM"><a href="#mapM-amp-forM" class="headerlink" title="mapM &amp; forM"></a>mapM &amp; forM</h4><p style="text-align: center;">mapM :: Monad m => (a -> m b) -> [a] -> m [b]</p><p style="text-align: center;">forM :: Monad m => [a] -> (a -> m b) -> m [b]</p><p>forM的用法在IO部分已经说过，mapM和forM都在<code>Data.Traversable</code>模块中有广泛版本</p><p>还有一些其他的函数：filterM、zipWithM、foldM、forever，通过名字就可以看出用法，是将原来仅使用与列表的函数提升至可以适用于所有单子</p><p>并且在函数名后加下划线，比如sequence_、mapM_，会忽略返回值（最终结果为<code>m ()</code>）</p><h4 id="lt-lt-amp-gt-gt-amp-lt-lt"><a href="#lt-lt-amp-gt-gt-amp-lt-lt" class="headerlink" title="=&lt;&lt; &amp; &gt;=&gt; &amp; &lt;=&lt;"></a>=&lt;&lt; &amp; &gt;=&gt; &amp; &lt;=&lt;</h4><p>（<code>&gt;=&gt;</code>操作符在上面<a href="#%E7%BB%84%E5%90%88%E8%BF%90%E7%AE%97%E7%AC%A6%EF%BC%88-gt-gt-%EF%BC%89%E5%BD%A2%E5%BC%8F">Monad Laws</a>部分已经给出了定义）</p><ul><li>x &gt;&gt;= f <code>=</code> f =&lt;&lt; x </li><li>f &gt;=&gt; g <code>=</code> g &lt;=&lt; f </li></ul><h2 id="MonadFail"><a href="#MonadFail" class="headerlink" title="MonadFail"></a>MonadFail</h2><p>MonadFail定义在<code>Control.Monad.Fail</code>模块中：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Monad</span> m =&gt; <span class="type">MonadFail</span> m <span class="keyword">where</span></span></span><br><span class="line">    fail :: <span class="type">String</span> -&gt; m a </span><br></pre></td></tr></table></figure><p>它只要求在Monad的基础上实现fail函数，接收一个字符串返回一个单子。这会使在do语句中产生错误时直接变为错误值（空值）使最终的返回值为错误值</p><h3 id="MonadFail实例"><a href="#MonadFail实例" class="headerlink" title="MonadFail实例"></a>MonadFail实例</h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">MonadFail</span> <span class="type">Maybe</span> <span class="keyword">where</span></span></span><br><span class="line">    fail _ = <span class="type">Nothing</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">MonadFail</span> [] <span class="keyword">where</span></span></span><br><span class="line">    fail _ = []</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">MonadFail</span> <span class="type">IO</span> <span class="keyword">where</span></span></span><br><span class="line">    fail = failIO</span><br></pre></td></tr></table></figure><p>Maybe和[]的fail函数都与第一个参数无关，直接返回空值（Nothing、[]）；而IO的fail函数直接使用failIO，实现方法也是深奥（接着逃</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">exampleFail</span> :: <span class="type">Maybe</span> <span class="type">Char</span> </span><br><span class="line"><span class="title">exampleFail</span> = <span class="keyword">do</span></span><br><span class="line">    (x:xs) &lt;- <span class="type">Just</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    return x </span><br><span class="line"></span><br><span class="line"><span class="title">ghci</span>&gt; exampleFail</span><br><span class="line"><span class="type">Nothing</span></span><br></pre></td></tr></table></figure><p>在这个例子的do语句中，在提取Just “”中的值时用了模式匹配，但是因为其内容为空字符串，x:xs匹配会出现错误，这时就会触发fail函数直接返回Nothing</p><h3 id="MonadFail-Law"><a href="#MonadFail-Law" class="headerlink" title="MonadFail Law"></a>MonadFail Law</h3><ul><li>fail s &gt;&gt;= m <code>=</code> fail s </li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="http://learnyouahaskell.com/chapters">Learn You a Haskell</a></li><li><a href="https://wiki.haskell.org/Typeclassopedia">Typeclassopedia - Haskell wiki</a></li><li><a href="https://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html">Functors, Applicatives, And Monads In Pictures</a></li><li><a href="http://02s949.coding-pages.com/2018/08/15/haskellc/">Haskell学习 - functor</a></li></ul><hr><div style="text-align: center;"><p style="font-size: 1.3rem; font-weight: bold;">目录</p><p>#0&nbsp;|&nbsp;<a href="/p/b3ca5c18.html">总章</a>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;<br>#1&nbsp;|&nbsp;<a href="/p/d63b5b5f.html">基础语法与函数</a>&emsp;&emsp;&emsp;<br>#2&nbsp;|&nbsp;<a href="/p/53e482b7.html">高阶函数与模块</a>&emsp;&emsp;&emsp;<br>#3&nbsp;|&nbsp;<a href="/p/369b7e08.html">类型与类型类</a>&emsp;&emsp;&emsp;&emsp;<br>#4&nbsp;|&nbsp;<a href="/p/a5bbe48a.html">输入输出与文件</a>&emsp;&emsp;&emsp;<br>#5&nbsp;|&nbsp;<a href="/p/290ecb74.html">函子、应用函子与单子</a><br>#6&nbsp;|&nbsp;<a href="/p/d4bb2633.html">半群与幺半群</a>&emsp;&emsp;&emsp;&emsp;<br>#7&nbsp;|&nbsp;<a href="/p/68ef8146.html">一些其它类型类</a>&emsp;&emsp;&emsp;<br>#A&nbsp;|&nbsp;<a href="/p/96c32eae.html">Haskell与范畴论</a>&emsp;&nbsp;&thinsp;</p></div>]]></content>
    
    
    <summary type="html">&lt;div style=&quot;display: flex; justify-content: space-between;&quot;&gt;

&lt;p&gt;&lt;a href=&quot;/p/a5bbe48a.html&quot;&gt;&amp;lt; #4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/p/d4bb2633.html&quot;&gt;#6 &amp;gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;Functors&quot;&gt;&lt;a href=&quot;#Functors&quot; class=&quot;headerlink&quot; title=&quot;Functors&quot;&gt;&lt;/a&gt;Functors&lt;/h2&gt;&lt;p&gt;函子（Functor）是一个类型类（typeclass），和其他类型类一样，它规定了其实例类必须实现的功能（例如Eq类型类规定了它的实例必须是可以比较是否相等的），Functor规定类它的实例必须是可以进行映射的。Functor要求使用&lt;code&gt;fmap&lt;/code&gt; :: (a -&amp;gt; b) -&amp;gt; f a -&amp;gt; f b 函数来实现这个功能，它接收一个a -&amp;gt; b类型的函数、一个内部元素为a类型的函子，返回一个内部元素为b类型的函子&lt;/p&gt;</summary>
    
    
    
    
    <category term="Haskell" scheme="https://blog.tonycrane.cc/tags/Haskell/"/>
    
    <category term="笔记" scheme="https://blog.tonycrane.cc/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
