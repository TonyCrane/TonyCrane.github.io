<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TonyCrane&#39;s Blog</title>
  
  <subtitle>鹤翔万里的博客</subtitle>
  <link href="https://blog.tonycrane.cc/atom.xml" rel="self"/>
  
  <link href="https://blog.tonycrane.cc/"/>
  <updated>2021-08-24T12:06:03.341Z</updated>
  <id>https://blog.tonycrane.cc/</id>
  
  <author>
    <name>Tony Wang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>与manim之间的往事</title>
    <link href="https://blog.tonycrane.cc/p/6222a56.html"/>
    <id>https://blog.tonycrane.cc/p/6222a56.html</id>
    <published>2021-08-23T13:34:22.000Z</published>
    <updated>2021-08-24T12:06:03.341Z</updated>
    
    <content type="html"><![CDATA[<p>最近刚到大学报到完，恰巧有些闲暇时间<br>闲来无事，来记录一下自己与一步一步推动我走到现在的manim之间的故事（<del>指流水账</del><br>这篇虽然叫「与manim之间的往事」，但是里面很多都和manim无关（逃</p><h2 id="一切的起点"><a href="#一切的起点" class="headerlink" title="一切的起点"></a>一切的起点</h2><span id="more"></span><p>现在的一切还要从初中开始说起（因为小学时期就是一直在玩，很少考虑学习的事情）<br>上了初中，关注了很多没营养的公众号 —— 初中数学、初中英语、初中物理 等等一整个系列<br>其中有一个很特别的公众号就是初中化学，总是会转载一些很有趣的实验视频<br>有一次它就转载了 <a href="https://space.bilibili.com/865267">@真·凤舞九天</a> 的<strong>疯狂化学</strong>两期视频<br>当时看得我大受震撼，于是就顺着链接爬到了贴吧</p><p>正好萌凤开始制作DEC（实验室的魔法日常）了，然后就在贴吧上每一期都找到来看<br>逐渐我发现这些视频发布的平台都是一个粉色小网站<br>“那我既然每期都从贴吧翻到哔哩哔哩来看这些视频，那我为什么不直接在这个网站上等待更新呢？”<br>凭着这个想法，我注册了B站</p><h2 id="初入B站"><a href="#初入B站" class="headerlink" title="初入B站"></a>初入B站</h2><p>所以真正带我来B站的，是大萌凤（<br>当时的入站考试还很严格，问题也都很有趣，极大地吸引了我的兴趣<br>起昵称的时候突然想到 <strong>凤舞</strong> 和我名字里的 <strong>鹤翔</strong> 还挺搭配的，所以就顺势补全起了个昵称“<strong>鹤翔万里</strong>”</p><p>刚入B站也只是每周看看更新的DEC<br>然后逐渐逛着逛着就发现了这里深藏着的一堆一堆宝藏，一点一点关注了很多up主</p><p>其中，在某个评论区，看到了有人推荐up主 <a href="https://space.bilibili.com/88461692">@3Blue1Brown</a>，就去看了一看<br>结果也是大受震撼，他可以将一个知识讲得直白易懂、又不缺乏严谨性，更重要的是<strong>动画</strong>也顺滑舒适好看</p><h2 id="初识manim"><a href="#初识manim" class="headerlink" title="初识manim"></a>初识manim</h2><p>在看了3b1b的视频后，就一直非常好奇这样的视频是怎么做的<br>在疑问了很久之后（已经到了初三），我终于看视频简介了（x<br>发现这是使用一个叫做manim的东西制作的<br>百度一搜索，结果搜到了 <a href="https://space.bilibili.com/3557916">@Solara570</a> 的<a href="https://www.bilibili.com/read/cv17444">专栏</a></p><p>一看发现，竟然是编写代码制作的，感觉很神奇<br>而且里面的代码看起来也好好看（其实就是Consolas等宽+普通高亮<br>所以也就很想学着做一做</p><p>所以就打算先跟着教程试着安装一遍，结果果然<br><strong>处 处 碰 壁</strong></p><p>安装什么都会卡住一下，特别是LaTeX，总是出问题，而且很难解决<br>当时正是高三复习，而且家里也限制用电脑，所以就只好先放下了<br>但当时就确立了我的一个目标：</p><p>“<strong>我要学会使用manim</strong>”</p><h2 id="踏上编程的不归路"><a href="#踏上编程的不归路" class="headerlink" title="踏上编程的不归路"></a>踏上编程的不归路</h2><p>当时在教程中了解到，这里面的代码是python语言，所以就决定要先放下manim好好学一学python（<del>注入怨念：这恰恰是不少人做不到的，很多零基础的人盲目只是要用manim，然后即使没有python基础也要硬着头皮安装，结果出现了各种问题，而且还到处问</del>）</p><p>在中考完的暑假中，我买了一本《Python编程：从入门到实践》，在极短的假期（因为高中创新班开学早）中不惜推掉部分衔接课程完整地刷了一遍书，甚至还做了一小本笔记<br>也凭借着部分网络资源，我学会了简单的python语法以及有关计算机的很多知识，也觉得这些东西确实挺有意思的<br>这时我又尝试安装了一遍manim，中途的错误少了很多，但还是卡在了安装LaTeX上<br>高中已经开学，所以我又不得不放下了manim</p><p>上了高中，因为是创新班，所以会推荐选择一两门竞赛来学习，为了学到更多的计算机知识，报名了<strong>信息竞赛</strong><br>发到了教材之后我就开始疯狂看，甚至自习晚自习，只要是有空闲时间了就拿出来看，这样一个多月学了C++的基础语法<br>（<del>当时班主任发现了还比较不高兴，要求我一直保持年级前二十，但是很显然这是保持不住的</del>）</p><p>在高一的NOIp2018后，我发现学长们都不太会使用Linux以及bash，而考试的系统还是NOI Linux<br>所以就决定干脆做几个视频放在B站上供大家参考（都是黑历史）<br>就这样，我成为了一名up主</p><p>在超前学了信息竞赛课的内容之后，我开始用那个时间来研究安装manim<br>为了解决LaTeX的报错问题，我试过很多方法，最后使用docker成功安装了环境（为此还花了一段时间了解docker）<br>在做出了第一个带有文字的动画之后很是激动</p><p>这样在2019年寒假的时候我抽了点时间来练习练习manim，制作了我的第一个manim视频<a href="https://www.bilibili.com/video/BV1Eb411r7dJ">「动态规划-01背包问题」</a><br>慢慢的，在每天自习的信息竞赛课上我又学了不少计算机方面的知识<br>当时想要做一个自己的博客，在学markdown时发现数学公式也是用LaTeX写的<br>而且了解到这个东西可以排出很好看的文档，所以就干脆又从零学了LaTeX<br>学了LaTeX之后manim安装就不再出现无法解决的问题了，也就可以顺利安装了</p><p>在高一下高二上，我也是凭着兴趣做了几个视频，从中也逐渐地发掘了manim的一些简单用法，也尝试看了一些manim源码<br>当时还觉得那些源码都还是很远的东西，觉得自己能看懂一部分就很好了</p><p>在2019年年末，我发现了同是使用manim的up主 <a href="https://space.bilibili.com/66806831/">@cigar666</a><br>一段时间后，他建立了manim的交流群，这个群也逐渐地发展壮大<br>在这个群里我也学到了很多知识，教了很多人入坑manim，也认识了好多好多全国各地的朋友</p><p>高二的寒假，我计划做了FFT算法那期视频，在那期间，我非常活跃地在群里回答各种问题<br>有一次我给出了一个很复杂的解决办法，而manim源码中其实是有轮子的<br>这时S570说了一句“还是源码看的不够”，我也就从此提高了目标：</p><p>“<strong>我要看懂manim源码</strong>”</p><h2 id="成立MK"><a href="#成立MK" class="headerlink" title="成立MK"></a>成立MK</h2><p>高二的寒假，疫情突如其来，假期也随之延长<br>而当时大部分人也都在假期中，为了更好地交流代码，我在GitHub上建立了组织，并且投票选举出了名称manim-kindergarten<br>之后在群友的合作之下又进行了很多资料的完善<br>为了方便回复一些常见的问题，我也编写了《manim常见问题》这个文档，在一年多的完善后，它已经迭代到了3.1版本</p><p>同时我也顺势做了很多比较短的视频，参加了一些活动，也被妈咪叔转发了，获得了不少粉丝，也拿到了知识领域优质up主的认证<br>而且MK内部也组织了几次联合投稿，共同完成了一些视频<br>其中我们突发奇想，尝试了使用manim来制作manim教程，结果还蛮不错<br>所以我也就单独在这个系列下完成了几个视频</p><p>在制作这个视频时，我也在逐渐深入地阅读源码，感觉没有那么晦涩难懂，代码思路还是很清晰<br>正好有MK成员开了一个文档的repo来汇总一些网上的文档，我也就正好把里面的内容归纳归纳，保留了一些有价值的内容，也补充了部分中文的文档字符串，就这样完成了一大半<a href="https://docs.manim.org.cn/">中文文档</a></p><p>疫情期间，我也加入了manim的discord频道，在里面也帮助了很多人解决了manim上的问题<br>我发现discord上manim channel的管理员是eulertour，而且他在GitHub上也是manim的collaborator，同时还做了很多项目<br>当时就在mk的QQ群里表达了一下对他的仰慕，然后就有一个群友说了句：</p><p>“其实你也可以”</p><h2 id="成为合作者"><a href="#成为合作者" class="headerlink" title="成为合作者"></a>成为合作者</h2><p>疫情期间在学校机房脱产的时候也经常会读一读manim，还顺便把一直容易出现的Text问题修复了一下<br>当时Grant正在开发基于OpenGL的manim，所以这些pull request一直是eulertour来merge的，但是在他加入了ManimCommunity之后就已经打算将3b1b/manim荒废掉，很少来管issue和pr，甚至有用的pr也只会让交到ManimCommunity里<br>但是我觉得这比较不好，毕竟还有很多人正在使用3b1b/manim，所以我就在暑假的时候抱着试一试的心态给Grant写了一封信来申请3b1b/manim存储库上的权限</p><p>结果几天后Grant真的回复了，他同意给我manim上的write权限，但是要先和eulertour沟通一下<br>几个月后的十一假期，我收到了Grant发来的成为collaborator的邀请（<del>其实中间一直没有回复是因为我的邮件跑到了Grant的垃圾信箱里</del>）</p><p>在成为collaborator后，我merge了一些有用的pull request，关掉了一些没用的/已解决的/老旧的issue<br>同时我也大致了解了新ManimGL的大致逻辑，也向Grant提了好几项改进的建议，他也采纳了很多部分</p><p>在开学了之后，为了复习高考，也基本放下了manim上的活动（还收到了来自Grant的祝福）<br>在2021年寒假，又因为疫情上了一段时间网课，我也又抽时间来玩一玩manim了<br>那时ManimGL已经基本完工，在一些准备之后，shaders分支被合并到了master分支成为了正式版本<br>我也为之写了全新的中英文文档（虽然还是很不完善）<br>在那之后我也对manim做了一些改善，关闭了一些过时的pull request，打开了disscussion，发布新的python包等等</p><p>嗯，然后就是开学-&gt;复习-&gt;高考</p><p>高考发挥的还算比较好，成功进入了ZJU-Turing<br>为了更好地汇总信息，在假期里我又为mk写了官方网站：<a href="https://manim.org.cn/">manim.org.cn</a><br>然后就是开学到现在了</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>是manim在一步一步推动着我前进<br>从想要用manim到想要看懂源码到想要为它做出点贡献<br>从一个什么都不会的初中生变成了manim的collaborator<br>这仅仅是三年啊（</p><p>所以，那么接下来继续努力吧</p><p><del>写的太水了，反正就随便写写，想到哪写到哪了，没想到你还真的看到这了_(:з」∠)_</del></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近刚到大学报到完，恰巧有些闲暇时间&lt;br&gt;闲来无事，来记录一下自己与一步一步推动我走到现在的manim之间的故事（&lt;del&gt;指流水账&lt;/del&gt;&lt;br&gt;这篇虽然叫「与manim之间的往事」，但是里面很多都和manim无关（逃&lt;/p&gt;
&lt;h2 id=&quot;一切的起点&quot;&gt;&lt;a href=&quot;#一切的起点&quot; class=&quot;headerlink&quot; title=&quot;一切的起点&quot;&gt;&lt;/a&gt;一切的起点&lt;/h2&gt;</summary>
    
    
    
    <category term="生活" scheme="https://blog.tonycrane.cc/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="随笔" scheme="https://blog.tonycrane.cc/tags/%E9%9A%8F%E7%AC%94/"/>
    
    <category term="生活" scheme="https://blog.tonycrane.cc/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>「Learn LambdaCalculus」#0</title>
    <link href="https://blog.tonycrane.cc/p/92a6fc79.html"/>
    <id>https://blog.tonycrane.cc/p/92a6fc79.html</id>
    <published>2021-08-04T13:55:24.000Z</published>
    <updated>2021-08-23T13:41:09.725Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前段时间，GZTime也跟我聊过一些关于lambda演算的东西<br>学Haskell的时候也总是能听说这个东西<br>看起来挺有意思，来学学_(:з」∠)_</p><span id="more"></span><p>那我也引用GZTime引用的知乎同学的一句话：</p><blockquote><p>在介绍λ演算之前，我们需要放空一下我们的大脑，忘掉C语言，忘掉冯·诺伊曼机，忘掉图灵机，甚至要忘掉0和1，加和减。我们来到一个只有符号的世界。在这个新的世界里，只需要几条简单的定义和规则，便可以构造出与图灵机完全等价的计算模型，即它是图灵完全（Turing Complete）的。和图灵机一样，这个计算模型可以解决任何一个可以机械计算的问题；与图灵机倾向于硬件实现不同，它更倾向于逻辑的推理。它就是λ演算（Lambda演算）。</p></blockquote><h2 id="lambda-term"><a href="#lambda-term" class="headerlink" title="lambda term"></a>lambda term</h2><p>一个合法的lambda表达式又被称为lambda项（lambda term），以下三个规律归纳性地定义了一个合法的lambda项：</p><ul><li><strong>Variable</strong>：一个变量 x 本身也是一个合法的lambda项</li><li><strong>Abstraction</strong>：如果 M 是一个合法的lambda项，x 是一个变量，那么 (λx.M) 也是一个合法的lambda项（这相当于定义了一个 x -&gt; M 的函数）</li><li><strong>Application</strong>：如果 M 和 N 都是合法lambda项，那么 (M N) 也是一个合法lambda项</li></ul><p>lambda表达式的组成有变量、抽象符号λ和一个点.、括号</p><p>所有lambda项构成$\Lambda$空间，通过上述合法lambda项的定义，$\Lambda$空间的正式定义是：</p><ul><li>如果$x$是一个变量，那么$x\in\Lambda$</li><li>如果$x$是一个变量且$M\in\Lambda$，那么$(\lambda x.M)\in\Lambda$</li><li>如果$M, N\in\Lambda$，那么$(M\ N)\in\Lambda$</li></ul><h3 id="notation"><a href="#notation" class="headerlink" title="notation"></a>notation</h3><p>为了使lambda表达式的记法更清晰，可以有以下简化：</p><ul><li>一个lambda项最外侧的括号可以省略。比如 (M N) 可以写成 M N </li><li>应用是左结合的。比如 M N P 表示的实际是 ((M N) P)<br>  这和Haskell中函数左结合是一样的</li><li>抽象是尽可能向右延伸的。比如 λx.M N 实际上表示的是 λx.(M N) 而不是 (λ. M) N<br>  这和Haskell中lambda表达式向右一直延伸是一致的，因此一般要为lambda表达式加上括号</li><li>嵌套的多个lambda表达式可以缩写成类似多元函数的样子。比如 λx.λy.λz.M 就可以缩写成 λxyz.M</li></ul><h3 id="Free-amp-bound-variables"><a href="#Free-amp-bound-variables" class="headerlink" title="Free &amp; bound variables"></a>Free &amp; bound variables</h3><p>在一个lambda表达式中，也有自由变量（free variables）和约束变量（bound variables）的概念。</p><p>在lambda项 λx.M 中，λx被称为binder，它将输入的x与M中的变量x绑定在一起，这时x就是约束变量，而其它的所有变量都是自由变量。</p><p>&emsp;比如在表达式 λx.x+y 中，x就是约束变量，y是自由变量。</p><p>对于一个lambda项M的自由变量构成的集合FV(M)，也有一些规律需要满足：</p><ul><li>如果 x 是一个变量，那么 FV(x) = {x} </li><li>FV(λx.M) = FV(M) \ {x} （M中除去x之外的变量都是自由变量）</li><li>FV(M N) = FV(M) ∪ FV(N) （M应用在N上得到的lambda项的自由变量是MN两个lambda项的自由变量的并集）</li></ul><h3 id="Substitution"><a href="#Substitution" class="headerlink" title="Substitution"></a>Substitution</h3><p>lambda项也有一种记法叫做替换（substitution），记法 t[x:=r] 表示将lambda项t中的自由变量x都替换成r。它满足以下规律：</p><ul><li>x[x:=r]=r （一个变量就是自由变量，将其替换成r就变为r）</li><li>y[x:=r]=y if x!=y （如果x和y不相等，那么）</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前段时间，GZTime也跟我聊过一些关于lambda演算的东西&lt;br&gt;学Haskell的时候也总是能听说这个东西&lt;br&gt;看起来挺有意思，来学学_(:з」∠)_&lt;/p&gt;</summary>
    
    
    
    
    <category term="Haskell" scheme="https://blog.tonycrane.cc/tags/Haskell/"/>
    
    <category term="笔记" scheme="https://blog.tonycrane.cc/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>「Learn Rust」#0 总章</title>
    <link href="https://blog.tonycrane.cc/p/db45bee5.html"/>
    <id>https://blog.tonycrane.cc/p/db45bee5.html</id>
    <published>2021-08-03T15:08:28.000Z</published>
    <updated>2021-08-23T13:24:46.257Z</updated>
    
    <content type="html"><![CDATA[<p style="text-align: center;">学习一门新语言之Haskell</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Haskell学的差不多了，也没啥事想干了<br>GZTime之前也跟我推荐过Rust挺好玩的<br>这几天看一看<br>一样，没有教程，只是我的笔记而已</p><span id="more"></span><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>Mac上安装只需要安装rustup即可：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl --proto <span class="string">&#x27;=https&#x27;</span> --tlsv1.2 https://sh.rustup.rs -sSf | sh</span><br></pre></td></tr></table></figure><p>然后更新、卸载、检查：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ rustup update</span><br><span class="line">$ rustup self uninstall</span><br><span class="line">$ rustc --version</span><br></pre></td></tr></table></figure><p>Rust代码的后缀名是<code>.rs</code>，通过<code>rustc code.rs</code>来编译出二进制文件<code>code</code>再运行</p><h2 id="Cargo"><a href="#Cargo" class="headerlink" title="Cargo"></a>Cargo</h2><p>通过rustup安装后自带cargo，可以通过<code>cargo --version</code>检查</p><p>通过<code>cargo new project_name</code>来新建一个项目，这时会在当前目录下自动生成下面的目录结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">project_name</span><br><span class="line">    ├── .git/</span><br><span class="line">    ├── .gitignore</span><br><span class="line">    ├── Cargo.toml</span><br><span class="line">    └── src</span><br><span class="line">        └── main.rs</span><br></pre></td></tr></table></figure><p>cargo会根据输入的项目名称新建一个文件夹，并且默认使用git进行版本控制（可以使用<code>cargo new ... --vcs none</code>取消版本控制）</p><p>其中main.rs文件中就是一个Hell World程序。Cargo.toml是这个项目的配置文件：</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[package]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;project_name&quot;</span></span><br><span class="line"><span class="attr">version</span> = <span class="string">&quot;0.1.0&quot;</span></span><br><span class="line"><span class="attr">edition</span> = <span class="string">&quot;2018&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html</span></span><br><span class="line"></span><br><span class="line"><span class="section">[dependencies]</span></span><br></pre></td></tr></table></figure><h3 id="构建、运行、发布"><a href="#构建、运行、发布" class="headerlink" title="构建、运行、发布"></a>构建、运行、发布</h3><ul><li>使用<code>cargo build</code>会构建这个项目，并且将可执行文件创建在<code>target/debug/</code>文件夹中</li><li>使用<code>cargo run</code>直接构建并运行这个项目</li><li>使用<code>cargo check</code>检查项目，但不生产可执行文件、也不输出结果</li><li>使用<code>cargo build --release</code>来发布，产生但可执行文件在<code>target/release/</code>文件夹中，不用于直接build，它会进行一些优化来使程序运行地更快</li></ul><h2 id="常见编程概念"><a href="#常见编程概念" class="headerlink" title="常见编程概念"></a>常见编程概念</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p><code>let</code>语句会创建一个变量，但是默认都是不可变的（immutable）。即一旦使用let创建一个变量并为其赋值，那这个变量将不允许被改动，如果在代码中改动了这个变量，那么将不会通过编译</p><p>但是可以再使用let语句来创建一个同名变量：</p><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> x = x + <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>这时，原来的x就被隐藏（shadowing）了（这种方式的前后两个x本质上还是两个变量，它们允许有着不同的数据类型）</p><p>在let后面加上mut也可以创建一个可变的变量：</p><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> x = <span class="number">1</span>;</span><br><span class="line">x = x + <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>但这时x不能更改数据类型</p><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>常量不同于变量，它一定是不可变的。常量通过<code>const</code>关键字创建，而且需要明确指定数据类型（Rust常量命名规范是用全大写）：</p><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MAX_POINT: <span class="built_in">u32</span> = <span class="number">100_000</span>;</span><br></pre></td></tr></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>Rust是静态类型语言，编译器需要在编译时得到所有变量的类型，但是也可以自动推测类型。</p><p>Rust中的类型分为两种，标量（scalar）和复合（compound）</p><h4 id="scalar"><a href="#scalar" class="headerlink" title="scalar"></a>scalar</h4><p><strong>整型</strong>：</p><table><thead><tr><th align="center">长度</th><th align="center">有符号</th><th align="center">无符号</th></tr></thead><tbody><tr><td align="center">8-bit</td><td align="center">i8</td><td align="center">u8</td></tr><tr><td align="center">16-bit</td><td align="center">i16</td><td align="center">u16</td></tr><tr><td align="center">32-bit</td><td align="center">i32</td><td align="center">u32</td></tr><tr><td align="center">64-bit</td><td align="center">i64</td><td align="center">u64</td></tr><tr><td align="center">128-bit</td><td align="center">i128</td><td align="center">u128</td></tr><tr><td align="center">arch</td><td align="center">isize</td><td align="center">usize</td></tr></tbody></table><p><code>isize</code>和<code>usize</code>是根据系统而定（32/64）</p><p>同时整型的值也可以用不同进制表示（十六进制<code>0x</code>开头，八进制<code>0o</code>开头，二进制<code>0b</code>开头，单字节字符<code>b</code>开头（b’A’）），在数值中间也可以增加<code>_</code>来增强可读性，在数值结尾也可以加上类型后缀来明确类型</p><p><strong>浮点型</strong>：<br>单精度浮点<code>f32</code>，双精度浮点<code>f64</code></p><p><strong>布尔型</strong>：<br><code>bool</code>，值是小写<code>true/false</code></p><p><strong>字符型</strong>：<br><code>char</code>，四字节（使用unicode）。字符是单引号而字符串是双引号</p><h4 id="compound"><a href="#compound" class="headerlink" title="compound"></a>compound</h4><p><strong>元组</strong>：<br>元素类型可以不同，但是整个元组的类型和各个元素的类型都有关，例如：</p><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> tup: (<span class="built_in">i32</span>, <span class="built_in">f64</span>, <span class="built_in">u8</span>) = (<span class="number">500</span>, <span class="number">6.4</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>可以通过<code>.</code>加索引来访问元素：</p><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = tup.<span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>列表</strong>：<br>不同于Python/Haskell，Rust中的列表的长度也是不可变的，而且列表中的所有元素的类型也必须一致。含有五个i32类型的元素的列表的类型就可以写成<code>[i32; 5]</code></p><p>同时<code>[3; 5]</code>这种写法也等价于<code>[3, 3, 3, 3, 3]</code></p><p>可以通过<code>[index]</code>来访问元素，如<code>lst[1]</code>。但如果索引超出列表元素个数，那么编译将不会报错，但运行时会报错</p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>通过<code>fn</code>关键字来定义函数，参数的类型必须指定，如果有返回值，返回值的类型也要在()后面用-&gt; type指定。返回值可以在函数中途直接return返回，也可以在函数结尾直接写出要返回的值（不加分号，此时是表达式而不是语句），比如：</p><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">plus_one</span></span>(x: <span class="built_in">i32</span>) -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">    x + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样，用{}括上的代码块也是一个表达式，它也可以有返回值：</p><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> y = &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">3</span>;</span><br><span class="line">    x + <span class="number">1</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h3><h4 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h4><p>常规的if语句，比如：</p><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> a == <span class="number">1</span> &#123;</span><br><span class="line">    ...;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> a == <span class="number">2</span> &#123;</span><br><span class="line">    ...;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ...;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不同于Haskell，它可以没有else只有if</p><p>if语句也可以用在let上，这时{}中要是一个表达式而不是语句，即不带分号：</p><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> number = <span class="keyword">if</span> condition &#123;</span><br><span class="line">    <span class="number">5</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="number">6</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><p><strong>loop</strong>：<br>使用loop会将块一直循环直到遇到break，也可以从loop循环返回值，比如：</p><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = <span class="keyword">loop</span> &#123;</span><br><span class="line">    counter += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> counter == <span class="number">10</span> &#123;</span><br><span class="line">        <span class="keyword">break</span> counter * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>while</strong>：</p><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> condition &#123;</span><br><span class="line">    ...;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>for</strong>：</p><figure class="highlight rs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> lst.iter() &#123;</span><br><span class="line">    ...;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="所有权"><a href="#所有权" class="headerlink" title="所有权"></a>所有权</h2><p>鸽了，明天再写</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://kaisery.github.io/trpl-zh-cn">Rust程序设计语言 简体中文版</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p style=&quot;text-align: center;&quot;&gt;学习一门新语言之Haskell&lt;/p&gt;

&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Haskell学的差不多了，也没啥事想干了&lt;br&gt;GZTime之前也跟我推荐过Rust挺好玩的&lt;br&gt;这几天看一看&lt;br&gt;一样，没有教程，只是我的笔记而已&lt;/p&gt;</summary>
    
    
    
    
    <category term="笔记" scheme="https://blog.tonycrane.cc/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Rust" scheme="https://blog.tonycrane.cc/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>「Learn Haskell」#7 一些其它类型类</title>
    <link href="https://blog.tonycrane.cc/p/68ef8146.html"/>
    <id>https://blog.tonycrane.cc/p/68ef8146.html</id>
    <published>2021-07-25T04:46:38.000Z</published>
    <updated>2021-07-25T04:54:13.884Z</updated>
    
    <content type="html"><![CDATA[<div style="display: flex; justify-content: space-between;"><p><a href="/p/d4bb2633.html">&lt; #6</a></p><p><a href="/p/96c32eae.html">#A &gt;</a></p></div><h2 id="Foldable"><a href="#Foldable" class="headerlink" title="Foldable"></a>Foldable</h2><p>Foldable是表示可以折叠（fold）的类型类，在<code>Data.Foldable</code>中定义，这使得和fold相关的函数可以用在任意Foldable的实例类型上。它的定义是：</p><span id="more"></span><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Foldable</span> t <span class="keyword">where</span></span></span><br><span class="line">    fold     :: <span class="type">Monoid</span> m =&gt; t m -&gt; m</span><br><span class="line">    foldMap  :: <span class="type">Monoid</span> m =&gt; (a -&gt; m) -&gt; t a -&gt; m</span><br><span class="line">    foldMap&#x27; :: <span class="type">Monoid</span> m =&gt; (a -&gt; m) -&gt; t a -&gt; m</span><br><span class="line">    foldr    :: (a -&gt; b -&gt; b) -&gt; b -&gt; t a -&gt; b</span><br><span class="line">    foldr&#x27;   :: (a -&gt; b -&gt; b) -&gt; b -&gt; t a -&gt; b</span><br><span class="line">    foldl    :: (b -&gt; a -&gt; b) -&gt; b -&gt; t a -&gt; b</span><br><span class="line">    foldl&#x27;   :: (b -&gt; a -&gt; b) -&gt; b -&gt; t a -&gt; b</span><br><span class="line">    foldr1   :: (a -&gt; a -&gt; a) -&gt; t a -&gt; a</span><br><span class="line">    foldl1   :: (a -&gt; a -&gt; a) -&gt; t a -&gt; a</span><br><span class="line">    toList   :: t a -&gt; [a]</span><br><span class="line">    null     :: t a -&gt; <span class="type">Bool</span></span><br><span class="line">    length   :: t a -&gt; <span class="type">Int</span></span><br><span class="line">    elem     :: <span class="type">Eq</span> a =&gt; a -&gt; t a -&gt; <span class="type">Bool</span></span><br><span class="line">    maximum  :: <span class="type">Ord</span> a =&gt; t a -&gt; a</span><br><span class="line">    minimum  :: <span class="type">Ord</span> a =&gt; t a -&gt; a</span><br><span class="line">    sum      :: <span class="type">Num</span> a =&gt; t a -&gt; a</span><br><span class="line">    product  :: <span class="type">Num</span> a =&gt; t a -&gt; a</span><br><span class="line">    <span class="meta">&#123;-# MINIMAL foldMap | foldr #-&#125;</span></span><br></pre></td></tr></table></figure><p>最少只要实现<code>foldr</code>和<code>foldMap</code>其中之一就可以使一个类型成为Foldable的实例，其它的函数都有由这两个函数提供的默认实现，而且这两个函数之间也有相互实现。因此只要实现foldr或foldMap一个函数就可以使用所有其它Foldable中的函数。foldr函数在前面已经有学过，foldMap的例子是：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; foldMap <span class="type">Sum</span> [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line"><span class="type">Sum</span> &#123;getSum = <span class="number">9</span>&#125;</span><br><span class="line"><span class="title">ghci</span>&gt; foldMap <span class="type">Product</span> [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line"><span class="type">Product</span> &#123;getProduct = <span class="number">15</span>&#125;</span><br><span class="line"><span class="title">ghci</span>&gt; foldMap (replicate <span class="number">3</span>) [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure><h3 id="Foldable实例"><a href="#Foldable实例" class="headerlink" title="Foldable实例"></a>Foldable实例</h3><p>[]、Maybe、Either a、(,) a都是Foldable的实例，标准容器库中的Map、Set等也都是Foldable的实例。也可以自定义二叉树类型，并使其成为Foldable的实例：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">Tree</span> a = <span class="type">Empty</span> | <span class="type">Leaf</span> a | <span class="type">Node</span> (<span class="type">Tree</span> <span class="title">a</span>) a (<span class="type">Tree</span> <span class="title">a</span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Foldable</span> <span class="type">Tree</span> <span class="keyword">where</span></span> </span><br><span class="line">    foldMap :: <span class="type">Monoid</span> m =&gt; (a -&gt; m) -&gt; <span class="type">Tree</span> a -&gt; m</span><br><span class="line">    foldMap f <span class="type">Empty</span>        = mempty</span><br><span class="line">    foldMap f (<span class="type">Leaf</span> x)     = f x</span><br><span class="line">    foldMap f (<span class="type">Node</span> l k r) = foldMap f l `mappend` f k `mappend` foldMap f r</span><br></pre></td></tr></table></figure><h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><ul><li><code>asum</code> :: (Alternative f, Foldable t) =&gt; t (f a) -&gt; f a，用&lt;|&gt;逐个连接所有元素</li><li><code>sequenceA_</code> :: (Applicative f, Foldable t) =&gt; t (f a) -&gt; f ()，由于丢弃结果，所以Foldable t就可以满足；因此不同于sequenceA需要Traversable</li><li><code>traverse_</code> :: (Applicative f, Foldable t) =&gt; (a -&gt; f b) -&gt; t a -&gt; f ()</li><li><code>for_</code> :: (Applicative f, Foldable t) =&gt; t a -&gt; (a -&gt; f b) -&gt; f ()</li></ul><h2 id="Traversable"><a href="#Traversable" class="headerlink" title="Traversable"></a>Traversable</h2><p>Traversable是表示可遍历的类型类，在<code>Data.Traversable</code>模块中定义，它是Foldable的升级版，同时也是一个Functor，它的定义是：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> (<span class="type">Functor</span> <span class="title">t</span>, <span class="type">Foldable</span> <span class="title">t</span>) =&gt; <span class="type">Traversable</span> t <span class="keyword">where</span></span> </span><br><span class="line">    traverse  :: <span class="type">Applicative</span> f =&gt; (a -&gt; f b) -&gt; t a -&gt; f (t b)</span><br><span class="line">    sequenceA :: <span class="type">Applicative</span> f =&gt; t (f a) -&gt; f (t a)</span><br><span class="line">    mapM      ::       <span class="type">Monad</span> m =&gt; (a -&gt; m b) -&gt; t a -&gt; m (t b)</span><br><span class="line">    sequence  ::       <span class="type">Monad</span> m =&gt; t (m a) -&gt; m (t a)</span><br><span class="line">    <span class="meta">&#123;-# MINIMAL traverse | sequenceA #-&#125;</span></span><br></pre></td></tr></table></figure><p>最少只需要实现traverse函数或者sequenceA函数。其中各个函数的功能通过类型签名也都能推测出来。但是其中mapM就是traverse，sequence就是sequenceA，它们存在只是历史遗留（</p><h3 id="Traversable实例"><a href="#Traversable实例" class="headerlink" title="Traversable实例"></a>Traversable实例</h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Traversable</span> <span class="type">Maybe</span> <span class="keyword">where</span></span></span><br><span class="line">    traverse _ <span class="type">Nothing</span> = pure <span class="type">Nothing</span></span><br><span class="line">    traverse f (<span class="type">Just</span> x) = <span class="type">Just</span> &lt;$&gt; f x</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Traversable</span> [] <span class="keyword">where</span></span></span><br><span class="line">    <span class="meta">&#123;-# INLINE traverse #-&#125;</span></span><br><span class="line">    traverse f = foldr cons_f (pure [])</span><br><span class="line">      <span class="keyword">where</span> cons_f x ys = liftA2 (:) (f x) ys</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Traversable</span> (<span class="type">Either</span> <span class="title">a</span>) <span class="keyword">where</span></span></span><br><span class="line">    traverse _ (<span class="type">Left</span> x) = pure (<span class="type">Left</span> x)</span><br><span class="line">    traverse f (<span class="type">Right</span> y) = <span class="type">Right</span> &lt;$&gt; f y</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Traversable</span> ((,) a) <span class="keyword">where</span></span></span><br><span class="line">    traverse f (x, y) = (,) x &lt;$&gt; f y</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>上面的Tree也可以成为Traversable的实例：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Functor</span> <span class="type">Tree</span> <span class="keyword">where</span></span></span><br><span class="line">    fmap :: (a -&gt; b) -&gt; <span class="type">Tree</span> a -&gt; <span class="type">Tree</span> b</span><br><span class="line">    fmap     g <span class="type">Empty</span>        = <span class="type">Empty</span></span><br><span class="line">    fmap     g (<span class="type">Leaf</span> x)     = <span class="type">Leaf</span> $ g x</span><br><span class="line">    fmap     g (<span class="type">Node</span> l x r) = <span class="type">Node</span> (fmap g l)</span><br><span class="line">                                   (g x)</span><br><span class="line">                                   (fmap g r)</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Traversable</span> <span class="type">Tree</span> <span class="keyword">where</span></span></span><br><span class="line">    traverse :: <span class="type">Applicative</span> f =&gt; (a -&gt; f b) -&gt; <span class="type">Tree</span> a -&gt; f (<span class="type">Tree</span> b) </span><br><span class="line">    traverse g <span class="type">Empty</span>        = pure <span class="type">Empty</span></span><br><span class="line">    traverse g (<span class="type">Leaf</span> x)     = <span class="type">Leaf</span> &lt;$&gt; g x</span><br><span class="line">    traverse g (<span class="type">Node</span> l x r) = <span class="type">Node</span> &lt;$&gt; traverse g l</span><br><span class="line">                                   &lt;*&gt; g x</span><br><span class="line">                                   &lt;*&gt; traverse g r</span><br></pre></td></tr></table></figure><h3 id="Traversable-Laws"><a href="#Traversable-Laws" class="headerlink" title="Traversable Laws"></a>Traversable Laws</h3><p>Traversable也有两条定律：</p><ol><li>traverse Identity <code>=</code> Identity</li><li>traverse (Compose . fmap g . f) <code>=</code> Compose . fmap (traverse g) . traverse f </li></ol><p>其中Identity和Compose分别定义在<code>Data.Functor.Identity</code>和<code>Data.Functor.Compose</code>两个模块中：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">newtype</span> <span class="type">Identity</span> a = <span class="type">Identity</span> &#123; <span class="title">runIdentity</span> :: <span class="title">a</span> &#125; <span class="keyword">deriving</span> (...)</span></span><br><span class="line"><span class="class"><span class="keyword">newtype</span> <span class="type">Compose</span> f g a = <span class="type">Compose</span> &#123; <span class="title">getCompose</span> :: <span class="title">f</span> (<span class="title">g</span> <span class="title">a</span>) &#125; <span class="keyword">deriving</span> (...)</span></span><br></pre></td></tr></table></figure><h2 id="Bifunctor"><a href="#Bifunctor" class="headerlink" title="Bifunctor"></a>Bifunctor</h2><p>Functor的实例的kind都是* -&gt; *，因此fmap只能将一个函数映射到一个值上。而Bifunctor（在<code>Data.Bifunctor</code>模块中定义）的实例的kind是* -&gt; * -&gt; *，而且它的bimap可以同时将两个函数映射到两个值上：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Bifunctor</span> p <span class="keyword">where</span></span> </span><br><span class="line">    bimap  :: (a -&gt; b) -&gt; (c -&gt; d) -&gt; p a c -&gt; p b d </span><br><span class="line">    first  :: (a -&gt; b) -&gt; p a c -&gt; p b c </span><br><span class="line">    second :: (b -&gt; c) -&gt; p a b -&gt; p a c </span><br><span class="line">    <span class="meta">&#123;-# MINIMAL bimap | first, second #-&#125;</span></span><br></pre></td></tr></table></figure><p>同时bimap和first,second之间也可以相互转换：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">bimap</span> f g = first f . second g</span><br><span class="line"></span><br><span class="line"><span class="title">first</span>  f = bimap f id</span><br><span class="line"><span class="title">second</span> g = bimap id g</span><br></pre></td></tr></table></figure><p>对于Functor，((,) e)和Either e才是Functor的实例，因为他们是* -&gt; *。但是对于Bifunctor，(,)和Either就是Bifunctor的实例：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; bimap (+<span class="number">1</span>) length (<span class="number">4</span>, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">(<span class="number">5</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h3 id="Bifunctor-Laws"><a href="#Bifunctor-Laws" class="headerlink" title="Bifunctor Laws"></a>Bifunctor Laws</h3><ol><li>bimap id id <code>=</code> id<br> first id <code>=</code> id<br> second id <code>=</code> id</li><li>bimap (f . g) (h . i) <code>=</code> bimap f h . bimap g i<br> first  (f . g) <code>=</code> first f  . first g<br> second (f . g) <code>=</code> second f . second g</li></ol><h2 id="Category"><a href="#Category" class="headerlink" title="Category"></a>Category</h2><p>Haskell中的Category将一般的函数推广到了普遍的态射上，它在<code>Control.Category</code>模块中，定义是：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Category</span> cat <span class="keyword">where</span></span> </span><br><span class="line">    id  :: cat a a </span><br><span class="line">    (.) :: cat b c -&gt; cat a b -&gt; cat a c</span><br></pre></td></tr></table></figure><p>它的实例有<code>(-&gt;)</code>和<code>Kleisli m</code>：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Category</span> (-&gt;) <span class="keyword">where</span></span></span><br><span class="line">    id = <span class="type">GHC</span>.<span class="type">Base</span>.id</span><br><span class="line">    (.) = (<span class="type">GHC</span>.<span class="type">Base</span>..)</span><br></pre></td></tr></table></figure><p>Kleisli是一个范畴，用来表示函数a -&gt; m b，Haskell中，它在<code>Control.Arrow</code>模块中定义：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">newtype</span> <span class="type">Kleisli</span> m a b = <span class="type">Kleisli</span> &#123; <span class="title">runKleisli</span> :: <span class="title">a</span> -&gt; <span class="title">m</span> <span class="title">b</span> &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Monad</span> m =&gt; <span class="type">Category</span> (<span class="type">Kleisli</span> <span class="title">m</span>) <span class="keyword">where</span></span></span><br><span class="line">    id :: <span class="type">Kleisli</span> m a a</span><br><span class="line">    id = <span class="type">Kleisli</span> return</span><br><span class="line"></span><br><span class="line">    (.) :: <span class="type">Kleisli</span> m b c -&gt; <span class="type">Kleisli</span> m a b -&gt; <span class="type">Kleisli</span> m a c</span><br><span class="line">    <span class="type">Kleisli</span> g . <span class="type">Kleisli</span> h = <span class="type">Kleisli</span> (h &gt;=&gt; g)</span><br></pre></td></tr></table></figure><p>Category要满足的定律只有id是(.)操作的单位元，以及(.)操作是可结合的</p><p>同时Category还提供了两个函数<code>&lt;&lt;&lt;</code>和<code>&gt;&gt;&gt;</code>：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(&lt;&lt;&lt;) :: <span class="type">Category</span> cat =&gt; cat b c -&gt; cat a b -&gt; cat a c</span><br><span class="line">(&lt;&lt;&lt;) = (.)</span><br><span class="line"></span><br><span class="line">(&gt;&gt;&gt;) :: <span class="type">Category</span> cat =&gt; cat a b -&gt; cat b c -&gt; cat a c </span><br><span class="line"><span class="title">f</span> &gt;&gt;&gt; g = g . f </span><br></pre></td></tr></table></figure><h2 id="Arrow"><a href="#Arrow" class="headerlink" title="Arrow"></a>Arrow</h2><p>Arrow将函数进一步抽象化，它定义在<code>Control.Arrow</code>模块中：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Category</span> a =&gt; <span class="type">Arrow</span> a <span class="keyword">where</span></span> </span><br><span class="line">    arr    :: (b -&gt; c) -&gt; a b c </span><br><span class="line">    first  :: a b c -&gt; a (b, d) (c, d)</span><br><span class="line">    second :: a b c -&gt; a (d, b) (d, c)</span><br><span class="line">    (***)  :: a b c -&gt; a b&#x27; c&#x27; -&gt; a (b, b&#x27;) (c, c&#x27;)</span><br><span class="line">    (&amp;&amp;&amp;)  :: a b c -&gt; a b c&#x27; -&gt; a b (c, c&#x27;)</span><br><span class="line">    <span class="meta">&#123;-# MINIMAL arr, (first | (***)) #-&#125;</span></span><br></pre></td></tr></table></figure><p>其中：</p><ul><li><code>arr</code>函数将一个函数变成一个Arrow</li><li><code>first</code>函数将一个Arrow变成一个二元组间的Arrow，且只会对一个元素进行操作，第二个元素保持不变</li><li><code>second</code>函数与first相反，第一个元素保持不变</li><li><code>***</code>函数是Arrow之间的parallel composition，对于函数: (g *** h) (x, y) = (g x, h y)</li><li><code>&amp;&amp;&amp;</code>函数是Arrow之间的fanout composition，对于函数: (g &amp;&amp;&amp; h) x = (g x, h x)</li></ul><p>它的实例也有(-&gt;)和Kleisli：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Arrow</span> (-&gt;) <span class="keyword">where</span></span></span><br><span class="line">  arr :: (b -&gt; c) -&gt; (b -&gt; c)</span><br><span class="line">  arr g = g</span><br><span class="line"></span><br><span class="line">  first :: (b -&gt; c) -&gt; ((b,d) -&gt; (c,d))</span><br><span class="line">  first g (x,y) = (g x, y)</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Monad</span> m =&gt; <span class="type">Arrow</span> (<span class="type">Kleisli</span> <span class="title">m</span>) <span class="keyword">where</span></span></span><br><span class="line">  arr :: (b -&gt; c) -&gt; <span class="type">Kleisli</span> m b c</span><br><span class="line">  arr f = <span class="type">Kleisli</span> (return . f)</span><br><span class="line"></span><br><span class="line">  first :: <span class="type">Kleisli</span> m b c -&gt; <span class="type">Kleisli</span> m (b,d) (c,d)</span><br><span class="line">  first (<span class="type">Kleisli</span> f) = <span class="type">Kleisli</span> (\ ~(b,d) -&gt; <span class="keyword">do</span> c &lt;- f b</span><br><span class="line">                                              return (c,d) )</span><br></pre></td></tr></table></figure><p>常用函数：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">returnA</span> :: <span class="type">Arrow</span> a =&gt; a b b</span><br><span class="line"><span class="title">returnA</span> = arr id</span><br><span class="line"></span><br><span class="line">(^&gt;&gt;) :: <span class="type">Arrow</span> a =&gt; (b -&gt; c) -&gt; a c d -&gt; a b d</span><br><span class="line"><span class="title">f</span> ^&gt;&gt; a = arr f &gt;&gt;&gt; a</span><br><span class="line"></span><br><span class="line">(&gt;&gt;^) :: <span class="type">Arrow</span> a =&gt; a b c -&gt; (c -&gt; d) -&gt; a b d</span><br><span class="line"><span class="title">a</span> &gt;&gt;^ f = a &gt;&gt;&gt; arr f</span><br><span class="line"></span><br><span class="line">(&lt;&lt;^) :: <span class="type">Arrow</span> a =&gt; a c d -&gt; (b -&gt; c) -&gt; a b d</span><br><span class="line"><span class="title">a</span> &lt;&lt;^ f = a &lt;&lt;&lt; arr f</span><br><span class="line"></span><br><span class="line">(^&lt;&lt;) :: <span class="type">Arrow</span> a =&gt; (c -&gt; d) -&gt; a b c -&gt; a b d</span><br><span class="line"><span class="title">f</span> ^&lt;&lt; a = arr f &lt;&lt;&lt; a</span><br></pre></td></tr></table></figure><h3 id="Arrow-notation"><a href="#Arrow-notation" class="headerlink" title="Arrow notation"></a>Arrow notation</h3><p>类似do-notation，Arrow也提供了一套方便的语句：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">proc</span> x -&gt; <span class="keyword">do</span> </span><br><span class="line">    y &lt;- action1 -&lt; ... </span><br><span class="line">    z &lt;- action2 -&lt; ...</span><br><span class="line">    returnA -&lt; ...</span><br></pre></td></tr></table></figure><p>其中proc代替了lambda表达式中的斜杠\，-&lt;右边的为输入，左边的为接收输入的函数。比如，下面三种写法达成的效果是一样的：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">f</span> :: <span class="type">Int</span> -&gt; (<span class="type">Int</span>, <span class="type">Int</span>)</span><br><span class="line"><span class="title">f</span> = \x -&gt;</span><br><span class="line">    <span class="keyword">let</span> y  = <span class="number">2</span> * x</span><br><span class="line">        z1 = y + <span class="number">3</span></span><br><span class="line">        z2 = y - <span class="number">5</span></span><br><span class="line">    <span class="keyword">in</span> (z1, z2) </span><br><span class="line"><span class="comment">-- ghci&gt; f 10 </span></span><br><span class="line"><span class="comment">-- (23,15)</span></span><br><span class="line"></span><br><span class="line"><span class="title">fM</span> :: <span class="type">Int</span> -&gt; <span class="type">Identity</span> (<span class="type">Int</span>, <span class="type">Int</span>)</span><br><span class="line"><span class="title">fM</span> = \x -&gt; <span class="keyword">do</span></span><br><span class="line">    y  &lt;- return (<span class="number">2</span> * x)</span><br><span class="line">    z1 &lt;- return (y + <span class="number">3</span>)</span><br><span class="line">    z2 &lt;- return (y - <span class="number">5</span>)</span><br><span class="line">    return (z1, z2)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ghci&gt; runIdentity (fM 10)</span></span><br><span class="line"><span class="comment">-- (23,15)</span></span><br><span class="line"></span><br><span class="line"><span class="title">fA</span> :: <span class="type">Int</span> -&gt; (<span class="type">Int</span>, <span class="type">Int</span>)</span><br><span class="line"><span class="title">fA</span> = <span class="keyword">proc</span> x -&gt; <span class="keyword">do</span></span><br><span class="line">    y  &lt;- (<span class="number">2</span> *) -&lt; x</span><br><span class="line">    z1 &lt;- (+ <span class="number">3</span>) -&lt; y</span><br><span class="line">    z2 &lt;- (subtract <span class="number">5</span>) -&lt; y</span><br><span class="line">    returnA -&lt; (z1, z2)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ghci&gt; fA 10</span></span><br><span class="line"><span class="comment">-- (23,15)</span></span><br></pre></td></tr></table></figure><h3 id="ArrowChoice"><a href="#ArrowChoice" class="headerlink" title="ArrowChoice"></a>ArrowChoice</h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Arrow</span> a =&gt; <span class="type">ArrowChoice</span> a <span class="keyword">where</span></span></span><br><span class="line">    left :: a b c -&gt; a (<span class="type">Either</span> b d) (<span class="type">Either</span> c d)</span><br><span class="line">    left = (+++ id)</span><br><span class="line"></span><br><span class="line">    right :: a b c -&gt; a (<span class="type">Either</span> d b) (<span class="type">Either</span> d c)</span><br><span class="line">    right = (id +++)</span><br><span class="line"></span><br><span class="line">    (+++) :: a b c -&gt; a b&#x27; c&#x27; -&gt; a (<span class="type">Either</span> b b&#x27;) (<span class="type">Either</span> c c&#x27;)</span><br><span class="line">    f +++ g = left f &gt;&gt;&gt; arr mirror &gt;&gt;&gt; left g &gt;&gt;&gt; arr mirror</span><br><span class="line">      <span class="keyword">where</span></span><br><span class="line">        mirror :: <span class="type">Either</span> x y -&gt; <span class="type">Either</span> y x</span><br><span class="line">        mirror (<span class="type">Left</span> x) = <span class="type">Right</span> x</span><br><span class="line">        mirror (<span class="type">Right</span> y) = <span class="type">Left</span> y</span><br><span class="line"></span><br><span class="line">    (|||) :: a b d -&gt; a c d -&gt; a (<span class="type">Either</span> b c) d</span><br><span class="line">    f ||| g = f +++ g &gt;&gt;&gt; arr untag</span><br><span class="line">      <span class="keyword">where</span></span><br><span class="line">        untag (<span class="type">Left</span> x) = x</span><br><span class="line">        untag (<span class="type">Right</span> y) = y</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">ArrowChoice</span> (-&gt;) <span class="keyword">where</span></span></span><br><span class="line">    left f = f +++ id</span><br><span class="line">    right f = id +++ f</span><br><span class="line">    f +++ g = (<span class="type">Left</span> . f) ||| (<span class="type">Right</span> . g)</span><br><span class="line">    (|||) = either</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Monad</span> m =&gt; <span class="type">ArrowChoice</span> (<span class="type">Kleisli</span> <span class="title">m</span>) <span class="keyword">where</span></span></span><br><span class="line">    left f = f +++ arr id</span><br><span class="line">    right f = arr id +++ f</span><br><span class="line">    f +++ g = (f &gt;&gt;&gt; arr <span class="type">Left</span>) ||| (g &gt;&gt;&gt; arr <span class="type">Right</span>)</span><br><span class="line">    <span class="type">Kleisli</span> f ||| <span class="type">Kleisli</span> g = <span class="type">Kleisli</span> (either f g)</span><br></pre></td></tr></table></figure><h3 id="ArrowZero-amp-ArrowPlus"><a href="#ArrowZero-amp-ArrowPlus" class="headerlink" title="ArrowZero &amp; ArrowPlus"></a>ArrowZero &amp; ArrowPlus</h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Arrow</span> a =&gt; <span class="type">ArrowZero</span> a <span class="keyword">where</span></span></span><br><span class="line">    zeroArrow :: a b c</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">ArrowZero</span> a =&gt; <span class="type">ArrowPlus</span> a <span class="keyword">where</span></span></span><br><span class="line">    (&lt;+&gt;) :: a b c -&gt; a b c -&gt; a b c</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">MonadPlus</span> m =&gt; <span class="type">ArrowZero</span> (<span class="type">Kleisli</span> <span class="title">m</span>) <span class="keyword">where</span></span></span><br><span class="line">    zeroArrow = <span class="type">Kleisli</span> (\_ -&gt; mzero)</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">MonadPlus</span> m =&gt; <span class="type">ArrowPlus</span> (<span class="type">Kleisli</span> <span class="title">m</span>) <span class="keyword">where</span></span></span><br><span class="line">    <span class="type">Kleisli</span> f &lt;+&gt; <span class="type">Kleisli</span> g = <span class="type">Kleisli</span> (\x -&gt; f x `mplus` g x)</span><br></pre></td></tr></table></figure><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; runKleisli ((<span class="type">Kleisli</span> (\x -&gt; [x * <span class="number">2</span>])) &lt;+&gt; (<span class="type">Kleisli</span> (\x -&gt; [x, -x]))) <span class="number">2</span></span><br><span class="line">[<span class="number">4</span>,<span class="number">2</span>,<span class="number">-2</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; either (+<span class="number">2</span>) (*<span class="number">3</span>) (<span class="type">Left</span> <span class="number">3</span>)</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="title">ghci</span>&gt; either (+<span class="number">2</span>) (*<span class="number">3</span>) (<span class="type">Right</span> <span class="number">3</span>)</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="title">ghci</span>&gt; (+<span class="number">2</span>) ||| (*<span class="number">3</span>) $ (<span class="type">Left</span> <span class="number">3</span>)</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="title">ghci</span>&gt; (+<span class="number">2</span>) +++ (*<span class="number">3</span>) $ (<span class="type">Left</span> <span class="number">3</span>)</span><br><span class="line"><span class="type">Left</span> <span class="number">5</span></span><br><span class="line"><span class="title">ghci</span>&gt; (+<span class="number">2</span>) ||| (*<span class="number">3</span>) $ (<span class="type">Right</span> <span class="number">3</span>)</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="title">ghci</span>&gt; (+<span class="number">2</span>) +++ (*<span class="number">3</span>) $ (<span class="type">Right</span> <span class="number">3</span>)</span><br><span class="line"><span class="type">Right</span> <span class="number">9</span></span><br><span class="line"><span class="title">ghci</span>&gt; left (+<span class="number">2</span>) (<span class="type">Left</span> <span class="number">3</span>)</span><br><span class="line"><span class="type">Left</span> <span class="number">5</span></span><br><span class="line"><span class="title">ghci</span>&gt; right (*<span class="number">3</span>) (<span class="type">Right</span> <span class="number">3</span>)</span><br><span class="line"><span class="type">Right</span> <span class="number">9</span></span><br><span class="line"><span class="title">ghci</span>&gt; left (+<span class="number">2</span>) (<span class="type">Right</span> <span class="number">3</span>)</span><br><span class="line"><span class="type">Right</span> <span class="number">3</span></span><br><span class="line"><span class="title">ghci</span>&gt; right (*<span class="number">3</span>) (<span class="type">Left</span> <span class="number">3</span>)</span><br><span class="line"><span class="type">Left</span> <span class="number">3</span></span><br><span class="line"><span class="title">ghci</span>&gt; runKleisli ((<span class="type">Kleisli</span> (\x -&gt; [x * <span class="number">2</span>])) ||| (<span class="type">Kleisli</span> (\x -&gt; [x, -x]))) (<span class="type">Left</span> <span class="number">3</span>)</span><br><span class="line">[<span class="number">6</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; runKleisli ((<span class="type">Kleisli</span> (\x -&gt; [x * <span class="number">2</span>])) ||| (<span class="type">Kleisli</span> (\x -&gt; [x, -x]))) (<span class="type">Right</span> <span class="number">3</span>)</span><br><span class="line">[<span class="number">3</span>,<span class="number">-3</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; runKleisli ((<span class="type">Kleisli</span> (\x -&gt; [x * <span class="number">2</span>])) +++ (<span class="type">Kleisli</span> (\x -&gt; [x, -x]))) (<span class="type">Left</span> <span class="number">3</span>)</span><br><span class="line">[<span class="type">Left</span> <span class="number">6</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; runKleisli ((<span class="type">Kleisli</span> (\x -&gt; [x * <span class="number">2</span>])) +++ (<span class="type">Kleisli</span> (\x -&gt; [x, -x]))) (<span class="type">Right</span> <span class="number">3</span>)</span><br><span class="line">[<span class="type">Right</span> <span class="number">3</span>,<span class="type">Right</span> (<span class="number">-3</span>)]</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://wiki.haskell.org/Typeclassopedia">Typeclassopedia - Haskell wiki</a></li><li><a href="https://blog.csdn.net/zwvista/article/details/78679542">Haskell语言学习笔记（40）Arrow（1） - zwvista</a></li><li><a href="https://ocharles.org.uk/blog/guest-posts/2014-12-21-arrows.html">24 Days of GHC Extensions: Arrows - Tom Ellis</a></li><li><a href="https://blog.csdn.net/zwvista/article/details/78690485">Haskell语言学习笔记（47）Arrow（2） - zwvista</a></li></ul><hr><div style="text-align: center;"><p style="font-size: 1.3rem; font-weight: bold;">目录</p><p>#0&nbsp;|&nbsp;<a href="/p/b3ca5c18.html">总章</a>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;<br>#1&nbsp;|&nbsp;<a href="/p/d63b5b5f.html">基础语法与函数</a>&emsp;&emsp;&emsp;<br>#2&nbsp;|&nbsp;<a href="/p/53e482b7.html">高阶函数与模块</a>&emsp;&emsp;&emsp;<br>#3&nbsp;|&nbsp;<a href="/p/369b7e08.html">类型与类型类</a>&emsp;&emsp;&emsp;&emsp;<br>#4&nbsp;|&nbsp;<a href="/p/a5bbe48a.html">输入输出与文件</a>&emsp;&emsp;&emsp;<br>#5&nbsp;|&nbsp;<a href="/p/290ecb74.html">函子、应用函子与单子</a><br>#6&nbsp;|&nbsp;<a href="/p/d4bb2633.html">半群与幺半群</a>&emsp;&emsp;&emsp;&emsp;<br>#7&nbsp;|&nbsp;<a href="/p/68ef8146.html">一些其它类型类</a>&emsp;&emsp;&emsp;<br>#A&nbsp;|&nbsp;<a href="/p/96c32eae.html">Haskell与范畴论</a>&emsp;&nbsp;&thinsp;</p></div>]]></content>
    
    
    <summary type="html">&lt;div style=&quot;display: flex; justify-content: space-between;&quot;&gt;

&lt;p&gt;&lt;a href=&quot;/p/d4bb2633.html&quot;&gt;&amp;lt; #6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/p/96c32eae.html&quot;&gt;#A &amp;gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;Foldable&quot;&gt;&lt;a href=&quot;#Foldable&quot; class=&quot;headerlink&quot; title=&quot;Foldable&quot;&gt;&lt;/a&gt;Foldable&lt;/h2&gt;&lt;p&gt;Foldable是表示可以折叠（fold）的类型类，在&lt;code&gt;Data.Foldable&lt;/code&gt;中定义，这使得和fold相关的函数可以用在任意Foldable的实例类型上。它的定义是：&lt;/p&gt;</summary>
    
    
    
    
    <category term="Haskell" scheme="https://blog.tonycrane.cc/tags/Haskell/"/>
    
    <category term="笔记" scheme="https://blog.tonycrane.cc/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>「Learn Haskell」#A Haskell与范畴论</title>
    <link href="https://blog.tonycrane.cc/p/96c32eae.html"/>
    <id>https://blog.tonycrane.cc/p/96c32eae.html</id>
    <published>2021-07-19T06:01:00.000Z</published>
    <updated>2021-07-25T04:51:23.712Z</updated>
    
    <content type="html"><![CDATA[<p>Haskell中的函子单子等都与范畴论（category theory）有很多联系，所以打算简单了解一下范畴论的相关内容。</p><blockquote><p><strong>范畴论</strong>是数学的一门学科，以抽象的方法处理数学概念，将这些概念形式化成一组组的“物件”及“态射”。数学中许多重要的领域可以形式化为范畴。使用范畴论可以令这些领域中许多难理解、难捉摸的数学结论更容易叙述证明。</p><div style="text-align: right">———— 维基百科</div></blockquote><h2 id="范畴（Category）"><a href="#范畴（Category）" class="headerlink" title="范畴（Category）"></a>范畴（Category）</h2><p>范畴本质上是一个简单的集合，一个范畴$\mathbf{C}$包含三个组成成分：</p><span id="more"></span><ul><li>一个类$\mathrm{ob}(\mathbf{C})$：其中元素称为<strong>对象（objects）</strong></li><li>一个类$\mathrm{hom}(\mathbf{C})$：其中元素称为<strong>态射（morphisms）</strong>（或<strong>箭号（arrows）</strong>）：每个态射连接了两个对象：源对象（source object）、目标对象（target object）。如果$f$是从源对象$A$到目标对象$B$（$A, B\in \mathrm{ob}(\mathbf{C})$）的态射，那么记为$f : A\to B$</li><li>一个二元运算，称为态射<strong>复合（composition）</strong>：两个态射$g : A\to B$、$f : B\to C$的复合记为$f\circ g : A\to C$<br>在Haskell和大部分数学理论中都是从右向左计算，即$f\circ g$中是先计算$g : A\to B$再计算$f : B\to C$</li></ul><p>许多东西都可以组成范畴。比如:</p><p>&emsp;$\mathbf{Set}$是一个范畴，对象为所有集合，态射为集合之间的函数，复合即函数之间的复合</p><p>&emsp;$\mathbf{Grp}$是一个范畴，对象为所有群，态射为群同态（group homomorphisms），例如对于群$(G,*)$和$(H,\cdot )$，有群同态$h : (G,*)\to (H,\cdot )$，则需要对于$G$中的任意元素$u,v$满足<br>$$h(u*v)=h(u)\cdot h(v)$$</p><p><strong>注意</strong>：态射不必须为函数；而且可以存在源对象和目标对象都相同的不同态射</p><h3 id="范畴公理"><a href="#范畴公理" class="headerlink" title="范畴公理"></a>范畴公理</h3><p>每个范畴都需要满足三条定律：</p><ol><li>态射复合需要满足<strong>结合律（associativity）</strong>：<br>$$f\circ (g\circ h) = (f\circ g)\circ h$$</li><li>范畴在复合操作下是<strong>闭合的（closed）</strong>：<br>&emsp;&emsp;&emsp;如果范畴$\mathbf{C}$中存在态射$f : B\to C$、$g : A\to B$，那么范畴$\mathbf{C}$中也一定存在态射$h : A\to C$，且$h=f\circ g$</li><li>每个对象都需要有<strong>单位态射（identity morphisms）</strong>：<br>&emsp;&emsp;&emsp;对于范畴$\mathbf{C}$中的对象$A$，一定存在单位态射$\mathrm{id}_A : A\to A$，且对于每个态射$g : A\to B$，一定有：<br>$$g\circ\mathrm{id}_A = \mathrm{id}_B\circ g = g$$</li></ol><h3 id="mathbf-Hask-范畴"><a href="#mathbf-Hask-范畴" class="headerlink" title="$\mathbf{Hask}$范畴"></a>$\mathbf{Hask}$范畴</h3><p>范畴$\mathbf{Hask}$的对象为Haskell中的类型（types），态射是Haskell中的函数，复合运算是<code>(.)</code>。即从类型A到类型B的函数 f :: A -&gt; B 就是$\mathbf{Hask}$范畴中的一个态射。而函数 f :: B -&gt; C 、g :: A -&gt; B 的组合 f . g 就是一个新的函数 h :: A -&gt; C。</p><p>对于三条定律：</p><ol><li>第一条显然满足：f . (g . h) = (f . g) . h</li><li>第二条也显然满足，如果有函数 f :: B -&gt; C 、g :: A -&gt; B，一定有函数 h = (f . g) :: A -&gt; C </li><li>对于第三条定律，Haskell中存在单位函数 id ，但id是多态（polymorphic）的，要为其指定类型使其变成单态（monomorphic）的。比如态射$\mathrm{id}_A$在Haskell中就可以表示为 id :: A -&gt; A。并且显然满足第三条定律（其中 f :: A -&gt; B）：<p style="text-align: center;">(id :: B -> B) . f = f . (id :: A -> A) = f</p></li></ol><h2 id="函子（Functors）"><a href="#函子（Functors）" class="headerlink" title="函子（Functors）"></a>函子（Functors）</h2><p>一个范畴中的态射将两个对象联系起来，而函子则会将两个范畴联系起来。换句话说，函子就是从一个范畴到另一个范畴的变换。比如对于范畴$\mathbf{C}$、$\mathbf{D}$，定义函子$F : \mathbf{C}\to\mathbf{D}$满足：</p><ul><li>对于$\mathbf{C}$中的任意对象$A$，在$\mathbf{D}$中都有对象$F(A)$</li><li>对于$\mathbf{C}$中的任意态射$f : A\to B$，在$\mathbf{D}$中都有态射$F(f) : F(A)\to F(B)$</li></ul><p>比如：</p><p>&emsp;遗忘函子（forgetful functor）$U : \mathbf{Grp}\to\mathbf{Set}$，将一个群映射到一个集合中，将群同态映射到集合间的函数</p><p>&emsp;幂集函子（power set functor）$P : \mathbf{Set}\to\mathbf{Set}$，将一个集合映射到它的幂集，将原集合中的函数$f : A\to B$映射到函数$P(f) : \mathcal{P}(A)\to\mathcal{P}(B)$，即从$U\subseteq A$到值域$f(U)\subseteq B$的映射</p><p>&emsp;自函子（endofunctor）$1_{\mathbf{C}} : \mathbf{C}\to\mathbf{C}$，将一个范畴映射到它本身</p><h3 id="函子公理"><a href="#函子公理" class="headerlink" title="函子公理"></a>函子公理</h3><p>函子$F : \mathbf{C}\to\mathbf{D}$也需要满足两个公理：</p><ol><li>对于任意对象$X\in\mathbf{C}$，恒有$F(\mathrm{id}_X)=\mathrm{id}_{F(X)}$</li><li>对于态射$f : Y\to Z$、$g : X\to Y$，恒有$F(f\circ g) = F(f)\circ F(g)$</li></ol><h3 id="mathbf-Hask-范畴上的函子"><a href="#mathbf-Hask-范畴上的函子" class="headerlink" title="$\mathbf{Hask}$范畴上的函子"></a>$\mathbf{Hask}$范畴上的函子</h3><p>Haskell中的Functor定义是：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Functor</span> (<span class="title">f</span> :: * -&gt; *) <span class="keyword">where</span></span> </span><br><span class="line">    fmap :: (a -&gt; b) -&gt; f a -&gt; f b</span><br></pre></td></tr></table></figure><p>对于Haskell中的Functor，它实际上是从$\mathbf{Hask}$范畴（types）到它子范畴的变换。比如列表函子$\mathtt{[]} : \mathbf{Hask}\to\mathbf{Lst}$（其中$\mathbf{Lst}$是所有Haskell中列表类型构成的范畴）</p><p>它也达成了范畴论中对于函子的要求。函子需要进行两个操作：将一个范畴中的对象映射到另一个范畴中、将一个范畴中的态射映射到另一个范畴中。以Maybe为例，它实现了函子的要求：</p><ol><li>Maybe是一个类型构造器，他可以将任意类型 T 变成新类型 Maybe T，相当于从$\mathbf{Hask}$范畴的对象变成了$\mathbf{Maybe}$范畴的对象 </li><li>fmap函数接收一个 a -&gt; b 类型的函数，返回一个 Maybe a -&gt; Maybe b 类型的函数，相当于将$\mathbf{Hask}$范畴中的态射$f : A\to B$映射成了$\mathbf{Maybe}$范畴中的态射$\mathbf{Maybe}(f) : \mathbf{Maybe}(A)\to\mathbf{Maybe}(B)$</li></ol><p><strong>注意</strong>：时刻记住这里研究的是$\mathbf{Hask}$范畴和它的子范畴，对象是类型而不是值，态射是函数也指的是从类型到类型</p><p>同时，Haskell中的Functor也满足函子公理：</p><ol><li>fmap id = id 即 fmap (id :: A -&gt; A) = (id :: f A -&gt; f A)</li><li>fmap (f . g) = fmap f . fmap g</li></ol><h2 id="单子（Monads）"><a href="#单子（Monads）" class="headerlink" title="单子（Monads）"></a>单子（Monads）</h2><blockquote><p>一个单子说白了不过就是自函子范畴上的一个幺半群而已 _(:з」∠)_</p></blockquote><p>自函子在前面说到过是从一个范畴到自身的一个函子，如范畴$\mathbf{C}$上的自函子是$F : \mathbf{C}\to\mathbf{C}$。自函子范畴就是对象都是自函子的范畴。幺半群和Haskell中学到的Monoid类型类一样，是一个有可结合二元运算和单位元的代数结构。因此单子就是一个自函子，而且它有可结合二元运算（Haskell中<code>&gt;=&gt;</code>）和单位元（Haskell中<code>return</code>）。</p><p>一个单子$M : \mathbf{C}\to\mathbf{C}$还包含两个态射（对于范畴$\mathbf{C}$中的所有对象$X$）：</p><ol><li>$\mathrm{unit}_X^M : X\to M(X)$</li><li>$\mathrm{join}_X^M : M(M(X))\to M(X)$</li></ol><p>（当式子中的单子明显是$M$时，可以省略上标${}^M$）</p><p>Haskell中Monad的定义是：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Functor</span> m =&gt; <span class="type">Monad</span> m <span class="keyword">where</span></span> </span><br><span class="line">    return :: a -&gt; m a </span><br><span class="line">    (&gt;&gt;=)  :: m a -&gt; (a -&gt; m b) -&gt; m b</span><br></pre></td></tr></table></figure><p>其中很显然多态函数<code>return</code>对应了定义中的$\mathrm{unit}$，但是<code>&gt;&gt;=</code>和$mathrm{join}$的对应关系并不明显。因此Haskell中有一个工具函数<code>join</code>，它的效果就是定义中的$\mathrm{join}$，而且它可以和<code>&gt;&gt;=</code>互相定义：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">join</span> :: <span class="type">Monad</span> m =&gt; m (m a) -&gt; m a</span><br><span class="line"><span class="title">join</span> x = x &gt;&gt;= id</span><br><span class="line"></span><br><span class="line">(&gt;&gt;=) :: m a -&gt; (a -&gt; m b) -&gt; m b </span><br><span class="line"><span class="title">x</span> &gt;&gt;= f = join $ fmap f x</span><br></pre></td></tr></table></figure><p>所以Haskell中为Monad要求定义<code>&gt;&gt;=</code>就相当于定义了$\mathrm{join}$</p><p>例如，幂集函子$P : \mathbf{Set}\to\mathbf{Set}$也是一个单子，可以为它定义$\mathrm{unit}$和$\mathrm{join}$两个态射。Haskell中的列表也可以近似看作幂集函子。</p><p>&emsp;态射/函数的类型：</p><table><thead><tr><th align="center">幂集函子</th><th align="center">Haskell中列表</th></tr></thead><tbody><tr><td align="center">一个集合$S$和一个态射$f : A\to B$</td><td align="center">一个类型 T 和一个函数 f :: A -&gt; B</td></tr><tr><td align="center">$P(f) : \mathcal{P}(A)\to\mathcal{P}(B)$</td><td align="center">fmap f :: [A] -&gt; [B]</td></tr><tr><td align="center">$\mathrm{unit}_S : S\to\mathcal{P}(S)$</td><td align="center">return :: T -&gt; [T]</td></tr><tr><td align="center">$\mathrm{join}_S : \mathcal{P}(\mathcal{P}(S))\to\mathcal{P}(S)$</td><td align="center">join :: [[T]] -&gt; [T]</td></tr></tbody></table><p>&emsp;态射/函数的定义：</p><table><thead><tr><th align="center">幂集函子</th><th align="center">Haskell中列表</th></tr></thead><tbody><tr><td align="center">$(\mathcal{P}(f))(S) = \{f(a):a\in S\}$</td><td align="center">fmap f xs = [ f a | a &lt;- xs ]</td></tr><tr><td align="center">$\mathrm{unit}_S(x) = \{x\}$</td><td align="center">return x = [x]</td></tr><tr><td align="center">$\mathrm{join}_S(L) = \bigcup L$</td><td align="center">join xs = concat xs</td></tr></tbody></table><h3 id="单子公理"><a href="#单子公理" class="headerlink" title="单子公理"></a>单子公理</h3><p>给定一个单子$M : \mathbf{C}\to\mathbf{C}$，和一个态射$f : A\to B$（其中$A,B\in \mathbf{C}$），那么满足下面四条定律：</p><ol><li>$\mathrm{join}\circ M(\mathrm{join})=\mathrm{join}\circ\mathrm{join}$</li><li>$\mathrm{join}\circ M(\mathrm{unit})=\mathrm{join}\circ\mathrm{unit}=\mathrm{id}$</li><li>$\mathrm{unit}\circ f = M(f)\circ\mathrm{unit}$</li><li>$\mathrm{join}\circ M(M(f)) = M(f)\circ\mathrm{join}$</li></ol><p>也可以很自然地将其转化为Haskell中的表述：</p><ol><li>join . fmap join <code>=</code> join . join </li><li>join . fmap return <code>=</code> join . return <code>=</code> id </li><li>return . f <code>=</code> fmap f . return </li><li>join . fmap (fmap f) <code>=</code> fmap f . join</li></ol><p>在Haskell中，使用<code>&gt;&gt;=</code>也有三个定律和这四个定律是等价的：</p><ol><li>return x &gt;&gt;= f <code>=</code> f x <figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  return x &gt;&gt;= f </span><br><span class="line">= join (fmap f (return x)) = join (fmap f . return $ x)</span><br><span class="line">= join (return (f x)) = join (return . f $ x)</span><br><span class="line">= join . return $ (f x)</span><br><span class="line">= id (f x)</span><br><span class="line">= f x</span><br></pre></td></tr></table></figure></li><li>m &gt;&gt;= return <code>=</code> m<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  m &gt;&gt;= return </span><br><span class="line">= join (fmap return m) = join . fmap return $ m </span><br><span class="line">= id m</span><br><span class="line">= m </span><br></pre></td></tr></table></figure></li><li>(m &gt;&gt;= f) &gt;&gt;= g <code>=</code> m &gt;&gt;= (\x -&gt; f x &gt;&gt;= g)<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  (m &gt;&gt;= f) &gt;&gt;= g </span><br><span class="line">= (join (fmap f m)) &gt;&gt;= g = join (fmap g (join (fmap f m)))</span><br><span class="line">= join . fmap g . join $ fmap f m </span><br><span class="line">= join . join . fmap (fmap g) $ fmap f m </span><br><span class="line">= join . join . fmap (fmap g) . fmap f $ m </span><br><span class="line">= join . join . fmap (fmap g . f) $ m </span><br><span class="line">= join . fmap join . fmap (fmap g . f) $ m </span><br><span class="line">= join . fmap (join . (fmap g . f)) $ m </span><br><span class="line">= join . fmap (\x -&gt; join (fmap g (f x))) $ m </span><br><span class="line">= join . fmap (\x -&gt; f x &gt;&gt;= g) $ m </span><br><span class="line">= join (fmap (\x -&gt; f x &gt;&gt;= g) m)</span><br><span class="line">= m &gt;&gt;= (\x -&gt; f x &gt;&gt;= g)</span><br></pre></td></tr></table></figure></li></ol><p>（范畴论就先简单看这些，只是为了更好理解Haskell中概念而已）</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://en.wikibooks.org/wiki/Haskell/Category_theory">Haskell/Category theory - wikibooks</a></li><li><a href="https://en.wikipedia.org/wiki/Category_theory">Category theory - wikipedia</a></li><li><a href="https://zh.wikipedia.org/wiki/%E8%8C%83%E7%95%B4%E8%AE%BA">范畴论 - 维基百科</a></li><li><a href="https://en.wikipedia.org/wiki/Monad_(category_theory)">Monad (category theory) - wikipedia</a></li><li><a href="https://en.wikipedia.org/wiki/Functor">Functor - wikipedia</a></li></ul><hr><div style="text-align: center;"><p style="font-size: 1.3rem; font-weight: bold;">目录</p><p>#0&nbsp;|&nbsp;<a href="/p/b3ca5c18.html">总章</a>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;<br>#1&nbsp;|&nbsp;<a href="/p/d63b5b5f.html">基础语法与函数</a>&emsp;&emsp;&emsp;<br>#2&nbsp;|&nbsp;<a href="/p/53e482b7.html">高阶函数与模块</a>&emsp;&emsp;&emsp;<br>#3&nbsp;|&nbsp;<a href="/p/369b7e08.html">类型与类型类</a>&emsp;&emsp;&emsp;&emsp;<br>#4&nbsp;|&nbsp;<a href="/p/a5bbe48a.html">输入输出与文件</a>&emsp;&emsp;&emsp;<br>#5&nbsp;|&nbsp;<a href="/p/290ecb74.html">函子、应用函子与单子</a><br>#6&nbsp;|&nbsp;<a href="/p/d4bb2633.html">半群与幺半群</a>&emsp;&emsp;&emsp;&emsp;<br>#7&nbsp;|&nbsp;<a href="/p/68ef8146.html">一些其它类型类</a>&emsp;&emsp;&emsp;<br>#A&nbsp;|&nbsp;<a href="/p/96c32eae.html">Haskell与范畴论</a>&emsp;&nbsp;&thinsp;</p></div>]]></content>
    
    
    <summary type="html">&lt;p&gt;Haskell中的函子单子等都与范畴论（category theory）有很多联系，所以打算简单了解一下范畴论的相关内容。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;范畴论&lt;/strong&gt;是数学的一门学科，以抽象的方法处理数学概念，将这些概念形式化成一组组的“物件”及“态射”。数学中许多重要的领域可以形式化为范畴。使用范畴论可以令这些领域中许多难理解、难捉摸的数学结论更容易叙述证明。&lt;/p&gt;
&lt;div style=&quot;text-align: right&quot;&gt;———— 维基百科&lt;/div&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;范畴（Category）&quot;&gt;&lt;a href=&quot;#范畴（Category）&quot; class=&quot;headerlink&quot; title=&quot;范畴（Category）&quot;&gt;&lt;/a&gt;范畴（Category）&lt;/h2&gt;&lt;p&gt;范畴本质上是一个简单的集合，一个范畴$\mathbf{C}$包含三个组成成分：&lt;/p&gt;</summary>
    
    
    
    
    <category term="Haskell" scheme="https://blog.tonycrane.cc/tags/Haskell/"/>
    
    <category term="笔记" scheme="https://blog.tonycrane.cc/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="范畴论" scheme="https://blog.tonycrane.cc/tags/%E8%8C%83%E7%95%B4%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>「Learn Haskell」#6 半群与幺半群</title>
    <link href="https://blog.tonycrane.cc/p/d4bb2633.html"/>
    <id>https://blog.tonycrane.cc/p/d4bb2633.html</id>
    <published>2021-07-17T03:15:47.000Z</published>
    <updated>2021-07-25T04:54:13.884Z</updated>
    
    <content type="html"><![CDATA[<div style="display: flex; justify-content: space-between;"><p><a href="/p/290ecb74.html">&lt; #5</a></p><p><a href="/p/68ef8146.html">#7 &gt;</a></p></div><h2 id="Semigroup"><a href="#Semigroup" class="headerlink" title="Semigroup"></a>Semigroup</h2><p>半群（semigroup）是一个集合$S$，它需要指定一个二元运算符$\oplus$，并且满足</p><p>$$<br>a\oplus b \in S\quad a, b\in S<br>$$</p><p>以及结合（associative）律：</p><p>$$<br>(a\oplus b)\oplus c = a\oplus (b\oplus c)<br>$$</p><p>这个二元运算符在Haskell的Semigroup中被定义为<code>&lt;&gt;</code>函数：</p><span id="more"></span><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Semigroup</span> a <span class="keyword">where</span></span></span><br><span class="line">    (&lt;&gt;) :: a -&gt; a -&gt; a </span><br><span class="line"></span><br><span class="line">    sconcat :: <span class="type">NonEmpty</span> a -&gt; a </span><br><span class="line">    sconcat (a :| <span class="keyword">as</span>) = go a <span class="keyword">as</span> <span class="keyword">where</span> </span><br><span class="line">        go b (c:cs) = b &lt;&gt; go c cs </span><br><span class="line">        go b []     = b</span><br><span class="line">    </span><br><span class="line">    stimes :: <span class="type">Integarl</span> b =&gt; b -&gt; a -&gt; a </span><br><span class="line">    stimes = ...</span><br></pre></td></tr></table></figure><p>除此之外还有<code>sconcat</code>和<code>stimes</code>函数，都给出了默认实现。对于列表，&lt;&gt;相当于(++)，stimes相当于concat . replicate：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; [<span class="number">1</span>, <span class="number">2</span>] &lt;&gt; [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; sconcat $ fromList [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]]</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; stimes <span class="number">3</span> [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br></pre></td></tr></table></figure><h3 id="Semigroup-Law"><a href="#Semigroup-Law" class="headerlink" title="Semigroup Law"></a>Semigroup Law</h3><ul><li>(x &lt;&gt; y) &lt;&gt; z <code>=</code> x &lt;&gt; (y &lt;&gt; z)</li></ul><h3 id="补：NonEmpty"><a href="#补：NonEmpty" class="headerlink" title="补：NonEmpty"></a>补：NonEmpty</h3><p>NonEmpty表示非空列表，定义是：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">NonEmpty</span> a = a :| [a] <span class="keyword">deriving</span> (<span class="type">Eq</span>, <span class="type">Ord</span>)</span></span><br></pre></td></tr></table></figure><p>使用一个元素和一个列表用<code>:|</code>连接就可以生成一个NonEmpty类型的列表</p><p><code>Data.List.NonEmpty</code>模块中实现了很多普通列表有的函数，需要qualified import后调用，使用fromList、toList函数可以在普通列表和非空列表之间转换</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; <span class="keyword">import</span> <span class="keyword">qualified</span> Data.List.NonEmpty <span class="keyword">as</span> NE</span><br><span class="line"><span class="title">ghci</span>&gt; arr = <span class="type">NE</span>.fromList [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; arr</span><br><span class="line"><span class="number">1</span> :| [<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; <span class="type">NE</span>.head arr </span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="title">ghci</span>&gt; <span class="type">NE</span>.tail arr </span><br><span class="line">[<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure><h2 id="Monoid"><a href="#Monoid" class="headerlink" title="Monoid"></a>Monoid</h2><p>幺半群（Monoid）是一个有单位元素$e$的半群，即$e$满足：</p><p>$$<br>e\oplus x = x\oplus e = x<br>$$</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Semigroup</span> a =&gt; <span class="type">Monoid</span> a <span class="keyword">where</span></span> </span><br><span class="line">    mempty  :: a </span><br><span class="line">    </span><br><span class="line">    mappend :: a -&gt; a -&gt; a </span><br><span class="line">    mappend = (&lt;&gt;)</span><br><span class="line"></span><br><span class="line">    mconcat :: [a] -&gt; a </span><br><span class="line">    mconcat = foldr mappend mempty </span><br></pre></td></tr></table></figure><p>可以看出Monoid要求了三个函数，其中最少只需要<code>mempty</code>，它直接返回一个值，表示单位元素。<code>mappend</code>即Semigroup中的&lt;&gt;运算符，<code>mconcat</code>也提供了默认实现</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><h4 id="a"><a href="#a" class="headerlink" title="[a]"></a>[a]</h4><p>因为Monoid的实例是一个具体类型，而不是像Functor等一样等类型构造器，所以[]并不是Monoid的实例，但是具体类型[a]是一个幺半群：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Semigroup</span> [a] <span class="keyword">where</span></span> </span><br><span class="line">    (&lt;&gt;) = (++)</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Monoid</span> [a] <span class="keyword">where</span></span> </span><br><span class="line">    mempty = [] </span><br><span class="line">    mconcat xss = [x | xs &lt;- xss, x &lt;- xs]</span><br></pre></td></tr></table></figure><p>列表的单位元素(mempty)就是空列表[]，运算符就是合并列表(++)，mconcat也用列表推导重新实现提高效率</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; mempty :: [<span class="type">Int</span>] </span><br><span class="line">[]</span><br><span class="line"><span class="title">ghci</span>&gt; [<span class="number">1</span>, <span class="number">2</span>] &lt;&gt; [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; [<span class="number">1</span>, <span class="number">2</span>] `mappend` [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; mconcat [[<span class="number">1</span>,<span class="number">2</span>], [<span class="number">3</span>,<span class="number">4</span>]]</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br></pre></td></tr></table></figure><h4 id="Ordering"><a href="#Ordering" class="headerlink" title="Ordering"></a>Ordering</h4><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Semigroup</span> <span class="type">Ordering</span> <span class="keyword">where</span></span></span><br><span class="line">    <span class="type">LT</span> &lt;&gt; _ = <span class="type">LT</span></span><br><span class="line">    <span class="type">EQ</span> &lt;&gt; y = y</span><br><span class="line">    <span class="type">GT</span> &lt;&gt; _ = <span class="type">GT</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Monoid</span> <span class="type">Ordering</span> <span class="keyword">where</span></span></span><br><span class="line">    mempty = <span class="type">EQ</span></span><br></pre></td></tr></table></figure><p>主要可以用于比较字典序：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; mconcat (zipWith compare <span class="string">&quot;abcd&quot;</span> <span class="string">&quot;acbd&quot;</span>)</span><br><span class="line"><span class="type">LT</span></span><br></pre></td></tr></table></figure><h4 id="Sum-amp-Product"><a href="#Sum-amp-Product" class="headerlink" title="Sum &amp; Product"></a>Sum &amp; Product</h4><p>对于数字，加法和乘法都满足结合律，所以对于Num，有两种实现Monoid的方式，但是不能为同一类型设置两种实例方式，所以<code>Data.Monoid</code>中提供了两个包装器————Sum和Product：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">newtype</span> <span class="type">Sum</span> a = <span class="type">Sum</span> &#123;<span class="title">getSum</span> :: <span class="title">a</span>&#125; <span class="keyword">deriving</span> (...)</span></span><br><span class="line"><span class="class"><span class="keyword">newtype</span> <span class="type">Product</span> a = <span class="type">Product</span> &#123;<span class="title">getProduct</span> :: <span class="title">a</span>&#125; <span class="keyword">deriving</span> (...)</span></span><br></pre></td></tr></table></figure><p>它们使用Sum或Product来包装起一个数字，可以通过getSum或getProduct来获取其中的值</p><p>对于加法，二元操作为(+)，单位元素为0；对于乘法，二元操作为(*)，单位元素为1:</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Num</span> a =&gt; <span class="type">Semigroup</span> (<span class="type">Sum</span> <span class="title">a</span>) <span class="keyword">where</span></span></span><br><span class="line">    (&lt;&gt;) = coerce ((+) :: a -&gt; a -&gt; a)</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Num</span> a =&gt; <span class="type">Monoid</span> (<span class="type">Sum</span> <span class="title">a</span>) <span class="keyword">where</span></span></span><br><span class="line">    mempty = <span class="type">Sum</span> <span class="number">0</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Num</span> a =&gt; <span class="type">Semigroup</span> (<span class="type">Product</span> <span class="title">a</span>) <span class="keyword">where</span></span></span><br><span class="line">    (&lt;&gt;) = coerce ((*) :: a -&gt; a -&gt; a)</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Num</span> a =&gt; <span class="type">Monoid</span> (<span class="type">Product</span> <span class="title">a</span>) <span class="keyword">where</span></span></span><br><span class="line">    mempty = <span class="type">Product</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; <span class="type">Sum</span> <span class="number">5</span> &lt;&gt; <span class="type">Sum</span> <span class="number">6</span> &lt;&gt; <span class="type">Sum</span> <span class="number">10</span></span><br><span class="line"><span class="type">Sum</span> &#123;getSum = <span class="number">21</span>&#125;</span><br><span class="line"><span class="title">ghci</span>&gt; getSum . mconcat . fmap <span class="type">Sum</span> $ [<span class="number">5</span>, <span class="number">6</span>, <span class="number">10</span>]</span><br><span class="line"><span class="number">21</span></span><br><span class="line"><span class="title">ghci</span>&gt; <span class="type">Product</span> <span class="number">5</span> &lt;&gt; <span class="type">Product</span> <span class="number">6</span> &lt;&gt; <span class="type">Product</span> <span class="number">10</span></span><br><span class="line"><span class="type">Product</span> &#123;getProduct = <span class="number">300</span>&#125;</span><br><span class="line"><span class="title">ghci</span>&gt; getProduct . mconcat . fmap <span class="type">Product</span> $ [<span class="number">5</span>, <span class="number">6</span>, <span class="number">10</span>]</span><br><span class="line"><span class="number">300</span></span><br></pre></td></tr></table></figure><h4 id="All-amp-Any"><a href="#All-amp-Any" class="headerlink" title="All &amp; Any"></a>All &amp; Any</h4><p>和数字一样，布尔值也有两种实现Monoid的方式，因此<code>Data.Monoid</code>模块中也提供了两个包装器，分别实现了这两种Monoid：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">newtype</span> <span class="type">All</span> = <span class="type">All</span> &#123; <span class="title">getAll</span> :: <span class="type">Bool</span> &#125; <span class="keyword">deriving</span> (...)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Semigroup</span> <span class="type">All</span> <span class="keyword">where</span></span></span><br><span class="line">        (&lt;&gt;) = coerce (&amp;&amp;)</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Monoid</span> <span class="type">All</span> <span class="keyword">where</span></span></span><br><span class="line">        mempty = <span class="type">All</span> <span class="type">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">newtype</span> <span class="type">Any</span> = <span class="type">Any</span> &#123; <span class="title">getAny</span> :: <span class="type">Bool</span> &#125; <span class="keyword">deriving</span> (...)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Semigroup</span> <span class="type">Any</span> <span class="keyword">where</span></span></span><br><span class="line">        (&lt;&gt;) = coerce (||)</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Monoid</span> <span class="type">Any</span> <span class="keyword">where</span></span></span><br><span class="line">        mempty = <span class="type">Any</span> <span class="type">False</span></span><br></pre></td></tr></table></figure><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; getAll (<span class="type">All</span> <span class="type">True</span> &lt;&gt; mempty &lt;&gt; <span class="type">All</span> <span class="type">False</span>)</span><br><span class="line"><span class="type">False</span></span><br><span class="line"><span class="title">ghci</span>&gt; getAll (mconcat (map (\x -&gt; <span class="type">All</span> (even x)) [<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]))</span><br><span class="line"><span class="type">False</span></span><br><span class="line"><span class="title">ghci</span>&gt; getAny (<span class="type">Any</span> <span class="type">True</span> &lt;&gt; mempty &lt;&gt; <span class="type">Any</span> <span class="type">False</span>)</span><br><span class="line"><span class="type">True</span></span><br><span class="line"><span class="title">ghci</span>&gt; getAny (mconcat (map (\x -&gt; <span class="type">Any</span> (even x)) [<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]))</span><br><span class="line"><span class="type">True</span></span><br></pre></td></tr></table></figure><h4 id="Monoid-a-gt-Maybe-a"><a href="#Monoid-a-gt-Maybe-a" class="headerlink" title="Monoid a =&gt; Maybe a"></a>Monoid a =&gt; Maybe a</h4><p>如果a是一个(幺)半群，那么Maybe a也是一个幺半群，单位元就是Nothing：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Semigroup</span> a =&gt; <span class="type">Semigroup</span> (<span class="type">Maybe</span> <span class="title">a</span>) <span class="keyword">where</span></span></span><br><span class="line">    <span class="type">Nothing</span> &lt;&gt; b       = b</span><br><span class="line">    a       &lt;&gt; <span class="type">Nothing</span> = a</span><br><span class="line">    <span class="type">Just</span> a  &lt;&gt; <span class="type">Just</span> b  = <span class="type">Just</span> (a &lt;&gt; b)</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Semigroup</span> a =&gt; <span class="type">Monoid</span> (<span class="type">Maybe</span> <span class="title">a</span>) <span class="keyword">where</span></span></span><br><span class="line">    mempty = <span class="type">Nothing</span></span><br></pre></td></tr></table></figure><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; <span class="type">Nothing</span> &lt;&gt; <span class="type">Just</span> <span class="string">&quot;andy&quot;</span></span><br><span class="line"><span class="type">Just</span> <span class="string">&quot;andy&quot;</span></span><br><span class="line"><span class="title">ghci</span>&gt; <span class="type">Just</span> <span class="type">LT</span> &lt;&gt; <span class="type">Nothing</span></span><br><span class="line"><span class="type">Just</span> <span class="type">LT</span></span><br><span class="line"><span class="title">ghci</span>&gt; <span class="type">Just</span> (<span class="type">Sum</span> <span class="number">3</span>) &lt;&gt; <span class="type">Just</span> (<span class="type">Sum</span> <span class="number">4</span>) </span><br><span class="line"><span class="type">Just</span> (<span class="type">Sum</span> &#123;getSum = <span class="number">7</span>&#125;)</span><br></pre></td></tr></table></figure><h4 id="First-amp-Last"><a href="#First-amp-Last" class="headerlink" title="First &amp; Last"></a>First &amp; Last</h4><p>对于Maybe也有两种实现Monoid的方法，即&lt;&gt;操作每次恒取左边和每次恒取右边（在没有Nothing的情况下），所以<code>Data.Monoid</code>模块中也提供了两个新的包装器：First和Last：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">newtype</span> <span class="type">First</span> a = <span class="type">First</span> &#123; <span class="title">getFirst</span> :: <span class="type">Maybe</span> <span class="title">a</span> &#125; <span class="keyword">deriving</span> (...)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Semigroup</span> (<span class="type">First</span> <span class="title">a</span>) <span class="keyword">where</span></span></span><br><span class="line">    <span class="type">First</span> <span class="type">Nothing</span> &lt;&gt; b = b</span><br><span class="line">    a             &lt;&gt; _ = a</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Monoid</span> (<span class="type">First</span> <span class="title">a</span>) <span class="keyword">where</span></span></span><br><span class="line">    mempty = <span class="type">First</span> <span class="type">Nothing</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">newtype</span> <span class="type">Last</span> a = <span class="type">Last</span> &#123; <span class="title">getLast</span> :: <span class="type">Maybe</span> <span class="title">a</span> &#125; <span class="keyword">deriving</span> (...)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Semigroup</span> (<span class="type">Last</span> <span class="title">a</span>) <span class="keyword">where</span></span></span><br><span class="line">    a &lt;&gt; <span class="type">Last</span> <span class="type">Nothing</span> = a</span><br><span class="line">    _ &lt;&gt; b            = b</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Monoid</span> (<span class="type">Last</span> <span class="title">a</span>) <span class="keyword">where</span></span></span><br><span class="line">    mempty = <span class="type">Last</span> <span class="type">Nothing</span></span><br></pre></td></tr></table></figure><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; getFirst (<span class="type">First</span> (<span class="type">Just</span> <span class="string">&quot;hello&quot;</span>) &lt;&gt; <span class="type">First</span> <span class="type">Nothing</span> &lt;&gt; <span class="type">First</span> (<span class="type">Just</span> <span class="string">&quot;world&quot;</span>))</span><br><span class="line"><span class="type">Just</span> <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="title">ghci</span>&gt; getLast (<span class="type">Last</span> (<span class="type">Just</span> <span class="string">&quot;hello&quot;</span>) &lt;&gt; <span class="type">Last</span> <span class="type">Nothing</span> &lt;&gt; <span class="type">Last</span> (<span class="type">Just</span> <span class="string">&quot;world&quot;</span>))</span><br><span class="line"><span class="type">Just</span> <span class="string">&quot;world&quot;</span></span><br><span class="line"><span class="title">ghci</span>&gt; getFirst . mconcat . map <span class="type">First</span> $ [<span class="type">Nothing</span>, <span class="type">Just</span> <span class="number">9</span>, <span class="type">Just</span> <span class="number">10</span>]  </span><br><span class="line"><span class="type">Just</span> <span class="number">9</span></span><br><span class="line"><span class="title">ghci</span>&gt; getLast . mconcat . map <span class="type">Last</span> $ [<span class="type">Nothing</span>, <span class="type">Just</span> <span class="number">9</span>, <span class="type">Just</span> <span class="number">10</span>]  </span><br><span class="line"><span class="type">Just</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><h4 id="Min-amp-Max"><a href="#Min-amp-Max" class="headerlink" title="Min &amp; Max"></a>Min &amp; Max</h4><p>对于有界的类型，也有两种实现Monoid的方式，每次二元操作都取最小或最大。<code>Data.Semigroup</code>模块中提供了两个包装其器：Min和Max：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">newtype</span> <span class="type">Min</span> a = <span class="type">Min</span> &#123; <span class="title">getMin</span> :: <span class="title">a</span> &#125; <span class="keyword">deriving</span> (...)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Ord</span> a =&gt; <span class="type">Semigroup</span> (<span class="type">Min</span> <span class="title">a</span>) <span class="keyword">where</span></span></span><br><span class="line">    (&lt;&gt;) = coerce (min :: a -&gt; a -&gt; a)</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> (<span class="type">Ord</span> <span class="title">a</span>, <span class="type">Bounded</span> <span class="title">a</span>) =&gt; <span class="type">Monoid</span> (<span class="type">Min</span> <span class="title">a</span>) <span class="keyword">where</span></span></span><br><span class="line">    mempty = maxBound</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">newtype</span> <span class="type">Max</span> a = <span class="type">Max</span> &#123; <span class="title">getMax</span> :: <span class="title">a</span> &#125; <span class="keyword">deriving</span> (...)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Ord</span> a =&gt; <span class="type">Semigroup</span> (<span class="type">Max</span> <span class="title">a</span>) <span class="keyword">where</span></span></span><br><span class="line">    (&lt;&gt;) = coerce (max :: a -&gt; a -&gt; a)</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> (<span class="type">Ord</span> <span class="title">a</span>, <span class="type">Bounded</span> <span class="title">a</span>) =&gt; <span class="type">Monoid</span> (<span class="type">Max</span> <span class="title">a</span>) <span class="keyword">where</span></span></span><br><span class="line">    mempty = minBound</span><br></pre></td></tr></table></figure><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; <span class="type">Min</span> <span class="number">3</span> &lt;&gt; <span class="type">Min</span> <span class="number">5</span></span><br><span class="line"><span class="type">Min</span> &#123;getMin = <span class="number">3</span>&#125;</span><br><span class="line"><span class="title">ghci</span>&gt; <span class="type">Max</span> <span class="number">3</span> &lt;&gt; <span class="type">Max</span> <span class="number">5</span></span><br><span class="line"><span class="type">Max</span> &#123;getMax = <span class="number">5</span>&#125;</span><br><span class="line"><span class="title">ghci</span>&gt; getMin . mconcat . map <span class="type">Min</span> $ [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] :: <span class="type">Int</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="title">ghci</span>&gt; getMax . mconcat . map <span class="type">Max</span> $ [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] :: <span class="type">Int</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h4><p>当元组内的所有元素都是幺半群时，整个元组也是一个幺半群：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> (<span class="type">Semigroup</span> <span class="title">a</span>, <span class="type">Semigroup</span> <span class="title">b</span>) =&gt; <span class="type">Semigroup</span> (<span class="title">a</span>, <span class="title">b</span>) <span class="keyword">where</span></span></span><br><span class="line">        (a,b) &lt;&gt; (a&#x27;,b&#x27;) = (a&lt;&gt;a&#x27;,b&lt;&gt;b&#x27;)</span><br><span class="line">        stimes n (a,b) = (stimes n a, stimes n b)</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> (<span class="type">Monoid</span> <span class="title">a</span>, <span class="type">Monoid</span> <span class="title">b</span>) =&gt; <span class="type">Monoid</span> (<span class="title">a</span>,<span class="title">b</span>) <span class="keyword">where</span></span></span><br><span class="line">        mempty = (mempty, mempty)</span><br></pre></td></tr></table></figure><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; mconcat $ map (\x -&gt; (<span class="type">Min</span> x, <span class="type">Max</span> x)) [<span class="number">1.</span><span class="number">.10</span>] :: (<span class="type">Min</span> <span class="type">Int</span>, <span class="type">Max</span> <span class="type">Int</span>)</span><br><span class="line">(<span class="type">Min</span> &#123;getMin = <span class="number">1</span>&#125;,<span class="type">Max</span> &#123;getMax = <span class="number">10</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="Monoid-Laws"><a href="#Monoid-Laws" class="headerlink" title="Monoid Laws"></a>Monoid Laws</h3><ul><li>mempty &lt;&gt; x <code>=</code> x</li><li>x &lt;&gt; mempty <code>=</code> x</li><li>(x &lt;&gt; y) &lt;&gt; z <code>=</code> x &lt;&gt; (y &lt;&gt; z)</li></ul><h2 id="Monoidal-classes"><a href="#Monoidal-classes" class="headerlink" title="Monoidal classes"></a>Monoidal classes</h2><p>Applicative、Monad、Arrow都有有幺半群性质的子类型类，分别是Alternative、MonadPlus、ArrowPlus</p><h3 id="Alternative"><a href="#Alternative" class="headerlink" title="Alternative"></a>Alternative</h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Applicative</span> f =&gt; <span class="type">Alternative</span> f <span class="keyword">where</span></span></span><br><span class="line">    <span class="comment">-- | The identity of &#x27;&lt;|&gt;&#x27;</span></span><br><span class="line">    empty :: f a</span><br><span class="line">    <span class="comment">-- | An associative binary operation</span></span><br><span class="line">    (&lt;|&gt;) :: f a -&gt; f a -&gt; f a</span><br><span class="line"></span><br><span class="line">    some :: f a -&gt; f [a]</span><br><span class="line">    some v = (:) &lt;$&gt; v &lt;*&gt; many v</span><br><span class="line">    many :: f a -&gt; f [a]</span><br><span class="line">    many v = some v &lt;|&gt; pure []</span><br></pre></td></tr></table></figure><p>其中empty是幺半群中的单位元素，&lt;|&gt;是幺半群中的二元运算符。some和many是两个函数（<del>意义还不懂</del>）</p><h4 id="Alternative实例"><a href="#Alternative实例" class="headerlink" title="Alternative实例"></a>Alternative实例</h4><h5 id><a href="#" class="headerlink" title="[]"></a>[]</h5><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Alternative</span> [] <span class="keyword">where</span></span></span><br><span class="line">    empty = []</span><br><span class="line">    (&lt;|&gt;) = (++)</span><br></pre></td></tr></table></figure><p>和Monoid一样，单位元素是空列表，二元运算是列表合并</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] &lt;|&gt; empty &lt;|&gt; [<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; some []</span><br><span class="line">[]</span><br><span class="line"><span class="title">ghci</span>&gt; many []</span><br><span class="line">[[]]</span><br></pre></td></tr></table></figure><h5 id="Maybe"><a href="#Maybe" class="headerlink" title="Maybe"></a>Maybe</h5><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Alternative</span> <span class="type">Maybe</span> <span class="keyword">where</span></span></span><br><span class="line">    empty = <span class="type">Nothing</span></span><br><span class="line">    <span class="type">Nothing</span> &lt;|&gt; r = r</span><br><span class="line">    l       &lt;|&gt; _ = l</span><br></pre></td></tr></table></figure><p>Maybe作为Alternative的单位元素是Nothing，二元运算是始终取左边（当左边不为Nothing时）</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; <span class="type">Nothing</span> &lt;|&gt; <span class="type">Just</span> <span class="number">1</span> &lt;|&gt; <span class="type">Just</span> <span class="number">2</span> </span><br><span class="line"><span class="type">Just</span> <span class="number">1</span> </span><br><span class="line"><span class="title">ghci</span>&gt; some <span class="type">Nothing</span></span><br><span class="line"><span class="type">Nothing</span> </span><br><span class="line"><span class="title">ghci</span>&gt; many <span class="type">Nothing</span> </span><br><span class="line"><span class="type">Just</span> []</span><br></pre></td></tr></table></figure><h5 id="ZipList"><a href="#ZipList" class="headerlink" title="ZipList"></a>ZipList</h5><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Alternative</span> <span class="type">ZipList</span> <span class="keyword">where</span></span></span><br><span class="line">   empty = <span class="type">ZipList</span> []</span><br><span class="line">   <span class="type">ZipList</span> xs &lt;|&gt; <span class="type">ZipList</span> ys = <span class="type">ZipList</span> (xs ++ drop (length xs) ys)</span><br></pre></td></tr></table></figure><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;&gt;getZipList $ <span class="type">ZipList</span> [<span class="number">1</span>,<span class="number">2</span>] &lt;|&gt; <span class="type">ZipList</span> [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">&lt;&gt;getZipList $ <span class="type">ZipList</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>] &lt;|&gt; <span class="type">ZipList</span> [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br></pre></td></tr></table></figure><h4 id="Alternative-Laws"><a href="#Alternative-Laws" class="headerlink" title="Alternative Laws"></a>Alternative Laws</h4><ul><li><code>Monoid laws</code>:  <figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">empty</span> &lt;|&gt; x = x </span><br><span class="line"><span class="title">x</span> &lt;|&gt; empty = x </span><br><span class="line">(x &lt;|&gt; y) &lt;|&gt; z = x &lt;|&gt; (y &lt;|&gt; z)</span><br></pre></td></tr></table></figure></li><li><code>Left zero law</code>：empty &lt;*&gt; f <code>=</code> empty<br>以上的定律是都满足都，下面的定律只有部分满足：</li><li><code>Right zero law</code>：f &lt;*&gt; empty <code>=</code> empty （大部分包括Maybe、[]满足，IO不满足）</li><li><code>Left distribution</code>：(a &lt;|&gt; b) &lt;*&gt; c <code>=</code> (a &lt;*&gt; c) &lt;|&gt; (b &lt;*&gt; c) （Maybe、[]满足，IO及大部分parsers不满足）</li><li><code>Right distribution</code>：a &lt;*&gt; (b &lt;|&gt; c) <code>=</code> (a &lt;*&gt; b) &lt;|&gt; (a &lt;*&gt; c) （大部分不满足，但Maybe满足）</li><li><code>Left catch</code>：(pure a) &lt;|&gt; x = pure a （Maybe、IO、parsers满足，但[]不满足）</li></ul><h4 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h4><ul><li><code>asum</code> :: (Foldable t, Alternative f) =&gt; t (f a) -&gt; f a，相当于foldr (&lt;|&gt;) empty：  <figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; asum [<span class="type">Nothing</span>, <span class="type">Just</span> <span class="number">5</span>, <span class="type">Just</span> <span class="number">3</span>]</span><br><span class="line"><span class="type">Just</span> <span class="number">5</span></span><br><span class="line"><span class="title">ghci</span>&gt; asum [[<span class="number">2</span>],[<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>]]</span><br><span class="line">[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br></pre></td></tr></table></figure></li><li><code>guard</code> :: (Alternative f) =&gt; Bool -&gt; f ()：  <figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">guard</span> <span class="type">True</span>  = pure ()</span><br><span class="line"><span class="title">guard</span> <span class="type">False</span> = empty </span><br></pre></td></tr></table></figure></li></ul><h3 id="MonadPlus"><a href="#MonadPlus" class="headerlink" title="MonadPlus"></a>MonadPlus</h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> (<span class="type">Alternative</span> <span class="title">m</span>, <span class="type">Monad</span> <span class="title">m</span>) =&gt; <span class="type">MonadPlus</span> m <span class="keyword">where</span></span></span><br><span class="line">   mzero :: m a</span><br><span class="line">   mzero = empty</span><br><span class="line"></span><br><span class="line">   mplus :: m a -&gt; m a -&gt; m a</span><br><span class="line">   mplus = (&lt;|&gt;)</span><br></pre></td></tr></table></figure><h4 id="MonadPlus实例"><a href="#MonadPlus实例" class="headerlink" title="MonadPlus实例"></a>MonadPlus实例</h4><p>[]、Maybe都是MonadPlus的实例，mzero和mplus都由Alternative实现</p><h4 id="MonadPlus-Laws"><a href="#MonadPlus-Laws" class="headerlink" title="MonadPlus Laws"></a>MonadPlus Laws</h4><ul><li><code>Monoid laws</code></li><li><code>Left zero</code>：mzero &gt;&gt;= f <code>=</code> mzero</li><li><code>Right zero</code>：m &gt;&gt; mzero <code>=</code> mzero </li></ul><h4 id="常用函数-1"><a href="#常用函数-1" class="headerlink" title="常用函数"></a>常用函数</h4><ul><li><code>msum</code> = asum </li><li><code>mfilter</code>：  <figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">mfilter</span> p ma = <span class="keyword">do</span></span><br><span class="line">    a &lt;- ma</span><br><span class="line">    <span class="keyword">if</span> p a <span class="keyword">then</span> return a <span class="keyword">else</span> mzero</span><br></pre></td></tr></table></figure></li></ul><h3 id="ArrowPlus"><a href="#ArrowPlus" class="headerlink" title="ArrowPlus"></a>ArrowPlus</h3><p>ArrowZero和ArrowPlus分别为Arrow设置了Monoid中的单位元素和二元运算符，使之成为了一个幺半群：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Arrow</span> arr =&gt; <span class="type">ArrowZero</span> arr <span class="keyword">where</span></span></span><br><span class="line">    zeroArrow :: b `arr` c</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">ArrowZero</span> arr =&gt; <span class="type">ArrowPlus</span> arr <span class="keyword">where</span></span></span><br><span class="line">    (&lt;+&gt;) :: (b `arr` c) -&gt; (b `arr` c) -&gt; (b `arr` c)</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://wiki.haskell.org/Typeclassopedia">Typeclassopedia - Haskell wiki</a></li><li><a href="https://blog.csdn.net/zwvista/article/details/54863519">Haskell语言学习笔记（8）Monoid - zwvista</a></li><li><a href="https://blog.csdn.net/zwvista/article/details/62238541">Haskell语言学习笔记（16）Alternative - zwvista</a></li></ul><hr><div style="text-align: center;"><p style="font-size: 1.3rem; font-weight: bold;">目录</p><p>#0&nbsp;|&nbsp;<a href="/p/b3ca5c18.html">总章</a>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;<br>#1&nbsp;|&nbsp;<a href="/p/d63b5b5f.html">基础语法与函数</a>&emsp;&emsp;&emsp;<br>#2&nbsp;|&nbsp;<a href="/p/53e482b7.html">高阶函数与模块</a>&emsp;&emsp;&emsp;<br>#3&nbsp;|&nbsp;<a href="/p/369b7e08.html">类型与类型类</a>&emsp;&emsp;&emsp;&emsp;<br>#4&nbsp;|&nbsp;<a href="/p/a5bbe48a.html">输入输出与文件</a>&emsp;&emsp;&emsp;<br>#5&nbsp;|&nbsp;<a href="/p/290ecb74.html">函子、应用函子与单子</a><br>#6&nbsp;|&nbsp;<a href="/p/d4bb2633.html">半群与幺半群</a>&emsp;&emsp;&emsp;&emsp;<br>#7&nbsp;|&nbsp;<a href="/p/68ef8146.html">一些其它类型类</a>&emsp;&emsp;&emsp;<br>#A&nbsp;|&nbsp;<a href="/p/96c32eae.html">Haskell与范畴论</a>&emsp;&nbsp;&thinsp;</p></div>]]></content>
    
    
    <summary type="html">&lt;div style=&quot;display: flex; justify-content: space-between;&quot;&gt;

&lt;p&gt;&lt;a href=&quot;/p/290ecb74.html&quot;&gt;&amp;lt; #5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/p/68ef8146.html&quot;&gt;#7 &amp;gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;


&lt;h2 id=&quot;Semigroup&quot;&gt;&lt;a href=&quot;#Semigroup&quot; class=&quot;headerlink&quot; title=&quot;Semigroup&quot;&gt;&lt;/a&gt;Semigroup&lt;/h2&gt;&lt;p&gt;半群（semigroup）是一个集合$S$，它需要指定一个二元运算符$\oplus$，并且满足&lt;/p&gt;
&lt;p&gt;$$&lt;br&gt;a\oplus b \in S\quad a, b\in S&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;以及结合（associative）律：&lt;/p&gt;
&lt;p&gt;$$&lt;br&gt;(a\oplus b)\oplus c = a\oplus (b\oplus c)&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;这个二元运算符在Haskell的Semigroup中被定义为&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;函数：&lt;/p&gt;</summary>
    
    
    
    
    <category term="Haskell" scheme="https://blog.tonycrane.cc/tags/Haskell/"/>
    
    <category term="笔记" scheme="https://blog.tonycrane.cc/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>「Learn Haskell」#5 函子、应用函子与单子</title>
    <link href="https://blog.tonycrane.cc/p/290ecb74.html"/>
    <id>https://blog.tonycrane.cc/p/290ecb74.html</id>
    <published>2021-07-09T07:12:39.000Z</published>
    <updated>2021-07-25T04:54:13.884Z</updated>
    
    <content type="html"><![CDATA[<div style="display: flex; justify-content: space-between;"><p><a href="/p/a5bbe48a.html">&lt; #4</a></p><p><a href="/p/d4bb2633.html">#6 &gt;</a></p></div><h2 id="Functors"><a href="#Functors" class="headerlink" title="Functors"></a>Functors</h2><p>函子（Functor）是一个类型类（typeclass），和其他类型类一样，它规定了其实例类必须实现的功能（例如Eq类型类规定了它的实例必须是可以比较是否相等的），Functor规定类它的实例必须是可以进行映射的。Functor要求使用<code>fmap</code> :: (a -&gt; b) -&gt; f a -&gt; f b 函数来实现这个功能，它接收一个a -&gt; b类型的函数、一个内部元素为a类型的函子，返回一个内部元素为b类型的函子</p><span id="more"></span><p>Functor可以比作盒子，那fmap函数就相当于给定一个函数和一个盒子，将盒子中的全部元素都应用这个函数，再返回应用函数后的盒子</p><p>函子的实例必须是一个Kind为* -&gt; *的类型构造器，因为它要求其是一个盒子，盒子在接收内容后才会成为一个具体的类型。fmap中的<code>f a</code>和<code>f b</code>也是因为<code>f</code>是一个类型构造器，在接收类型a/b后才会变成一个具体类型（f a和f b）出现在函数类型声明中</p><p>Functor的定义是:</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Functor</span> f <span class="keyword">where</span></span></span><br><span class="line">    fmap :: (a -&gt; b) -&gt; f a -&gt; f b</span><br><span class="line">    (&lt;$) :: a -&gt; f a -&gt; f b</span><br><span class="line">    (&lt;$) = fmap . const</span><br></pre></td></tr></table></figure><p>可以发现Functor不仅需要fmap函数，还需要一个&lt;$函数，它接收一个a类型的变量和一个内容为b类型的函子，返回一个内容为a类型的函子；作用就是将传入的函子中的所有元素都替换为传入的第一个参数，比如：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; &#x27;a&#x27; &lt;$ [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="string">&quot;aaa&quot;</span></span><br></pre></td></tr></table></figure><p>但它不是声明一个函子实例必须的，因为它可以使用fmap和const函数复合来实现，其中const的类型签名：</p><p style="text-align: center;">const :: a -> b -> a</p><p>即接收两个参数，但始终只返回第一个参数</p><h3 id="Functor实例"><a href="#Functor实例" class="headerlink" title="Functor实例"></a>Functor实例</h3><h4 id><a href="#" class="headerlink" title="[]"></a>[]</h4><p>列表[]是一个函子，它通过map函数来实现fmap的功能：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Functor</span> [] <span class="keyword">where</span></span></span><br><span class="line">    fmap = map</span><br></pre></td></tr></table></figure><p style="text-align: center;">map :: (a -> b) -> [a] -> [b]</p><p>map和fmap要求的相同，达成的目的也一致。map接收一个函数和一个列表，它会将列表中的所有元素都应用这个函数后再返回这个列表</p><h4 id="Maybe"><a href="#Maybe" class="headerlink" title="Maybe"></a>Maybe</h4><p>Maybe也具有kind * -&gt; *，它也是一个函子：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Functor</span> <span class="type">Maybe</span> <span class="keyword">where</span></span></span><br><span class="line">    fmap f <span class="type">Nothing</span> = <span class="type">Nothing</span></span><br><span class="line">    fmap f (<span class="type">Just</span> x) = <span class="type">Just</span> (f x)</span><br><span class="line"></span><br><span class="line"><span class="title">ghci</span>&gt; fmap (*<span class="number">2</span>) <span class="type">Nothing</span></span><br><span class="line"><span class="type">Nothing</span></span><br><span class="line"><span class="title">ghci</span>&gt; fmap (*<span class="number">2</span>) (<span class="type">Just</span> <span class="number">2</span>)</span><br><span class="line"><span class="type">Just</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><h4 id="Either-a"><a href="#Either-a" class="headerlink" title="Either a"></a>Either a</h4><p>Either的kind是* -&gt; * -&gt; *，显然它不是函子，但是固定了一个传入类型的Either a的kind是* -&gt; *，也是一个函子：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Functor</span> (<span class="type">Either</span> <span class="title">a</span>) <span class="keyword">where</span></span></span><br><span class="line">    fmap f (<span class="type">Left</span> x) = <span class="type">Left</span> x</span><br><span class="line">    fmap f (<span class="type">Right</span> x) = <span class="type">Right</span> (f x)</span><br><span class="line"></span><br><span class="line"><span class="title">ghci</span>&gt; fmap (*<span class="number">2</span>) (<span class="type">Left</span> <span class="number">4</span>)</span><br><span class="line"><span class="type">Left</span> <span class="number">4</span></span><br><span class="line"><span class="title">ghci</span>&gt; fmap (*<span class="number">2</span>) (<span class="type">Right</span> <span class="number">4</span>)</span><br><span class="line"><span class="type">Right</span> <span class="number">8</span></span><br></pre></td></tr></table></figure><p>因为使用Either时一般用右值表示正常结果，左值表示异常信息，所以使用fmap时只对右值进行操作，如果时左值则保持不变（而且左值此时也作为确定类型确定值存在）</p><h4 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h4><p>IO也是一个函子，使用fmap对IO中内容应用函数：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Functor</span> <span class="type">IO</span> <span class="keyword">where</span></span></span><br><span class="line">    fmap f action = <span class="keyword">do</span></span><br><span class="line">        result &lt;- action</span><br><span class="line">        return (f result)</span><br><span class="line"></span><br><span class="line"><span class="title">ghci</span>&gt; fmap (<span class="string">&quot;input: &quot;</span>++) getLine</span><br><span class="line"><span class="title">test</span></span><br><span class="line"><span class="string">&quot;input: test&quot;</span></span><br></pre></td></tr></table></figure><h4 id="a"><a href="#a" class="headerlink" title="(,) a"></a>(,) a</h4><p>(,)表示一个二元组的类型构造器，(,) :: * -&gt; * -&gt; *，而确定了第一个元素的类型后就变成了(,) a，它的kind是* -&gt; *。也是一个函子，进行fmap函数时只对第二个元素应用：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Functor</span> ((,) a) <span class="keyword">where</span></span></span><br><span class="line">    fmap f (x, y) = (x, f y)</span><br></pre></td></tr></table></figure><p>只剩一个元素的三元组和四元组也都是函子，fmap也只对最后一个元素应用：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Functor</span> ((,,) a b) <span class="keyword">where</span></span></span><br><span class="line">    fmap f (a, b, c) = (a, b, f c)</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Functor</span> ((,,,) a b c) <span class="keyword">where</span></span></span><br><span class="line">    fmap f (a, b, c, d) = (a, b, c, f d)</span><br></pre></td></tr></table></figure><h4 id="gt-r"><a href="#gt-r" class="headerlink" title="(-&gt;) r"></a>(-&gt;) r</h4><p>-&gt;也是一个类型构造器，它的kind：</p><p style="text-align: center;">(->) :: * -> * -> *</p><p>一个映射（一元函数）的类型a -&gt; b也可以写成(-&gt;) a b，它是由类型a和类型b输入到类型构造器-&gt;中后形成的一个具体类型。所以确定了输入类型后的一元函数的类型就是(-&gt;) r（其中<code>r</code>是输入的类型）</p><p>规定的fmap的类型签名是：</p><p style="text-align: center;">fmap :: (a -> b) -> f a -> f b</p><p>其中的f是函子，而在这个实例中(-&gt;) r就是函子，将其带入f可以得到：</p><p style="text-align: center;">fmap :: (a -> b) -> ((-> r) a) -> ((-> r) b)</p><p>把其中的(-&gt;)换成中缀可以得到：</p><p style="text-align: center;">fmap :: (a -> b) -> (r -> a) -> (r -> b)</p><p>传入两个函数，一个类型为a -&gt; b，一个类型为r -&gt; a，返回一个函数，类型为r -&gt; b。<br>不难推测这个fmap是将这两个函数复合了，先对输入对r应用第二个函数产生类型a的结果，然后在应用第一个函数产生类型b的结果，所以(-&gt;) r定义的fmap是：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Functor</span> ((-&gt;) r) <span class="keyword">where</span></span></span><br><span class="line">    fmap f g = (\x -&gt; f (g x))</span><br></pre></td></tr></table></figure><p>所以(-&gt;) r的fmap其实就是函数复合(.)：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Functor</span> ((-&gt;) r) <span class="keyword">where</span></span></span><br><span class="line">    fmap = (.)</span><br></pre></td></tr></table></figure><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; :t fmap (*<span class="number">3</span>) (+<span class="number">100</span>)  </span><br><span class="line"><span class="title">fmap</span> (*<span class="number">3</span>) (+<span class="number">100</span>) :: (<span class="type">Num</span> a) =&gt; a -&gt; a  </span><br><span class="line"><span class="title">ghci</span>&gt; fmap (*<span class="number">3</span>) (+<span class="number">100</span>) <span class="number">1</span>  </span><br><span class="line"><span class="number">303</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; (*<span class="number">3</span>) `fmap` (+<span class="number">100</span>) $ <span class="number">1</span>  </span><br><span class="line"><span class="number">303</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; (*<span class="number">3</span>) . (+<span class="number">100</span>) $ <span class="number">1</span>  </span><br><span class="line"><span class="number">303</span></span><br></pre></td></tr></table></figure><h3 id="Functor-Laws"><a href="#Functor-Laws" class="headerlink" title="Functor Laws"></a>Functor Laws</h3><p>所有的函子都应该满足两个定律。这两个定律不是Haskell强制要求的，但应该确保一个函子满足这两个定律：</p><ol><li><code>fmap id = id</code>（其中id为函数<code>(\x -&gt; x)</code>）：即对一个函子fmap id，那它应该返回本身（fmap id a = id a = a，a为一个函子），比如： <figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; fmap id [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; fmap id (<span class="type">Just</span> <span class="number">2</span>)</span><br><span class="line"><span class="type">Just</span> <span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><code>fmap (f . g) = fmap f . fmap g</code>：即函子的fmap支持结合律<br> fmap (f . g) a = fmap f . fmap g $ a = fmap f (fmap g a)，其中<code>a</code>为一个函子<br> fmap (f . g) (Just x) = fmap f (fmap g (Just x)) = fmap f (Just (g x)) = Just (f (g x)) <figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; fmap ((*<span class="number">3</span>) . (+<span class="number">100</span>)) (<span class="type">Just</span> <span class="number">1</span>)</span><br><span class="line"><span class="type">Just</span> <span class="number">303</span></span><br></pre></td></tr></table></figure></li></ol><p>满足第一个定律的函子一定满足第二个定律，所以只要检查函子是否满足第一个定律即可</p><h3 id="Intuition"><a href="#Intuition" class="headerlink" title="Intuition"></a>Intuition</h3><p>对于函子和fmap，有两种理解方法</p><ol><li>函子是一种容器（container）；fmap接收一个函数和一个容器，在容器内部应用这个函数，返回应用后的新容器</li><li>函子是一种计算上下文（context）；fmap是柯里化的，把其类型签名看作<p style="text-align: center;">fmap :: (a -> b) -> (f a -> f b)</p>接收一个函数返回另一个函数，传入函数g :: a -> b，fmap将其转换为新的函数<p style="text-align: center;">fmap g :: f a -> f b</p>使普通的函数g可以在计算上下文<code>f</code>中使用，这种转换也被称为提升（lift）</li></ol><h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><h4 id="lt-gt"><a href="#lt-gt" class="headerlink" title="&lt;$&gt;"></a>&lt;$&gt;</h4><p><code>&lt;$&gt;</code>函数是<code>fmap</code>的中缀形式（它看着类似<code>$</code>，<code>f $ 3</code>将f应用在单个值3上，而<code>f &lt;$&gt; [1, 2, 3]</code>将f应用在一个函子上，也就是应用在一个函子内部的所有值上）：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; fmap (*<span class="number">2</span>) (<span class="type">Just</span> <span class="number">2</span>)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="title">ghci</span>&gt; (*<span class="number">2</span>) &lt;$&gt; <span class="type">Just</span> <span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><h4 id="gt"><a href="#gt" class="headerlink" title="$&gt;"></a>$&gt;</h4><p><code>$&gt;</code>函数包含在<code>Data.Functor</code>模块中</p><p style="text-align: center;">($>) :: Functor f => f a -> b -> f b</p> <p>Functor定义时要求了<code>&lt;$</code>函数，将函子内部的元素全部替换为指定的某个值，而<code>$&gt;</code>正好将<code>&lt;$</code>函数的两个参数反了过来，相当于<code>flip (&lt;$)</code>：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; &#x27;a&#x27; &lt;$ [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="string">&quot;aaa&quot;</span></span><br><span class="line"><span class="title">ghci</span>&gt; [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] $&gt; &#x27;a&#x27;</span><br><span class="line"><span class="string">&quot;aaa&quot;</span></span><br></pre></td></tr></table></figure><h4 id="void"><a href="#void" class="headerlink" title="void"></a>void</h4><p><code>void</code>函数也包含在<code>Data.Functor</code>模块中</p><p style="text-align: center;">void :: Functor f => f a -> f ()</p><p>void函数把一个函子内部的全部元素都变成空（<code>()</code>），<code>void x</code>相当于<code>() &lt;$ x</code>：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; void [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">[(), (), ()]</span><br><span class="line"><span class="title">ghci</span>&gt; void (<span class="type">Just</span> <span class="number">2</span>)</span><br><span class="line"><span class="type">Just</span> ()</span><br></pre></td></tr></table></figure><h2 id="Applicative-Functor"><a href="#Applicative-Functor" class="headerlink" title="Applicative Functor"></a>Applicative Functor</h2><p>应用函子（Applicative Functor）是函子的升级版，它包含在<code>Control.Applicative</code>模块中。</p><p>fmap进行的操作是将一个普通一元函数应用在一个函子内部。而如果要将一个包含函数的函子应用在另一个函子上，fmap就处理不了了，但是应用函子的方法可以处理。应用函子的定义：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Functor</span> f =&gt; <span class="type">Applicative</span> f <span class="keyword">where</span></span></span><br><span class="line">    pure :: a -&gt; f a</span><br><span class="line">    (&lt;*&gt;) :: f (a -&gt; b) -&gt; f a -&gt; f b</span><br></pre></td></tr></table></figure><p>应用函子要求实现两个函数：</p><ul><li><code>pure</code> :: a -&gt; f a，不难理解，pure接收一个值，并将其放在默认的上下文/容器中。对于列表，pure = []；对于Maybe，pure = Just</li><li><code>&lt;*&gt;</code> :: f (a -&gt; b) -&gt; f a -&gt; f b，类似于fmap :: (a -&gt; b) -&gt; f a -&gt; f b，但不同的是&lt;*&gt;的第一个参数的类型是f (a -&gt; b)不是a -&gt; b。所以&lt;*&gt;的第一个参数是在上下文中的函数，而不是一个普通函数。换句话说，&lt;*&gt;接收一个装有函数的函子和另一个函子，应用函数后返回新的函子。</li></ul><h3 id="Applicative-Functor实例"><a href="#Applicative-Functor实例" class="headerlink" title="Applicative Functor实例"></a>Applicative Functor实例</h3><h4 id="Maybe-1"><a href="#Maybe-1" class="headerlink" title="Maybe"></a>Maybe</h4><p>Maybe是一个应用函子：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Applicative</span> <span class="type">Maybe</span> <span class="keyword">where</span></span></span><br><span class="line">    pure = <span class="type">Just</span></span><br><span class="line">    <span class="type">Nothing</span> &lt;*&gt; _ = <span class="type">Nothing</span></span><br><span class="line">    (<span class="type">Just</span> f) &lt;*&gt; something = fmap f something</span><br></pre></td></tr></table></figure><ul><li><code>pure</code>函数：将一个值放在默认的上下文中，而对于Maybe，默认的上下文就是Just，所以pure x = Just x</li><li><code>&lt;*&gt;</code>函数：将装有函数的函子中的函数应用另一个函子中<ul><li>第一个参数是Nothing，即第一个函子不包含函数，那返回的结果就也会是Nothing</li><li>第一个参数是装有函数f的函子Just f，将其中的函数f应用在函子something中，只需要将f提取出来使用fmap应用在函子something中即可</li></ul></li></ul><p>实际应用的例子：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; <span class="type">Just</span> (+<span class="number">3</span>) &lt;*&gt; <span class="type">Just</span> <span class="number">9</span></span><br><span class="line"><span class="type">Just</span> <span class="number">12</span></span><br><span class="line"><span class="title">ghci</span>&gt; pure (+<span class="number">3</span>) &lt;*&gt; <span class="type">Just</span> <span class="number">9</span></span><br><span class="line"><span class="type">Just</span> <span class="number">12</span></span><br><span class="line"><span class="title">ghci</span>&gt; (+<span class="number">3</span>) &lt;$&gt; <span class="type">Just</span> <span class="number">9</span></span><br><span class="line"><span class="type">Just</span> <span class="number">12</span></span><br><span class="line"><span class="title">ghci</span>&gt; <span class="type">Nothing</span> &lt;*&gt; <span class="type">Just</span> <span class="number">9</span></span><br><span class="line"><span class="type">Nothing</span></span><br></pre></td></tr></table></figure><p>第一个例子，Just (+3)是一个包含函数(+3)的函子，将其应用在函子Just 9中，将Just (+3)中的函数(+3)提取出来，应用在Just 9中，得到了Just 12</p><p>第二个例子，可以发现，在这里pure (+3)和Just (+3)等效，因为pure将函数(+3)放在默认上下文中，也就是Just中了</p><p>而&lt;*&gt;能做的不止这些，他可以连续传入更多函子作为参数，比如：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; pure (+) &lt;*&gt; <span class="type">Just</span> <span class="number">3</span> &lt;*&gt; <span class="type">Just</span> <span class="number">9</span></span><br><span class="line"><span class="type">Just</span> <span class="number">12</span></span><br><span class="line"><span class="title">ghci</span>&gt; pure (\x y z -&gt; x + y + z) &lt;*&gt; <span class="type">Just</span> <span class="number">3</span> &lt;*&gt; <span class="type">Just</span> <span class="number">4</span> &lt;*&gt; <span class="type">Just</span> <span class="number">5</span></span><br><span class="line"><span class="type">Just</span> <span class="number">12</span></span><br></pre></td></tr></table></figure><p>&lt;*&gt;函数一样是默认左结合的，pure (+) &lt;*&gt; Just 3 &lt;*&gt; Just 9相当于(pure (+) &lt;*&gt; Just 3) &lt;*&gt; Just 9，而pure (+) &lt;*&gt; Just 3将(+)应用在Just 3上，得到的就是Just (+3)一个包含函数的函子，又将其通过&lt;*&gt;应用在了Just 9上，得到了Just 12:</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  pure (\x y z -&gt; x + y + z) &lt;*&gt; <span class="type">Just</span> <span class="number">3</span> &lt;*&gt; <span class="type">Just</span> <span class="number">4</span> &lt;*&gt; <span class="type">Just</span> <span class="number">5</span></span><br><span class="line">= (pure (\x y z -&gt; x + y + z) &lt;*&gt; <span class="type">Just</span> <span class="number">3</span>) &lt;*&gt; <span class="type">Just</span> <span class="number">4</span> &lt;*&gt; <span class="type">Just</span> <span class="number">5</span></span><br><span class="line">= (<span class="type">Just</span> (\y z -&gt; <span class="number">3</span> + y + z) &lt;*&gt; <span class="type">Just</span> <span class="number">4</span>) &lt;*&gt; <span class="type">Just</span> <span class="number">5</span></span><br><span class="line">= <span class="type">Just</span> (\z -&gt; <span class="number">3</span> + <span class="number">4</span> + z) &lt;*&gt; <span class="type">Just</span> <span class="number">5</span> = <span class="type">Just</span> (+<span class="number">7</span>) &lt;*&gt; <span class="type">Just</span> <span class="number">5</span></span><br><span class="line">= <span class="type">Just</span> <span class="number">12</span></span><br></pre></td></tr></table></figure><p>所以可以使用类似pure f &lt;*&gt; x &lt;*&gt; y &lt;*&gt; …来将一个普通多元函数f应用在多个函子上。</p><p>而且pure f &lt;*&gt; x实际上先将普通函数f放在上下文中，然后执行&lt;*&gt;时再将其提取出来执行fmap，所以它就相当于将普通函数应用在函子x上，即fmap f x，也可以写成f &lt;$&gt; x。所以常用的写法就是：</p><p style="text-align: center;">f <$> x <*> y <*> ...</*></*></$></p><h4 id="-1"><a href="#-1" class="headerlink" title="[]"></a>[]</h4><p>列表也是一个应用函子：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Applicative</span> [] <span class="keyword">where</span></span></span><br><span class="line">    pure x = [x]</span><br><span class="line">    fs &lt;*&gt; xs = [f x | f &lt;- fs, x &lt;- xs]</span><br></pre></td></tr></table></figure><ul><li><code>pure</code>函数：对于列表而言，一个值的最小上下文就是只包含这个值的列表[x]</li><li><code>&lt;*&gt;</code>函数：列表的&lt;*&gt;函数是通过列表推导来实现的。因为不同于Maybe的Just只包含一个值，列表可以包含很多值，第一个传入的列表中可能会包含很多函数，第二个传入的列表也会包含很多值，所以就需要先从第一个列表中取出一个函数然后依次应用在第二个列表的每个值中，再取出第一个列表中的第二个函数应用在第二个列表的每个值中……最终返回得到的所有结果的列表</li></ul><p>使用例子：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; [(+<span class="number">3</span>), (*<span class="number">2</span>)] &lt;*&gt; [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">[<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">4</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; [(+), (*)]  &lt;*&gt;  [<span class="number">1</span>, <span class="number">2</span>]  &lt;*&gt;  [<span class="number">3</span>, <span class="number">4</span>]  </span><br><span class="line">[<span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br></pre></td></tr></table></figure><h4 id="IO-1"><a href="#IO-1" class="headerlink" title="IO"></a>IO</h4><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Applicative</span> <span class="type">IO</span> <span class="keyword">where</span></span></span><br><span class="line">    pure = return</span><br><span class="line">    a &lt;*&gt; b = <span class="keyword">do</span></span><br><span class="line">        f &lt;- a</span><br><span class="line">        x &lt;- b</span><br><span class="line">        return (f x)</span><br></pre></td></tr></table></figure><p>也不难理解，pure函数直接将传入的值return，相当于放在了IO的上下文中。而&lt;*&gt;函数先将两个IO中内容提取出来，然后应用函数后return，形成新的IO函子</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; (++) &lt;$&gt; getLine &lt;*&gt; getLine</span><br><span class="line"><span class="type">Line1</span></span><br><span class="line"><span class="type">Line2</span></span><br><span class="line"><span class="string">&quot;Line1Line2&quot;</span></span><br></pre></td></tr></table></figure><h4 id="gt-r-1"><a href="#gt-r-1" class="headerlink" title="(-&gt;) r"></a>(-&gt;) r</h4><p>(-&gt;) r同样也是一个应用函子，和函子的分析一样，先来分析它的&lt;*&gt;函数的类型签名：</p><p style="text-align: center;"><*> :: f (a -> b) -> f a -> f b</*></p><p>其中f为(-&gt;) r，将其代入并替换为中缀：</p><p style="text-align: center;"><*> :: (r -> a -> b) -> (r -> a) -> (r -> b)</*></p><p>可以看出它接收两个函数f :: r -&gt; a -&gt; b、g :: r -&gt; a，返回另一个函数h :: (r -&gt; b)</p><p>那么返回的函数的输入为r，输出为b，所以先对输入应用函数g得到a，然后在对r和a应用f得到b，所以推测&lt;*&gt;函数的操作就是：</p><p style="text-align: center;">\x -> f x (g x)</p><p>于是：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Applicative</span> ((-&gt;) r) <span class="keyword">where</span></span></span><br><span class="line">    pure x = (\_ -&gt; x)</span><br><span class="line">    f &lt;*&gt; g = \x -&gt; f x (g x)</span><br></pre></td></tr></table></figure><p>将一个值放在函数的上下文中，最小上下文就应该返回这个值本身，所以pure函数定义为(_ -&gt; x)，即无论输入什么，都返回x</p><p>应用函子的&lt;*&gt;函数接收两个函子，返回一个新的函子。对于(-&gt;) r，它接收两个函数，返回一个新的函数。具体例子：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; (+) &lt;$&gt; (+<span class="number">3</span>) &lt;*&gt; (*<span class="number">100</span>) $ <span class="number">5</span></span><br><span class="line"><span class="number">508</span></span><br></pre></td></tr></table></figure><p>执行这句时发生了什么？：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  (+) &lt;$&gt; (+<span class="number">3</span>) &lt;*&gt; (*<span class="number">100</span>) $ <span class="number">5</span></span><br><span class="line">= ((+) &lt;$&gt; (+<span class="number">3</span>)) &lt;*&gt; (*<span class="number">100</span>) $ <span class="number">5</span></span><br><span class="line">= ((+) . (+<span class="number">3</span>)) &lt;*&gt; (*<span class="number">100</span>) $ <span class="number">5</span> = (\a -&gt; (+) ((+<span class="number">3</span>) a)) &lt;*&gt; (*<span class="number">100</span>) $ <span class="number">5</span></span><br><span class="line">= (\a b -&gt; (a + <span class="number">3</span> + b)) &lt;*&gt; (*<span class="number">100</span>) $ <span class="number">5</span></span><br><span class="line">= (\x -&gt; x + <span class="number">3</span> + ((*<span class="number">100</span>) x)) $ <span class="number">5</span></span><br><span class="line">= (\x -&gt; x + <span class="number">3</span> + x * <span class="number">100</span>) $ <span class="number">5</span></span><br><span class="line">= <span class="number">5</span> + <span class="number">3</span> + <span class="number">5</span> * <span class="number">100</span> = <span class="number">508</span></span><br><span class="line">= (<span class="number">5</span> + <span class="number">3</span>) + (<span class="number">5</span> * <span class="number">100</span>)</span><br></pre></td></tr></table></figure><p>所以就相当于先对输入分别执行(+3)和(*100)，然后将两个结果执行了(+)</p><p>同样：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; (\x y z -&gt; [x,y,z]) &lt;$&gt; (+<span class="number">3</span>) &lt;*&gt; (*<span class="number">2</span>) &lt;*&gt; (/<span class="number">2</span>) $ <span class="number">5</span>  </span><br><span class="line">[<span class="number">8.0</span>,<span class="number">10.0</span>,<span class="number">2.5</span>]  </span><br></pre></td></tr></table></figure><p>先对5分别执行(+3)、(*2)、(/2)，然后将得到的三个结果传入(\x y z -&gt; [x,y,z])得到了最终的结果</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  f &lt;$&gt; g &lt;*&gt; h &lt;*&gt; i</span><br><span class="line">= (\x -&gt; f (g x) (h x) (i x))</span><br></pre></td></tr></table></figure><h4 id="ZipList"><a href="#ZipList" class="headerlink" title="ZipList"></a>ZipList</h4><p>普通列表实现的&lt;*&gt;函数是将每个函数应用在所有值上，但还有一种实现方法是将每个函数应用在对应值上，因为同一个类型不能存在同一函数的两种实现形式，所以引入了一个新的列表ZipList，包含在<code>Control.Applicative</code>模块中</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Applicative</span> <span class="type">ZipList</span> <span class="keyword">where</span></span></span><br><span class="line">    pure x = <span class="type">ZipList</span> (repeat x)</span><br><span class="line">    <span class="type">ZipList</span> fs &lt;*&gt; <span class="type">ZipList</span> xs = <span class="type">ZipList</span> (zipWith ($) fs xs)</span><br></pre></td></tr></table></figure><p>但是ZipList并不是Show的实例，所以不能直接显示出来，要使用<code>getZipList</code>来获取它内部的列表：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; getZipList $ (+) &lt;$&gt; <span class="type">ZipList</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] &lt;*&gt; <span class="type">ZipList</span> [<span class="number">100</span>,<span class="number">100.</span>.]  </span><br><span class="line">[<span class="number">101</span>,<span class="number">102</span>,<span class="number">103</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; getZipList $ (,,) &lt;$&gt; <span class="type">ZipList</span> <span class="string">&quot;dog&quot;</span> &lt;*&gt; <span class="type">ZipList</span> <span class="string">&quot;cat&quot;</span> &lt;*&gt; <span class="type">ZipList</span> <span class="string">&quot;rat&quot;</span>  </span><br><span class="line">[(&#x27;d&#x27;,&#x27;c&#x27;,&#x27;r&#x27;),(&#x27;o&#x27;,&#x27;a&#x27;,&#x27;a&#x27;),(&#x27;g&#x27;,&#x27;t&#x27;,&#x27;t&#x27;)]  </span><br></pre></td></tr></table></figure><h3 id="Applicative-Functor-Laws"><a href="#Applicative-Functor-Laws" class="headerlink" title="Applicative Functor Laws"></a>Applicative Functor Laws</h3><p>应用函子一般有四个定律，都是保证pure的正确性的：</p><ol><li><code>Identity law</code>：pure id &lt;*&gt; v = v</li><li><code>Homomorphism</code>：pure f &lt;*&gt; pure x = pure (f x)</li><li><code>Interchange</code>：u &lt;*&gt; pure v = pure ($ v) &lt;*&gt; u</li><li><code>Composition</code>：u &lt;*&gt; (v &lt;*&gt; w) = pure (.) &lt;*&gt; u &lt;*&gt; v &lt;*&gt; w</li></ol><h3 id="Intuition-1"><a href="#Intuition-1" class="headerlink" title="Intuition"></a>Intuition</h3><p>理解应用函子的方式也是将其看作是计算上下文（context），比如要计算：<br>$$<br>[[\ \ g\ x_1\ x_2\ \cdots\ x_n\ \ ]]<br>$$</p><p>其中$x_i$的类型是$f\ t_i$，$f$是应用函子（看作上下文）。而函数$g$的类型是：</p><p>$$<br>t_1\to t_2\to\cdots\to t_n\to t<br>$$</p><p>所以双括号（idiom brackets）的作用是将一个普通函数应用在包含在上下文中的参数上。$g\ x_1$可以通过fmap来执行，将$g$提升（lift）到$x_1$的上下文中，然后应用在$x_1$上。但是fmap返回的结果是一个函子，换句话说，$g\ x_1$结果的类型是：</p><p>$$<br>f\ \ (t_2\to t_3\to\cdots\to t_n\to t)<br>$$</p><p>但是fmap并不能将上下文中的函数应用在上下文中的参数上，于是应用函子的&lt;*&gt;函数提供了这个方法，所以计算$[[\ g\ x_1\ x_2\ \cdots\ x_n\ ]]$，只需要：</p><p style="text-align: center;">g <$> x1 <*> x2 <*> ... <*> xn</*></*></*></$></p><p>而pure函数的作用就是将一个不在上下文中的值（函数或参数）提升到上下文中，但不进行其他操作。比如参数$x_2$如果不在上下文中，需要用pure提升到上下文中才能按上面计算：</p><p style="text-align: center;">g <$> x1 <*> pure x2 <*> ... <*> xn</*></*></*></$></p><h3 id="常用函数-1"><a href="#常用函数-1" class="headerlink" title="常用函数"></a>常用函数</h3><h4 id="liftA-amp-liftA2-amp-liftA3"><a href="#liftA-amp-liftA2-amp-liftA3" class="headerlink" title="liftA &amp; liftA2 &amp; liftA3"></a>liftA &amp; liftA2 &amp; liftA3</h4><p style="text-align: center;">liftA :: Applicative f => (a -> b) -> f a -> f b</p><p style="text-align: center;">liftA2 :: Applicative f => (a -> b -> c) -> f a -> f b -> f c</p><p style="text-align: center;">liftA3 :: Applicative f => (a -> b -> c -> d) -> f a -> f b -> f c -> f d</p><p>不难推测liftA就是fmap，<code>liftA2 f x1 x2</code>相当于<code>f &lt;$&gt; x1 &lt;*&gt; x2</code>，<code>liftA3 f x1 x2 x3</code>相当于<code>f &lt;$&gt; x1 &lt;*&gt; x2 &lt;*&gt; x3</code></p><h4 id="lt-amp-gt"><a href="#lt-amp-gt" class="headerlink" title="&lt;* &amp; *&gt;"></a>&lt;* &amp; *&gt;</h4><p>类型类似函子的<code>&lt;$</code>和<code>$&gt;</code>：</p><p style="text-align: center;">(&lt;*) :: Applicative f => f a -> f b -> f a</p><p style="text-align: center;">(*>) :: Applicative f => f a -> f b -> f b</p><p>&lt;*接收两个函子，如果两个函子中又一个为空，就返回空，否则返回的类型与第一个函子相同。*&gt;反过来</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; <span class="type">Just</span> <span class="number">3</span> &lt;* <span class="type">Just</span> <span class="number">4</span></span><br><span class="line"><span class="type">Just</span> <span class="number">3</span></span><br><span class="line"><span class="title">ghci</span>&gt; <span class="type">Just</span> <span class="number">3</span> *&gt; <span class="type">Just</span> <span class="number">4</span></span><br><span class="line"><span class="type">Just</span> <span class="number">4</span></span><br><span class="line"><span class="title">ghci</span>&gt; <span class="type">Nothing</span> &lt;* <span class="type">Just</span> <span class="number">3</span></span><br><span class="line"><span class="type">Nothing</span></span><br><span class="line"><span class="title">ghci</span>&gt; <span class="type">Nothing</span> *&gt; <span class="type">Just</span> <span class="number">3</span></span><br><span class="line"><span class="type">Nothing</span></span><br><span class="line"><span class="title">ghci</span>&gt; [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] &lt;* [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] *&gt; [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">[<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; [] &lt;* [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">[]</span><br><span class="line"><span class="title">ghci</span>&gt; [] *&gt; [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">[]</span><br></pre></td></tr></table></figure><h4 id="lt-gt-1"><a href="#lt-gt-1" class="headerlink" title="&lt;**&gt;"></a>&lt;**&gt;</h4><p style="text-align: center;">(**) :: Applicative f => f a -> f (a -> b) -> f b</p><p>接收的参数是&lt;*&gt;反转过来的，即先接收一个参数函子，然后接收一个函数函子，在将其应用返回。但是和flip(&lt;*&gt;)不同，它先取参数函子的每个参数，然后再取函数函子中的函数逐个应用：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; [(+<span class="number">1</span>), (+<span class="number">2</span>), (+<span class="number">3</span>)] &lt;*&gt; [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">[<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; [<span class="number">1</span>, <span class="number">2</span>] &lt;**&gt; [(+<span class="number">1</span>), (+<span class="number">2</span>), (+<span class="number">3</span>)]</span><br><span class="line">[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; flip(&lt;*&gt;) [<span class="number">1</span>, <span class="number">2</span>] [(+<span class="number">1</span>), (+<span class="number">2</span>), (+<span class="number">3</span>)]</span><br><span class="line">[<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br></pre></td></tr></table></figure><h4 id="when-amp-unless"><a href="#when-amp-unless" class="headerlink" title="when &amp; unless"></a>when &amp; unless</h4><p style="text-align: center;">when :: Applicative f => Bool -> f () -> f ()</p><p>传入的第一个是一个结果为Bool类型的测试，如果测试为True，则调用第二个参数，否则返回pure ()。（when函数在上文IO操作中使用过）</p><p>unless则与when相反，测试为True返回pure ()</p><h4 id="sequenceA"><a href="#sequenceA" class="headerlink" title="sequenceA"></a>sequenceA</h4><p style="text-align: center;">sequenceA :: (Traversable t, Applicative f) => t (f a) -> f (t a)</p><p>应用在列表上时，它的类型相当于：</p><p style="text-align: center;">[f a] -> f [a]</p><p>所以在列表上它的使用方法：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; sequenceA [<span class="type">Just</span> <span class="number">3</span>, <span class="type">Just</span> <span class="number">2</span>, <span class="type">Just</span> <span class="number">1</span>]  </span><br><span class="line"><span class="type">Just</span> [<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]  </span><br><span class="line"><span class="title">ghci</span>&gt; sequenceA [<span class="type">Just</span> <span class="number">3</span>, <span class="type">Nothing</span>, <span class="type">Just</span> <span class="number">1</span>]  </span><br><span class="line"><span class="type">Nothing</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; sequenceA [(+<span class="number">3</span>),(+<span class="number">2</span>),(+<span class="number">1</span>)] <span class="number">3</span>  </span><br><span class="line">[<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>]  </span><br><span class="line"><span class="title">ghci</span>&gt; sequenceA [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]]  </span><br><span class="line">[[<span class="number">1</span>,<span class="number">4</span>],[<span class="number">1</span>,<span class="number">5</span>],[<span class="number">1</span>,<span class="number">6</span>],[<span class="number">2</span>,<span class="number">4</span>],[<span class="number">2</span>,<span class="number">5</span>],[<span class="number">2</span>,<span class="number">6</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">3</span>,<span class="number">5</span>],[<span class="number">3</span>,<span class="number">6</span>]]  </span><br><span class="line"><span class="title">ghci</span>&gt; sequenceA [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>],[]]  </span><br><span class="line">[]  </span><br></pre></td></tr></table></figure><p>它在对同一个参数应用不同函数时很有用：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; map (\f -&gt; f <span class="number">7</span>) [(&gt;<span class="number">4</span>), (&lt;<span class="number">10</span>), odd]  </span><br><span class="line">[<span class="type">True</span>,<span class="type">True</span>,<span class="type">True</span>]  </span><br><span class="line"><span class="title">ghci</span>&gt; sequenceA [(&gt;<span class="number">4</span>), (&lt;<span class="number">10</span>), odd] <span class="number">7</span>  </span><br><span class="line">[<span class="type">True</span>,<span class="type">True</span>,<span class="type">True</span>]  </span><br></pre></td></tr></table></figure><h2 id="Monad"><a href="#Monad" class="headerlink" title="Monad"></a>Monad</h2><p>单子（Monad）是对Applicative Functor的扩展（但是诞生比Applicative早），Functor的<code>&lt;$&gt;</code>函数实现了将普通函数应用在上下文值上，Applicative的<code>&lt;*&gt;</code>函数将上下文中函数应用在上下文值上。而Monad提供了一个函数<code>&gt;&gt;=</code>（bind），将一个接收普通值返回上下文值的函数应用在上下文值上：</p><!--more--><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Applicative</span> m =&gt; <span class="type">Monad</span> m <span class="keyword">where</span></span></span><br><span class="line">    (&gt;&gt;=) :: m a -&gt; (a -&gt; m b) -&gt; m b</span><br><span class="line">    (&gt;&gt;) :: m a -&gt; m b -&gt; m b</span><br><span class="line">    return :: a -&gt; m a</span><br><span class="line">    m &gt;&gt; n = m &gt;&gt;= \_ -&gt; n</span><br><span class="line">    return = pure</span><br></pre></td></tr></table></figure><ul><li><code>return</code>函数：和<code>pure</code>一样，只是有另一个名字</li><li><code>&gt;&gt;</code>函数：提供了默认的实现方法，它的作用和Applicative的*&gt;函数一样</li><li><code>&gt;&gt;=</code>函数（bind）：比Applicative升级的函数，第一个参数是一个单子，第二个参数是一个接收值返回单子的函数，将这个函数应用在第一个参数单子中的值上，并返回得到的新单子</li></ul><h3 id="Monad实例"><a href="#Monad实例" class="headerlink" title="Monad实例"></a>Monad实例</h3><h4 id="Maybe-2"><a href="#Maybe-2" class="headerlink" title="Maybe"></a>Maybe</h4><p>Maybe是一个单子实例，Applicative已经为它实现了return，因此只需要&gt;&gt;=函数：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Monad</span> <span class="type">Maybe</span> <span class="keyword">where</span></span></span><br><span class="line">    (<span class="type">Just</span> x) &gt;&gt;= f = f x </span><br><span class="line">    <span class="type">Nothing</span>  &gt;&gt;= _ = <span class="type">Nothing</span></span><br></pre></td></tr></table></figure><p>根据定义就很容易实现Maybe的&gt;&gt;=函数了，而且也很好理解</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; <span class="type">Just</span> <span class="number">1</span> &gt;&gt;= \x -&gt; <span class="type">Just</span> (x + <span class="number">1</span>)</span><br><span class="line"><span class="type">Just</span> <span class="number">2</span></span><br><span class="line"><span class="title">ghci</span>&gt; <span class="type">Just</span> <span class="number">1</span> &gt;&gt;= \x -&gt; return (x + <span class="number">1</span>)</span><br><span class="line"><span class="type">Just</span> <span class="number">2</span></span><br><span class="line"><span class="title">ghci</span>&gt; <span class="type">Nothing</span> &gt;&gt;= \x -&gt; <span class="type">Just</span> (x + <span class="number">1</span>)</span><br><span class="line"><span class="type">Nothing</span></span><br><span class="line"><span class="title">ghci</span>&gt; <span class="type">Just</span> <span class="number">1</span> &gt;&gt;= \x -&gt; <span class="type">Just</span> (x + <span class="number">1</span>) &gt;&gt; <span class="type">Nothing</span> &gt;&gt;= \y -&gt; <span class="type">Just</span> (y + <span class="number">1</span>)</span><br><span class="line"><span class="type">Nothing</span></span><br></pre></td></tr></table></figure><p>最后一个例子中出现了&gt;&gt; Nothing，这时Nothing前的部分全都相当于没用，因为&gt;&gt;操作符的左右两边只要有一个出现Nothing，那整体就会是Nothing。这个特性可以用于在中途随时判断失误，只要有一处失误，结果就会是Nothing</p><h4 id="-2"><a href="#-2" class="headerlink" title="[]"></a>[]</h4><p>列表也是一个单子：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Monad</span> [] <span class="keyword">where</span></span></span><br><span class="line">    xs &gt;&gt;= f = concat (map f xs)</span><br></pre></td></tr></table></figure><p>将这个函数应用在xs的每个值上，将返回的所有列表平铺成一个列表：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>] &gt;&gt;= \x -&gt; [x,-x]  </span><br><span class="line">[<span class="number">3</span>,<span class="number">-3</span>,<span class="number">4</span>,<span class="number">-4</span>,<span class="number">5</span>,<span class="number">-5</span>]  </span><br><span class="line"><span class="title">ghci</span>&gt; [<span class="number">1</span>,<span class="number">2</span>] &gt;&gt;= \n -&gt; [&#x27;a&#x27;,&#x27;b&#x27;] &gt;&gt;= \ch -&gt; return (n,ch)  </span><br><span class="line">[(<span class="number">1</span>,&#x27;a&#x27;),(<span class="number">1</span>,&#x27;b&#x27;),(<span class="number">2</span>,&#x27;a&#x27;),(<span class="number">2</span>,&#x27;b&#x27;)]  </span><br></pre></td></tr></table></figure><h4 id="IO-2"><a href="#IO-2" class="headerlink" title="IO"></a>IO</h4><p>IO也是一个单子，但是实现方法比较深奥（逃</p><h4 id="gt-r-2"><a href="#gt-r-2" class="headerlink" title="(-&gt;) r"></a>(-&gt;) r</h4><p>(-&gt;) r也是一个单子，和Functor、Applicative一样，先分析它的&gt;&gt;=类型签名：</p><p style="text-align: center;">(>>=) :: (-> r) a -> (a -> (-> r) b) -> (-> r) b</p><p style="text-align: center;">(>>=) :: (r -> a) -> (a -> r -> b) -> (r -> b)</p><p>也可以看出来，它接收两个函数f :: r -&gt; a、g :: a -&gt; r -&gt; b，然后返回一个新的函数h :: r -&gt; b</p><p>那么函数h接收一个类型为r的参数，返回一个类型为b的值。所以先对输入应用f得到类型为a的中间值，然后再将这个值和输入参数一起传入函数g得到结果。所以函数h的定义应该是：</p><p style="text-align: center;">\x -> g (f x) x</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Monad</span> ((-&gt;) r) <span class="keyword">where</span></span></span><br><span class="line">    f &gt;&gt;= g = \x -&gt; g (f x) x</span><br></pre></td></tr></table></figure><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; (+<span class="number">3</span>) &gt;&gt;= (+) $ <span class="number">1</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="title">ghci</span>&gt; (+) &lt;$&gt; (+<span class="number">3</span>) &lt;*&gt; id $ <span class="number">1</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><h3 id="do-notation"><a href="#do-notation" class="headerlink" title="do-notation"></a>do-notation</h3><p>Haskell的do语句为链式的&gt;&gt;=应用提供了类似命令式（imperative style）的语法糖。比如<code>a &gt;&gt;= \x -&gt; b &gt;&gt; c &gt;&gt;= \y -&gt; d</code>：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">a</span> &gt;&gt;= \x -&gt;</span><br><span class="line"><span class="title">b</span> &gt;&gt;</span><br><span class="line"><span class="title">c</span> &gt;&gt;= \y -&gt;</span><br><span class="line"><span class="title">d</span></span><br></pre></td></tr></table></figure><p>其中有abcd四个值，可以看出a中内容绑定到了x上，c中内容绑定到了y上。使用do语句来表示这个操作可以写成：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">do</span> &#123; x &lt;- a </span><br><span class="line">   ;      b </span><br><span class="line">   ; y &lt;- c </span><br><span class="line">   ;      d </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>其中的大括号和分号可以省略不写（挤在一行时不能省略）。do语句也只是一个语法糖，它可以递归地转换成普通的Monad操作语句：</p><ul><li><code>do e</code>：e</li><li><code>do &#123; e; ... &#125;</code>：e &gt;&gt; do { … }</li><li><code>do &#123; v &lt;- e; ... &#125;</code>：e &gt;&gt;= \v -&gt; do { … }</li><li><code>do &#123; let ...; ... &#125;</code>：let … in do { … }</li></ul><h4 id="ApplicativeDo"><a href="#ApplicativeDo" class="headerlink" title="ApplicativeDo"></a>ApplicativeDo</h4><p>比如如下一个do语句：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">do</span> x &lt;- a </span><br><span class="line">   y &lt;- b </span><br><span class="line">   z &lt;- c </span><br><span class="line">   return (f x y z)</span><br></pre></td></tr></table></figure><p>它可以转化成：</p><p style="text-align: center;">a >>= \x -> b >>= \y -> c >>= \z -> return (f x y z)</p><p>但是经过观察可以发现，整个语句实际上将函数f应用在了三个上下文中的值上，所以仅用Applicative的&lt;$&gt;和&lt;*&gt;完全可以实现：</p><p style="text-align: center;">f <$> a <*> b <*> c</*></*></$></p><p>而且在运行的时候Applicative的效率会比Monad高，所以Haskell会将do语句尽可能优先转换为Applicative的表示方法然后再计算</p><h3 id="Monad-Laws"><a href="#Monad-Laws" class="headerlink" title="Monad Laws"></a>Monad Laws</h3><ol><li><code>Left identity</code>： return a &gt;&gt;= k      <code>=</code> k a</li><li><code>Right identity</code>：m        &gt;&gt;= return <code>=</code> m</li><li><code>Associativity</code>：(m &gt;&gt;= g) &gt;&gt;= h      <code>=</code> m &gt;&gt;= (\x -&gt; g x &gt;&gt;= h)</li></ol><p>前两个定律很好理解：</p><ul><li>将a注入上下文之后绑定（bind）给函数k(:: a -&gt; m a)，相当于直接将a直接传入函数k</li><li>将已经包含在上下文中的值绑定给return函数，相当于保持不变</li></ul><p>第三个定律是结合律，把它写成更像结合律的表示方法是：</p><p style="text-align: center;">(m >>= (\x -> g x)) >>= h <code>=</code> m >>= (\x -> g x >>= h)</p><h4 id="组合运算符（-gt-gt-）形式"><a href="#组合运算符（-gt-gt-）形式" class="headerlink" title="组合运算符（&gt;=&gt;）形式"></a>组合运算符（&gt;=&gt;）形式</h4><p><code>Control.Monad</code>模块中还定义了函数<code>&gt;=&gt;</code>（Kleisli-composition operator）：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">infixr</span> <span class="number">1</span> &gt;=&gt;</span><br><span class="line">(&gt;=&gt;) :: <span class="type">Monad</span> m =&gt; (a -&gt; m b) -&gt; (b -&gt; m c) -&gt; (a -&gt; m c)</span><br><span class="line"><span class="title">f</span> &gt;=&gt; g = \x -&gt; f x &gt;&gt;= g</span><br></pre></td></tr></table></figure><p>使用&gt;=&gt;运算符可以将两个用于绑定的函数结合在一起。用它表示的Monad定律更加清晰直观：</p><ol><li><code>Left identity</code>：return &gt;=&gt; f <code>=</code> f</li><li><code>Right identity</code>：f &gt;=&gt; return <code>=</code> f</li><li><code>Associativity</code>：(f &gt;=&gt; g) &gt;=&gt; h <code>=</code> f &gt;=&gt; (g &gt;=&gt; h)</li></ol><h4 id="do-notation形式"><a href="#do-notation形式" class="headerlink" title="do-notation形式"></a>do-notation形式</h4><p>Monad的这三个定律还可以使用do语句来描述：</p><ol><li><code>Left identity</code>： <figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">do</span> &#123; x&#x27; &lt;- return x;</span><br><span class="line">     f x&#x27;             =   <span class="keyword">do</span> &#123; f x &#125; </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><code>Right identity</code>： <figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">do</span> &#123; x &lt;- m; </span><br><span class="line">     return x         =   <span class="keyword">do</span> &#123; m &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><code>Associativity</code>： <figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">do</span> &#123; y &lt;- <span class="keyword">do</span> &#123; x &lt;- m;       <span class="keyword">do</span> &#123; x &lt;- m;              <span class="keyword">do</span> &#123; x &lt;- m;</span><br><span class="line">               f x                <span class="keyword">do</span> &#123; y &lt;- f x;            y &lt;- f x;</span><br><span class="line">             &#125;           =             g y         =        g y</span><br><span class="line">     g y                             &#125;                    &#125;</span><br><span class="line">   &#125;                            &#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="Intuition-2"><a href="#Intuition-2" class="headerlink" title="Intuition"></a>Intuition</h3><p>Monad也可以很自然地看成Applicative的升级版，比如Applicative的操作全部是固定的，而Monad的操作可以在中途突然改变</p><p>同时Monad也完成了Functor和Applicative无法完成的操作。比如要用fmap和实现&gt;&gt;=函数（即达成操作 m a -&gt; (a -&gt; m b) -&gt; m b），先假设 f :: a -&gt; m b，那么fmap f的类型就会是 m a -&gt; m (m b)，将m a应用在fmap f上会得到结果m (m b)，而不是m b。但是目前只可以使用pure将一个值装入上下文中（a -&gt; m a），而没有一个函数可以从上下文中提取值（m a -&gt; a）。那么就需要定义一个新的函数来实现这个操作的效果（m (m b) -&gt; m b）。因此Monad的另一个等效的定义方法是：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Applicative</span> m =&gt; <span class="type">Monad&#x27;</span> m <span class="keyword">where</span></span></span><br><span class="line">    join :: m (m a) -&gt; m a </span><br><span class="line">    </span><br><span class="line">    (&gt;&gt;=) :: m a -&gt; (a -&gt; m b) -&gt; m b </span><br><span class="line">    x &gt;&gt;= f = join $ fmap f x</span><br></pre></td></tr></table></figure><p>但是定义&gt;&gt;=函数会更为直观方便，所以Haskell采用了用&gt;&gt;=函数定义Monad的方法</p><p>同时Haskell还提供了join函数的定义：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">join</span> :: <span class="type">Monad</span> m =&gt; m (m a) -&gt; m a </span><br><span class="line"><span class="title">join</span> x = x &gt;&gt;= id</span><br></pre></td></tr></table></figure><h3 id="常用函数-2"><a href="#常用函数-2" class="headerlink" title="常用函数"></a>常用函数</h3><h4 id="liftM-amp-ap"><a href="#liftM-amp-ap" class="headerlink" title="liftM &amp; ap"></a>liftM &amp; ap</h4><p style="text-align: center;">liftM :: Monad m => (a -> b) -> m a -> m b</p><p style="text-align: center;">ap :: Monad m => m (a -> b) -> m a -> m b</p><p>所以liftM其实就是fmap、ap就是&lt;*&gt;，但是老版本的GHC定义Monad并没有Functor、Applicative的约束，所以实现了liftM、ap，并且保留了这个名字</p><p>因此一个单子也可以通过<code>pure = return</code>、<code>(&lt;*&gt;) = ap</code>直接成为应用函子的实例</p><h4 id="sequence"><a href="#sequence" class="headerlink" title="sequence"></a>sequence</h4><p style="text-align: center;">sequence :: Monad m => [m a] -> m [a]</p><p>sequence的作用显而易见，而且在IO部分也使用到了。但是这个版本是在<code>GHC.Base</code>模块中定义的，还有一个更广泛的使用Traversable的定义在<code>Data.Traversable</code>模块中 </p><h4 id="replicateM"><a href="#replicateM" class="headerlink" title="replicateM"></a>replicateM</h4><p style="text-align: center;">replicateM :: Applicative m => Int -> m a -> m [a]</p><h4 id="mapM-amp-forM"><a href="#mapM-amp-forM" class="headerlink" title="mapM &amp; forM"></a>mapM &amp; forM</h4><p style="text-align: center;">mapM :: Monad m => (a -> m b) -> [a] -> m [b]</p><p style="text-align: center;">forM :: Monad m => [a] -> (a -> m b) -> m [b]</p><p>forM的用法在IO部分已经说过，mapM和forM都在<code>Data.Traversable</code>模块中有广泛版本</p><p>还有一些其他的函数：filterM、zipWithM、foldM、forever，通过名字就可以看出用法，是将原来仅使用与列表的函数提升至可以适用于所有单子</p><p>并且在函数名后加下划线，比如sequence_、mapM_，会忽略返回值（最终结果为<code>m ()</code>）</p><h4 id="lt-lt-amp-gt-gt-amp-lt-lt"><a href="#lt-lt-amp-gt-gt-amp-lt-lt" class="headerlink" title="=&lt;&lt; &amp; &gt;=&gt; &amp; &lt;=&lt;"></a>=&lt;&lt; &amp; &gt;=&gt; &amp; &lt;=&lt;</h4><p>（<code>&gt;=&gt;</code>操作符在上面<a href="#%E7%BB%84%E5%90%88%E8%BF%90%E7%AE%97%E7%AC%A6%EF%BC%88-gt-gt-%EF%BC%89%E5%BD%A2%E5%BC%8F">Monad Laws</a>部分已经给出了定义）</p><ul><li>x &gt;&gt;= f <code>=</code> f =&lt;&lt; x </li><li>f &gt;=&gt; g <code>=</code> g &lt;=&lt; f </li></ul><h2 id="MonadFail"><a href="#MonadFail" class="headerlink" title="MonadFail"></a>MonadFail</h2><p>MonadFail定义在<code>Control.Monad.Fail</code>模块中：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Monad</span> m =&gt; <span class="type">MonadFail</span> m <span class="keyword">where</span></span></span><br><span class="line">    fail :: <span class="type">String</span> -&gt; m a </span><br></pre></td></tr></table></figure><p>它只要求在Monad的基础上实现fail函数，接收一个字符串返回一个单子。这会使在do语句中产生错误时直接变为错误值（空值）使最终的返回值为错误值</p><h3 id="MonadFail实例"><a href="#MonadFail实例" class="headerlink" title="MonadFail实例"></a>MonadFail实例</h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">MonadFail</span> <span class="type">Maybe</span> <span class="keyword">where</span></span></span><br><span class="line">    fail _ = <span class="type">Nothing</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">MonadFail</span> [] <span class="keyword">where</span></span></span><br><span class="line">    fail _ = []</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">MonadFail</span> <span class="type">IO</span> <span class="keyword">where</span></span></span><br><span class="line">    fail = failIO</span><br></pre></td></tr></table></figure><p>Maybe和[]的fail函数都与第一个参数无关，直接返回空值（Nothing、[]）；而IO的fail函数直接使用failIO，实现方法也是深奥（接着逃</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">exampleFail</span> :: <span class="type">Maybe</span> <span class="type">Char</span> </span><br><span class="line"><span class="title">exampleFail</span> = <span class="keyword">do</span></span><br><span class="line">    (x:xs) &lt;- <span class="type">Just</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    return x </span><br><span class="line"></span><br><span class="line"><span class="title">ghci</span>&gt; exampleFail</span><br><span class="line"><span class="type">Nothing</span></span><br></pre></td></tr></table></figure><p>在这个例子的do语句中，在提取Just “”中的值时用了模式匹配，但是因为其内容为空字符串，x:xs匹配会出现错误，这时就会触发fail函数直接返回Nothing</p><h3 id="MonadFail-Law"><a href="#MonadFail-Law" class="headerlink" title="MonadFail Law"></a>MonadFail Law</h3><ul><li>fail s &gt;&gt;= m <code>=</code> fail s </li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="http://learnyouahaskell.com/chapters">Learn You a Haskell</a></li><li><a href="https://wiki.haskell.org/Typeclassopedia">Typeclassopedia - Haskell wiki</a></li><li><a href="https://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html">Functors, Applicatives, And Monads In Pictures</a></li><li><a href="http://02s949.coding-pages.com/2018/08/15/haskellc/">Haskell学习 - functor</a></li></ul><hr><div style="text-align: center;"><p style="font-size: 1.3rem; font-weight: bold;">目录</p><p>#0&nbsp;|&nbsp;<a href="/p/b3ca5c18.html">总章</a>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;<br>#1&nbsp;|&nbsp;<a href="/p/d63b5b5f.html">基础语法与函数</a>&emsp;&emsp;&emsp;<br>#2&nbsp;|&nbsp;<a href="/p/53e482b7.html">高阶函数与模块</a>&emsp;&emsp;&emsp;<br>#3&nbsp;|&nbsp;<a href="/p/369b7e08.html">类型与类型类</a>&emsp;&emsp;&emsp;&emsp;<br>#4&nbsp;|&nbsp;<a href="/p/a5bbe48a.html">输入输出与文件</a>&emsp;&emsp;&emsp;<br>#5&nbsp;|&nbsp;<a href="/p/290ecb74.html">函子、应用函子与单子</a><br>#6&nbsp;|&nbsp;<a href="/p/d4bb2633.html">半群与幺半群</a>&emsp;&emsp;&emsp;&emsp;<br>#7&nbsp;|&nbsp;<a href="/p/68ef8146.html">一些其它类型类</a>&emsp;&emsp;&emsp;<br>#A&nbsp;|&nbsp;<a href="/p/96c32eae.html">Haskell与范畴论</a>&emsp;&nbsp;&thinsp;</p></div>]]></content>
    
    
    <summary type="html">&lt;div style=&quot;display: flex; justify-content: space-between;&quot;&gt;

&lt;p&gt;&lt;a href=&quot;/p/a5bbe48a.html&quot;&gt;&amp;lt; #4&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/p/d4bb2633.html&quot;&gt;#6 &amp;gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;Functors&quot;&gt;&lt;a href=&quot;#Functors&quot; class=&quot;headerlink&quot; title=&quot;Functors&quot;&gt;&lt;/a&gt;Functors&lt;/h2&gt;&lt;p&gt;函子（Functor）是一个类型类（typeclass），和其他类型类一样，它规定了其实例类必须实现的功能（例如Eq类型类规定了它的实例必须是可以比较是否相等的），Functor规定类它的实例必须是可以进行映射的。Functor要求使用&lt;code&gt;fmap&lt;/code&gt; :: (a -&amp;gt; b) -&amp;gt; f a -&amp;gt; f b 函数来实现这个功能，它接收一个a -&amp;gt; b类型的函数、一个内部元素为a类型的函子，返回一个内部元素为b类型的函子&lt;/p&gt;</summary>
    
    
    
    
    <category term="Haskell" scheme="https://blog.tonycrane.cc/tags/Haskell/"/>
    
    <category term="笔记" scheme="https://blog.tonycrane.cc/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>「Learn Haskell」#4 输入输出与文件</title>
    <link href="https://blog.tonycrane.cc/p/a5bbe48a.html"/>
    <id>https://blog.tonycrane.cc/p/a5bbe48a.html</id>
    <published>2021-07-07T08:10:07.000Z</published>
    <updated>2021-07-25T04:51:38.659Z</updated>
    
    <content type="html"><![CDATA[<div style="display: flex; justify-content: space-between;"><p><a href="/p/369b7e08.html">&lt; #3</a></p><p><a href="/p/290ecb74.html">#5 &gt;</a></p></div><h2 id="Input-Output"><a href="#Input-Output" class="headerlink" title="Input/Output"></a>Input/Output</h2><h3 id="运行Haskell程序"><a href="#运行Haskell程序" class="headerlink" title="运行Haskell程序"></a>运行Haskell程序</h3><p>不在GHCi中运行一个Haskell程序有两种方式：</p><span id="more"></span><ol><li>编译运行： <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ghc --make code</span><br><span class="line">$ ./code</span><br></pre></td></tr></table></figure></li><li>通过<code>runhaskell</code>命令直接运行： <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ runhaskell code.hs</span><br></pre></td></tr></table></figure></li></ol><h3 id="输出文本"><a href="#输出文本" class="headerlink" title="输出文本"></a>输出文本</h3><p>在一个Haskell程序中输出文字需要定义一个main函数：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">main</span> = putStrLn <span class="string">&quot;Hello World&quot;</span></span><br></pre></td></tr></table></figure><p>其中putStrLn的类型是：</p><p style="text-align: center;">putStrLn :: String -> IO ()</p><p>putStrLn接收一个String类型，并返回一个结果为()类型的IO动作（I/O action）。所以main函数的类型为IO ()。（IO的Kind是* -&gt; *）</p><p>除此之外，还有其他默认提供的输出文本的函数：</p><ul><li><code>putStr</code>：输出文本，结尾不换行</li><li><code>putChar</code>：输出单个字符，结尾不换行。接收的参数为单个Char，不是String（用单引号不是双引号）</li><li><code>print</code>：可以接收任何Show的成员，先用show转化为字符串然后输出。等同于putStrLn . show</li></ul><h4 id="do-block"><a href="#do-block" class="headerlink" title="do block"></a>do block</h4><p>在main函数中使用多个putStrLn需要使用do语句：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">main</span> = <span class="keyword">do</span></span><br><span class="line">    putStrLn <span class="string">&quot;Line1&quot;</span></span><br><span class="line">    putStrLn <span class="string">&quot;Line2&quot;</span></span><br></pre></td></tr></table></figure><p>其中最后一行一定要返回IO ()类型的值</p><h3 id="输入文本"><a href="#输入文本" class="headerlink" title="输入文本"></a>输入文本</h3><p>输入文字需要在do块中使用getLine：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">main</span> = <span class="keyword">do</span></span><br><span class="line">    line &lt;- getLine</span><br><span class="line">    putStrLn line</span><br></pre></td></tr></table></figure><p>getLine的类型是：</p><p style="text-align: center;">getLine :: IO String</p><p>而&lt;-操作符将getLine中的String提取了出来给到了line，使line变成了String类型的一个字符串。</p><p>而且使用输入的字符串必须要经过一次&lt;-，不能直接使用getLine作为字符串，因为getLine不是String类型，而是IO String类型。</p><p>除此之外，还可以使用getChar来获取单个字符，但仍然需要使用&lt;-操作符来提取Char</p><h3 id="其他IO相关函数用法"><a href="#其他IO相关函数用法" class="headerlink" title="其他IO相关函数用法"></a>其他IO相关函数用法</h3><h4 id="return"><a href="#return" class="headerlink" title="return"></a>return</h4><p>Haskell中的return和其他命令式语言中的return完全不同，它不会使函数直接结束并返回一个值。</p><p>main函数必须定义为类型为IO ()的函数，所以在main函数中使用if语句，如果不输出的话也不可以直接放下什么都不干，因为这时候main函数的类型不是IO ()。所以这时需要使用return ()来为main函数指定为IO ()类型，例如：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">main</span> = <span class="keyword">do</span> </span><br><span class="line">    line &lt;- getLine</span><br><span class="line">    <span class="keyword">if</span> null line</span><br><span class="line">        <span class="keyword">then</span> return () <span class="comment">-- &lt;-这里</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">do</span></span><br><span class="line">            ...</span><br></pre></td></tr></table></figure><p>使用&lt;-操作符也可以直接将return语句中的内容提取出来，比如a &lt;- return ‘A’，执行后a就是’A’。</p><h4 id="when"><a href="#when" class="headerlink" title="when"></a>when</h4><p>when包含在<code>Control.Monad</code>模块中，它表示在满足第一个参数的条件下会执行第二个函数，否则会return ()。比如：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Control.Monad   </span><br><span class="line">  </span><br><span class="line"><span class="title">main</span> = <span class="keyword">do</span>  </span><br><span class="line">    c &lt;- getChar  </span><br><span class="line">    when (c /= &#x27; &#x27;) $ <span class="keyword">do</span>  </span><br><span class="line">        putChar c  </span><br><span class="line">        main  </span><br></pre></td></tr></table></figure><p>等同于：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">main</span> = <span class="keyword">do</span>     </span><br><span class="line">    c &lt;- getChar  </span><br><span class="line">    <span class="keyword">if</span> c /= &#x27; &#x27;  </span><br><span class="line">        <span class="keyword">then</span> <span class="keyword">do</span>  </span><br><span class="line">            putChar c  </span><br><span class="line">            main  </span><br><span class="line">        <span class="keyword">else</span> return () </span><br></pre></td></tr></table></figure><h4 id="sequence"><a href="#sequence" class="headerlink" title="sequence"></a>sequence</h4><p>sequence在IO中使用时可以达成[IO a] -&gt; IO [a]的效果，所以可以用作：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[a, b, c] &lt;- sequence [getLine, getLine, getLine]</span><br></pre></td></tr></table></figure><h4 id="mapM-amp-mapM"><a href="#mapM-amp-mapM" class="headerlink" title="mapM &amp; mapM_"></a>mapM &amp; mapM_</h4><p>在IO相关的地方使用map，可以使用mapM和mapM_，其中mapM有返回值而mapM_直接扔掉了返回值：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; mapM print [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]  </span><br><span class="line"><span class="number">1</span>  </span><br><span class="line"><span class="number">2</span>  </span><br><span class="line"><span class="number">3</span>  </span><br><span class="line">[(),(),()]  </span><br><span class="line"><span class="title">ghci</span>&gt; mapM_ print [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]  </span><br><span class="line"><span class="number">1</span>  </span><br><span class="line"><span class="number">2</span>  </span><br><span class="line"><span class="number">3</span>  </span><br></pre></td></tr></table></figure><h4 id="forever"><a href="#forever" class="headerlink" title="forever"></a>forever</h4><p>forever函数包含在<code>Control.Monad</code>模块中。在main函数开头加上forever函数可以使后面的do块一直重复执行直到程序被迫终止，如：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Control.Monad</span><br><span class="line">  </span><br><span class="line"><span class="title">main</span> = forever $ <span class="keyword">do</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h4 id="forM"><a href="#forM" class="headerlink" title="forM"></a>forM</h4><p>forM函数包含在<code>Control.Monad</code>模块中，它的功能和mapM类似，从第一个参数中逐个取出元素传入第二个参数（一个接收一个参数的函数）中，并且第二个参数可以返回IO a类型。比如：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Control.Monad</span><br><span class="line"></span><br><span class="line"><span class="title">main</span> = <span class="keyword">do</span> </span><br><span class="line">    colors &lt;- forM [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>] (\a -&gt; <span class="keyword">do</span></span><br><span class="line">        putStrLn $ <span class="string">&quot;Which color do you associate with the number &quot;</span> ++ show a ++ <span class="string">&quot;?&quot;</span>  </span><br><span class="line">        color &lt;- getLine  </span><br><span class="line">        return color)</span><br><span class="line">    putStrLn <span class="string">&quot;The colors that you associate with 1, 2, 3 and 4 are: &quot;</span>  </span><br><span class="line">    mapM putStrLn colors</span><br></pre></td></tr></table></figure><h4 id="getContents"><a href="#getContents" class="headerlink" title="getContents"></a>getContents</h4><p>getLine获取一整行，而getContents从标准输入中获取全部内容直到遇到EOF，并且它是lazy的，在执行了foo &lt;- getContents后，它并不会读取标准输入并且赋值到foo，而是等到需要使用foo的时候再从标准输入读取。</p><p>getContents在使用管道传入文字时很常用，可以代替forever+getLine使用，比如一个Haskell程序文件code.hs：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Data.Char  </span><br><span class="line">  </span><br><span class="line"><span class="title">main</span> = <span class="keyword">do</span>  </span><br><span class="line">    contents &lt;- getContents  </span><br><span class="line">    putStr (map toUpper contents)  </span><br></pre></td></tr></table></figure><p>使用ghc –make code编译后，通过管道传入文字：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat text.txt | ./code</span><br></pre></td></tr></table></figure><p>会将text.txt中的所有字母转为大写并输出</p><h4 id="interact"><a href="#interact" class="headerlink" title="interact"></a>interact</h4><p>上述功能还可以转化为一个String -&gt; String的函数：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">upperStrings</span> = unlines . map (map toUpper) . lines</span><br></pre></td></tr></table></figure><p>而在main中使用这个函数就需要：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">main</span> = <span class="keyword">do</span></span><br><span class="line">    contents &lt;- getContents</span><br><span class="line">    putStr (upperStrings contents)</span><br></pre></td></tr></table></figure><p>但是String -&gt; String类型的函数在输入输出中的使用太常见了，所以可以使用interact函数来简化。interact的类型是：</p><p style="text-align: center;">interact :: (String -> String) -> IO ()</p><p>可以看出它接收一个String -&gt; String的函数，并返回一个IO ()类型，所以可以直接用在main上。</p><p>于是整个转换为大写的程序就可以简化为：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">main</span> = interact $ unlines . map (map toUpper) . lines</span><br></pre></td></tr></table></figure><h2 id="文件和流"><a href="#文件和流" class="headerlink" title="文件和流"></a>文件和流</h2><p>以下与文件和流相关的函数都包含在<code>System.IO</code>模块中</p><h3 id="openFile"><a href="#openFile" class="headerlink" title="openFile"></a>openFile</h3><p>openFile函数可以用来打开一个文件，它的类型是：</p><p style="text-align: center;">openFile :: FilePath -> IOMode -> IO Handle</p><p>其中<code>FilePath</code>是String的type synonyms，用一个字符串来表示需要打开的文件的路径</p><p><code>IOMode</code>的定义是：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">IOMode</span> = <span class="type">ReadMode</span> | <span class="type">WriteMode</span> | <span class="type">AppendMode</span> | <span class="type">ReadWriteMode</span></span></span><br></pre></td></tr></table></figure><p>所以它一共只有四个值，用来表示进行IO操作的模式</p><p>openFile返回一个IO Handle类型的值，将其用&lt;-操作符提取后会出现一个Handle的值。但不能从Handle中直接使用文字，还需要使用一系列函数：</p><ul><li><code>hGetContents</code> :: Handle -&gt; IO String ，从Handle中读取全部内容，返回一个IO String</li><li><code>hGetChar</code> :: Handle -&gt; IO Char ，从Handle中读取一个字符</li><li><code>hGetLine</code> :: Handle -&gt; IO String ，从Handle中读取一行，返回一个IO String</li><li><code>hPutStr</code> :: Handle -&gt; String -&gt; IO () ，向Handle中输出字符串</li><li><code>hPutStrLn</code> :: Handle -&gt; String -&gt; IO () ，同上</li></ul><p>在使用openFile进行文件操作后，需要使用hClose手动关闭Handle。hClose :: Handle -&gt; IO ()，接收一个Handle并返回IO ()，可以直接放在main函数末尾</p><p>所以使用openFile读取一个文件中的全部内容并输出的全部代码是：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> System.IO</span><br><span class="line"></span><br><span class="line"><span class="title">main</span> = <span class="keyword">do</span></span><br><span class="line">    handle &lt;- openFile <span class="string">&quot;text.txt&quot;</span> <span class="type">ReadMode</span></span><br><span class="line">    contents &lt;- hGetContents handle</span><br><span class="line">    putStrLn contents</span><br><span class="line">    hClose handle</span><br></pre></td></tr></table></figure><h3 id="withFile"><a href="#withFile" class="headerlink" title="withFile"></a>withFile</h3><p>withFile类似Python中的with open，它在读取文件使用之后不需要手动close文件。它的类型是：</p><p style="text-align: center;">withFile :: FilePath -> IOMode -> (Handle -> IO a) -> IO a</p><p>可以看出，它接收三个参数：</p><ul><li><code>FilePath</code>：一个表示文件路径的String</li><li><code>IOMode</code>：打开文件的模式</li><li><code>(Handle -&gt; IO a)</code>：一个函数，表示对读取文件后的Handle索要进行的操作，需要返回一个I/O action；而这个返回值也将作为withFile的返回值</li></ul><p>现在使用withFile来改写上述代码：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> System.IO</span><br><span class="line"></span><br><span class="line"><span class="title">main</span> = withFile <span class="string">&quot;text.txt&quot;</span> <span class="type">ReadMode</span> (\handle -&gt; <span class="keyword">do</span></span><br><span class="line">    contents &lt;- hGetContents handle</span><br><span class="line">    putStrLn contents)</span><br></pre></td></tr></table></figure><p>withFile的功能相当于以下函数：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">withFile&#x27;</span> :: <span class="type">FilePath</span> -&gt; <span class="type">IOMode</span> -&gt; (<span class="type">Handle</span> -&gt; <span class="type">IO</span> a) -&gt; <span class="type">IO</span> a  </span><br><span class="line"><span class="title">withFile&#x27;</span> path mode f = <span class="keyword">do</span>  </span><br><span class="line">    handle &lt;- openFile path mode   </span><br><span class="line">    result &lt;- f handle  </span><br><span class="line">    hClose handle  </span><br><span class="line">    return result  </span><br></pre></td></tr></table></figure><h3 id="readFile"><a href="#readFile" class="headerlink" title="readFile"></a>readFile</h3><p>readFile可以更加简化读取文件内容的操作，它的类型：</p><p style="text-align: center;">readFile :: FilePath -> IO String</p><p>它只需要输入一个表示文件路径的字符串，返回其中以其中内容为内容的I/O action：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> System.IO</span><br><span class="line"></span><br><span class="line"><span class="title">main</span> = <span class="keyword">do</span></span><br><span class="line">    contents &lt;- readFile <span class="string">&quot;text.txt&quot;</span></span><br><span class="line">    putStrLn contents</span><br></pre></td></tr></table></figure><h3 id="writeFile"><a href="#writeFile" class="headerlink" title="writeFile"></a>writeFile</h3><p>writeFile简化了写入文件的操作，它的类型：</p><p style="text-align: center;">writeFile :: FilePath -> String -> IO ()</p><p>传入的第一个参数是要写入的文件的路径，第二个参数是要写入的字符串，返回一个IO ()</p><h3 id="appendFile"><a href="#appendFile" class="headerlink" title="appendFile"></a>appendFile</h3><p>appendFile类似writeFile，但使用它不会覆盖文件中原来内容，而是直接把字符串添加到文件末尾</p><h3 id="buffer"><a href="#buffer" class="headerlink" title="buffer"></a>buffer</h3><p>文件以流的形式被读取，默认文字文件的缓冲区（buffer）大小是一行，即每次读取一行内容；默认二进制文件的缓冲区大小是以块为单位，如果没有指定则根据系统默认来选择。</p><p>也可以通过<code>hSetBuffering</code>函数来手动设置缓冲区大小，这个函数的类型：</p><p style="text-align: center;">hSetBuffering :: Handle -> BufferMode -> IO ()</p><p>它接收一个handle，和一个BufferMode，并返回IO ()。其中BufferMode有以下几种：</p><ul><li><code>NoBuffering</code>：没有缓冲区，一次读入一个字符</li><li><code>LineBuffering</code>：缓冲区大小是一行，即每次读入一行内容</li><li><code>BlockBuffering (Maybe Int)</code>：缓冲区大小是一块，块的大小由Maybe Int指定：<ul><li><code>BlockBuffering (Nothing)</code>：使用系统默认的块大小</li><li><code>BlockBuffering (Just 2048)</code>：一块的大小是2048字节，即每次读入2048bytes的内容</li></ul></li></ul><p>缓冲区的刷新是自动的，也可以通过<code>hFlush</code>来手动刷新</p><p style="text-align: center;">hFlush :: Handle -> IO ()</p><p>传入一个handle，返回IO ()，即刷新对应handle的缓冲区</p><h3 id="openTempFile"><a href="#openTempFile" class="headerlink" title="openTempFile"></a>openTempFile</h3><p>openTempFile可以新建一个临时文件：</p><p style="text-align: center;">openTempFile :: FilePath -> String -> IO (FilePath, Handle)</p><p><code>FilePath</code>指临时文件要创建的位置路径，<code>String</code>指临时文件名字的前缀，返回一个I/O action，其内容第一个<code>FilePath</code>是创建得到的临时文件的路径，<code>Handle</code>是临时文件的handle</p><p>例如：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> System.IO</span><br><span class="line"></span><br><span class="line"><span class="title">main</span> = <span class="keyword">do</span></span><br><span class="line">    (tempFile, tempHandle) &lt;- openTempFile <span class="string">&quot;.&quot;</span> <span class="string">&quot;temp&quot;</span></span><br><span class="line">    ...</span><br><span class="line">    hClose tempHandle</span><br></pre></td></tr></table></figure><p><code>&quot;.&quot;</code>指临时文件要在当前目录创建，<code>&quot;temp&quot;</code>指临时文件名字以temp开头。最终得到的tempFile就是./temp…….，temp后为随机数字，如<code>./temp43620-0</code></p><h2 id="路径操作"><a href="#路径操作" class="headerlink" title="路径操作"></a>路径操作</h2><p>相关函数都包含在<code>System.Directory</code>模块中，全部内容见<a href="https://hackage.haskell.org/package/directory-1.3.6.2/docs/System-Directory.html">System.Directory</a></p><h3 id="getCurrentDirectory"><a href="#getCurrentDirectory" class="headerlink" title="getCurrentDirectory"></a>getCurrentDirectory</h3><p style="text-align: center;">getCurrentDirectory :: IO FilePath</p><p>直接返回一个I/O action，其内容是一个字符串表示当前路径的绝对路径</p><h3 id="removeFile"><a href="#removeFile" class="headerlink" title="removeFile"></a>removeFile</h3><p style="text-align: center;">removeFile :: FilePath -> IO ()</p><p>输入一个文件路径，并删除掉它</p><h3 id="renameFile"><a href="#renameFile" class="headerlink" title="renameFile"></a>renameFile</h3><p style="text-align: center;">renameFile :: FilePath -> FilePath -> IO ()</p><p>输入一个原路径，一个新路径，为原路径的文件重命名为新路径的名</p><h3 id="doesFileExist"><a href="#doesFileExist" class="headerlink" title="doesFileExist"></a>doesFileExist</h3><p style="text-align: center;">doesFileExist :: FilePath -> IO Bool</p><p>检查文件是否存在，返回一个包含布尔值的I/O action</p><h2 id="Command-line-arguments"><a href="#Command-line-arguments" class="headerlink" title="Command line arguments"></a>Command line arguments</h2><p><code>System.Environment</code>模块中提供了两个函数可以用来处理传入命令行的参数</p><h3 id="getArgs"><a href="#getArgs" class="headerlink" title="getArgs"></a>getArgs</h3><p style="text-align: center;">getArgs :: IO [String]</p><p>不需要输入参数，直接返回一个I/O action，内容为传入命令行的参数（一个由String组成的列表）。相当于C语言中的argv[1:]</p><h3 id="getProgName"><a href="#getProgName" class="headerlink" title="getProgName"></a>getProgName</h3><p style="text-align: center;">getProgName :: IO String</p><p>返回I/O action，内容为程序的名字，相当于C语言中的argv[0]</p><h2 id="Randomness"><a href="#Randomness" class="headerlink" title="Randomness"></a>Randomness</h2><p>和随机数有关的函数都包含在<code>System.Random</code>模块中。GHCi启动时可能不会包含System.Random的配置，导致无法找到模块。需要通过stack打开:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stack ghci --package random</span><br></pre></td></tr></table></figure><p>Haskell要求同样的程序需要运行出同样的结果，除了用到了I/O action，所有会造成不同结果的函数都要交给I/O action来完成</p><p>那要使随机数脱离IO存在，就要用到随机生成器（random generator）</p><p><code>System.Random</code>模块提供了几个生成随机数的函数：</p><h3 id="random"><a href="#random" class="headerlink" title="random"></a>random</h3><p style="text-align: center;">random :: (Random a, RandomGen g) => g -> (a, g)</p><p>其中又有两个新的typeclass，Random表示可以取随机，RandomGen表示随机数生成器。random函数接收一个随机数生成器，返回一个元组，其中第一个元素是生成的随机数，第二个元素是一个新的随机数生成器</p><p>获取随机数生成器可以使用<code>mkStdGen</code>函数：</p><p style="text-align: center;">mkStdGen :: Int -> StdGen</p><p>其中<code>StdGen</code>是一个RandomGen的实例</p><p>运用random生成随机数需要指定类型，不然程序无法确定<code>a</code>是什么类型。例如：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; random (mkStdGen <span class="number">100</span>) :: (<span class="type">Int</span>, <span class="type">StdGen</span>)</span><br><span class="line">(<span class="number">9216477508314497915</span>,<span class="type">StdGen</span> &#123;unStdGen = <span class="type">SMGen</span> <span class="number">712633246999323047</span> <span class="number">2532601429470541125</span>&#125;)</span><br><span class="line"><span class="title">ghci</span>&gt; random (mkStdGen <span class="number">100</span>) :: (<span class="type">Char</span>, <span class="type">StdGen</span>)</span><br><span class="line">(&#x27;\<span class="number">537310</span>&#x27;,<span class="type">StdGen</span> &#123;unStdGen = <span class="type">SMGen</span> <span class="number">712633246999323047</span> <span class="number">2532601429470541125</span>&#125;)</span><br><span class="line"><span class="title">ghci</span>&gt; random (mkStdGen <span class="number">100</span>) :: (<span class="type">Bool</span>, <span class="type">StdGen</span>)</span><br><span class="line">(<span class="type">True</span>,<span class="type">StdGen</span> &#123;unStdGen = <span class="type">SMGen</span> <span class="number">712633246999323047</span> <span class="number">2532601429470541125</span>&#125;)</span><br></pre></td></tr></table></figure><p>再次运行同样的函数，会得到同样的结果。所以如果需要生成其他的随机数，需要更换生成器，就可以使用上一次调用结果返回的新随机数生成器：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">threeCoins</span> :: <span class="type">StdGen</span> -&gt; (<span class="type">Bool</span>, <span class="type">Bool</span>, <span class="type">Bool</span>)  </span><br><span class="line"><span class="title">threeCoins</span> gen =   </span><br><span class="line">    <span class="keyword">let</span> (firstCoin, newGen) = random gen  </span><br><span class="line">        (secondCoin, newGen&#x27;) = random newGen  </span><br><span class="line">        (thirdCoin, newGen&#x27;&#x27;) = random newGen&#x27;  </span><br><span class="line">    <span class="keyword">in</span>  (firstCoin, secondCoin, thirdCoin) </span><br></pre></td></tr></table></figure><h3 id="randoms"><a href="#randoms" class="headerlink" title="randoms"></a>randoms</h3><p style="text-align: center;">randoms :: (Random a, RandomGen g) => g -> [a]</p><p>randoms接收一个RandomGen，返回一个随机的无穷列表。因为它是无穷的，所以不会返回新的随机数生成器</p><h3 id="randomR"><a href="#randomR" class="headerlink" title="randomR"></a>randomR</h3><p style="text-align: center;">randomR :: (Random a, RandomGen g) => (a, a) -> g -> (a, g)</p><p>可以用来生成有范围的随机数，第一个参数是一个元组，表示生成随机数的范围(闭区间)</p><h3 id="randomRs"><a href="#randomRs" class="headerlink" title="randomRs"></a>randomRs</h3><p style="text-align: center;">randomRs :: (Random a, RandomGen g) => (a, a) -> g -> [a]</p><p>同上两个，生成有范围的无穷随机数列表</p><h3 id="getStdGen"><a href="#getStdGen" class="headerlink" title="getStdGen"></a>getStdGen</h3><p>如果想要让程序每次运行得到不同的随机结果，需要使用<code>getStdGen</code>来获取全局随机数生成器，它会在每次运行的时候产生不同的值，也因此，它返回的是一个I/O action，而不是一个直接的StdGen</p><p style="text-align: center;">getStdGen :: Control.Monad.IO.Class.MonadIO m => m StdGen</p><p>即可以看成getStdGen :: IO StdGen，需要使用&lt;-操作符将StdGen提取出来</p><p>但是在同一个程序中，getStdGen的结果是相同的，全局随机数生成器不会自动更新，所以就需要另一个函数newStdGen</p><h3 id="newStdGen"><a href="#newStdGen" class="headerlink" title="newStdGen"></a>newStdGen</h3><p style="text-align: center;">newStdGen :: Control.Monad.IO.Class.MonadIO m => m StdGen</p><p>执行newStdGen会进行两个操作：</p><ul><li>更新全局随机数生成器，下次执行getStdGen会获得不同的结果</li><li>返回一个I/O action，包含一个新的StdGen（但是这个生成器和全局生成器也不同）</li></ul><h2 id="Exceptions"><a href="#Exceptions" class="headerlink" title="Exceptions"></a>Exceptions</h2><p>程序在运行失败时会抛出异常，可以通过<code>Control.Exception</code>模块中的<code>catch</code>函数来捕获异常：</p><p style="text-align: center;">catch :: Exception e => IO a -> (e -> IO a) -> IO a</p><p>第一个参数是要进行的操作，以IO a为返回值的类型，第二个参数是一个函数，它接收异常并进行操作，例如：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Control.Exception</span><br><span class="line"></span><br><span class="line"><span class="title">main</span> = main&#x27; `catch` handler</span><br><span class="line"></span><br><span class="line"><span class="title">main&#x27;</span> :: <span class="type">IO</span> ()</span><br><span class="line"><span class="title">main&#x27;</span> = <span class="keyword">do</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="title">handler</span> :: <span class="type">Exception</span> e =&gt; e -&gt; <span class="type">IO</span> ()</span><br><span class="line"><span class="title">handler</span> e =  putStrLn <span class="string">&quot;...&quot;</span></span><br></pre></td></tr></table></figure><p>也可以利用守卫（guard）语法和<code>System.IO.Error</code>中的函数来判断IO异常的类型来进行不同操作：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> System.Environment</span><br><span class="line"><span class="keyword">import</span> System.IO.Error</span><br><span class="line"><span class="keyword">import</span> Control.Exception</span><br><span class="line">  </span><br><span class="line"><span class="title">main</span> = toTry `catch` handler</span><br><span class="line">              </span><br><span class="line"><span class="title">toTry</span> :: <span class="type">IO</span> ()  </span><br><span class="line"><span class="title">toTry</span> = <span class="keyword">do</span> (fileName:_) &lt;- getArgs  </span><br><span class="line">           contents &lt;- readFile fileName  </span><br><span class="line">           putStrLn $ <span class="string">&quot;The file has &quot;</span> ++ show (length (lines contents)) ++ <span class="string">&quot; lines!&quot;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="title">handler</span> :: <span class="type">IOError</span> -&gt; <span class="type">IO</span> ()  </span><br><span class="line"><span class="title">handler</span> e  </span><br><span class="line">    | isDoesNotExistError e = putStrLn <span class="string">&quot;The file doesn&#x27;t exist!&quot;</span>  </span><br><span class="line">    | otherwise = ioError e  </span><br></pre></td></tr></table></figure><p>具体相关全部函数见文档：<a href="https://hackage.haskell.org/package/base-4.15.0.0/docs/System-IO-Error.html">System.IO.Error</a>、<a href="https://hackage.haskell.org/package/base-4.15.0.0/docs/Control-Exception-Base.html">Control.Exception</a></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="http://learnyouahaskell.com/chapters">Learn You a Haskell</a></li></ul><hr><div style="text-align: center;"><p style="font-size: 1.3rem; font-weight: bold;">目录</p><p>#0&nbsp;|&nbsp;<a href="/p/b3ca5c18.html">总章</a>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;<br>#1&nbsp;|&nbsp;<a href="/p/d63b5b5f.html">基础语法与函数</a>&emsp;&emsp;&emsp;<br>#2&nbsp;|&nbsp;<a href="/p/53e482b7.html">高阶函数与模块</a>&emsp;&emsp;&emsp;<br>#3&nbsp;|&nbsp;<a href="/p/369b7e08.html">类型与类型类</a>&emsp;&emsp;&emsp;&emsp;<br>#4&nbsp;|&nbsp;<a href="/p/a5bbe48a.html">输入输出与文件</a>&emsp;&emsp;&emsp;<br>#5&nbsp;|&nbsp;<a href="/p/290ecb74.html">函子、应用函子与单子</a><br>#6&nbsp;|&nbsp;<a href="/p/d4bb2633.html">半群与幺半群</a>&emsp;&emsp;&emsp;&emsp;<br>#7&nbsp;|&nbsp;<a href="/p/68ef8146.html">一些其它类型类</a>&emsp;&emsp;&emsp;<br>#A&nbsp;|&nbsp;<a href="/p/96c32eae.html">Haskell与范畴论</a>&emsp;&nbsp;&thinsp;</p></div>]]></content>
    
    
    <summary type="html">&lt;div style=&quot;display: flex; justify-content: space-between;&quot;&gt;

&lt;p&gt;&lt;a href=&quot;/p/369b7e08.html&quot;&gt;&amp;lt; #3&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/p/290ecb74.html&quot;&gt;#5 &amp;gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;Input-Output&quot;&gt;&lt;a href=&quot;#Input-Output&quot; class=&quot;headerlink&quot; title=&quot;Input/Output&quot;&gt;&lt;/a&gt;Input/Output&lt;/h2&gt;&lt;h3 id=&quot;运行Haskell程序&quot;&gt;&lt;a href=&quot;#运行Haskell程序&quot; class=&quot;headerlink&quot; title=&quot;运行Haskell程序&quot;&gt;&lt;/a&gt;运行Haskell程序&lt;/h3&gt;&lt;p&gt;不在GHCi中运行一个Haskell程序有两种方式：&lt;/p&gt;</summary>
    
    
    
    
    <category term="Haskell" scheme="https://blog.tonycrane.cc/tags/Haskell/"/>
    
    <category term="笔记" scheme="https://blog.tonycrane.cc/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>「Learn Haskell」#3 类型与类型类</title>
    <link href="https://blog.tonycrane.cc/p/369b7e08.html"/>
    <id>https://blog.tonycrane.cc/p/369b7e08.html</id>
    <published>2021-07-07T08:09:41.000Z</published>
    <updated>2021-07-25T04:51:42.570Z</updated>
    
    <content type="html"><![CDATA[<div style="display: flex; justify-content: space-between;"><p><a href="/p/53e482b7.html">&lt; #2</a></p><p><a href="/p/a5bbe48a.html">#4 &gt;</a></p></div><h2 id="Types"><a href="#Types" class="headerlink" title="Types"></a>Types</h2><p>Haskell有一个静态类型系统，任何变量、函数都会具有类型，并且有类型判断功能，没给出的类型会自动识别。<br>Type的首字母全为大写，常用的有：</p><ul><li><code>Int</code>：整型，有上下界范围，-2147483647～2147483648<span id="more"></span></li><li><code>Integer</code>：整数，无界，但是效率比Int低</li><li><code>Float</code>：单精度浮点型</li><li><code>Double</code>：双精度浮点型</li><li><code>Bool</code>：布尔值</li><li><code>Char</code>：字符</li><li><code>String</code>：字符串，等同于<code>[Char]</code></li><li><code>Ording</code>：大小关系，包含LT、EQ、GT，且它们有大小关系 LT &lt; EQ &lt; GT</li></ul><p>列表的类型是由其中元素决定的，并且列表中元素必须是同一类型，所以列表的类型就是其元素类型外加<code>[]</code>。</p><p>元组的类型由其中各个元素的类型共同决定，因为元组中的元素可以是不同类型。如(“abc”, ‘a’, True)的类型是([Char], Char, Bool)。</p><h2 id="Typeclasses"><a href="#Typeclasses" class="headerlink" title="Typeclasses"></a>Typeclasses</h2><p>类型类（Typeclass）是定义一系列功能的接口，如果一个Type属于一个Typeclass的成员，那么它可以实现这个类型类所规定的功能。一个Type也可以属于多个Typeclass<br>Typeclass的首字母也全为大写，常见的有：</p><ul><li><code>Eq</code>：可判断是否相等</li><li><code>Ord</code>：可比较大小</li><li><code>Show</code>：可展示成字符串</li><li><code>Read</code>：可从字符串转换成特定类型</li><li><code>Enum</code>：可枚举（连续），即可以使用pred和succ函数得到前驱和后缀</li><li><code>Bounded</code>: 有上下界，如果元组中所有元素都属于Bounded，那这个元组的类型也属于Bounded</li><li><code>Integral</code>：是整数，包括Int和Integer</li><li><code>RealFloat</code>： 是实浮点数，包括Float和Double</li><li><code>RealFrac</code>：是实分数，包括Float、Double和Ratio（在Data.Ratio模块中）</li><li><code>Floating</code>：是浮点数，包括Float、Double和Complex（在Data.Complex模块中）</li><li><code>Real</code>：是实数，包括Integral和RealFrac的成员</li><li><code>Fractional</code>：是分数，包括RealFrac和Floating的成员</li><li><code>Num</code>：是数字，包括上述所有数字相关的类型</li></ul><h2 id="Type-variables"><a href="#Type-variables" class="headerlink" title="Type variables"></a>Type variables</h2><p>如果查看一个函数的类型，比如<code>head</code>，那么将会返回以下类型：</p><p style="text-align: center;">head :: [a] -> a</p><p>其中的a就是一个类型变量（type variable），它在head中可以属于任何类型，在这里只是表示返回值的类型和输入的列表中的元素的类型相一致。</p><p>在函数的类型表达式其实可以看作$\lambda$表达式，它适用于$\alpha$变换（$\alpha$-conversion）。即a在这里可以指Int、Char等类型，也可以指[Char], (Int, Char), 甚至函数Int -&gt; Int等。</p><p>在大部分函数的类型中，类型变量需要保证是某个Typeclass的成员才能完成操作。比如<code>(==)</code>函数，它需要传入的参数是可判断相等的，即是Eq的成员，那么<code>(==)</code>的类型就是：</p><p style="text-align: center;">(==) :: (Eq a) => a -> a -> Bool</p><p>其中<code>=&gt;</code>前的部分(Eq a)就是类约束（class constraint），它规定了a是Eq的成员，所以<code>(==)</code>函数传入的两个参数都是a类型，且都是Eq的成员，保证了它们之间是可以比较是否相等的。</p><h2 id="定义新Type"><a href="#定义新Type" class="headerlink" title="定义新Type"></a>定义新Type</h2><p>定义一个新的Type需要使用<code>data</code>关键字，比如定义<code>Bool</code>需要使用：</p><p style="text-align: center;">data Bool = False | True</p><p>其中<code>=</code>左侧的部分定义了新类型的名称<code>Bool</code>，右侧的部分叫做值构造器（value constructors），表示了Bool类型的值为False或True。<br>并且名称和值构造器的首字母都需要大写。</p><p>另外，值构造器也是函数，它们可以有参数，叫做项（field）。比如：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">Shape</span> = <span class="type">Circle</span> <span class="type">Float</span> <span class="type">Float</span> <span class="type">Float</span> | <span class="type">Rectangle</span> <span class="type">Float</span> <span class="type">Float</span> <span class="type">Float</span> <span class="type">Float</span>   </span></span><br></pre></td></tr></table></figure><p>它定义了一个新Type叫Shape，值构造器是Circle和Rectangle，Circle接收三个参数都是Float类型，Rectangle接收四个Float类型参数。<br>如果查看Circle的类型，将返回：</p><p style="text-align: center;">Circle :: Float -> Float -> Float -> Shape</p><p>如果想要让它能给直接显示出来，需要让它属于Show类型类。在代码中只需要在结尾加上<code>deriving (Show)</code>:</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">Shape</span> = <span class="type">Circle</span> <span class="type">Float</span> <span class="type">Float</span> <span class="type">Float</span> | <span class="type">Rectangle</span> <span class="type">Float</span> <span class="type">Float</span> <span class="type">Float</span> <span class="type">Float</span> <span class="keyword">deriving</span> (<span class="type">Show</span>)</span></span><br></pre></td></tr></table></figure><p>类型的名称和值构造器名称也可以相同，比如：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">Point</span> = <span class="type">Point</span> <span class="type">Float</span> <span class="type">Float</span> <span class="keyword">deriving</span> (<span class="type">Show</span>)</span></span><br></pre></td></tr></table></figure><h3 id="导出Type"><a href="#导出Type" class="headerlink" title="导出Type"></a>导出Type</h3><p>在文件中定义了新的Type之后，如果在别的文件中将其作为模块导入，则需要先导出。比如文件<code>Shapes.hs</code>中定义了Shape和Point，以及其他的一些函数，那么文件开头需要写：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> Shapes</span><br><span class="line">( <span class="type">Shape(..)</span></span><br><span class="line">, <span class="type">Point(..)</span></span><br><span class="line">, <span class="title">functionA</span></span><br><span class="line">, <span class="title">functionB</span></span><br><span class="line">) <span class="keyword">where</span></span><br></pre></td></tr></table></figure><p>其中的<code>Shape(..)</code>导出了Shape类型和它所有的值构造器，<code>..</code>代表了它的所有值构造器。因此，<code>Shape(..)</code>相当于<code>Shape (Circle, Rectangle)</code>。</p><p>如果不想要导出值构造器，即不允许使用值构造器的方法来创建Shape类型的变量。那么需要将<code>Shape(..)</code>替换为<code>Shape</code>，这样就只导出了Shape类型，而不导出其值构造器。</p><h3 id="Record-Syntax"><a href="#Record-Syntax" class="headerlink" title="Record Syntax"></a>Record Syntax</h3><p>如果想要方便地取出类型实例中的参数，可以使用Record语法，如：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">Point</span> = <span class="type">Point</span> &#123; <span class="title">xcoord</span> :: <span class="type">Float</span></span></span><br><span class="line"><span class="class">                   , <span class="title">ycoord</span> :: <span class="type">Float</span></span></span><br><span class="line"><span class="class">                   &#125; <span class="keyword">deriving</span> (<span class="type">Show</span>)</span></span><br></pre></td></tr></table></figure><p>在值构造器的参数部分先加一个大括号，然后指定取出值的函数名称（xcoord, ycoord），后面指定类型（:: Float）。这样xcoord和ycoord就都是一个类型为Point -&gt; Float的函数，可以通过下面方法来访问值：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; <span class="keyword">let</span> point = <span class="type">Point</span> <span class="number">1.0</span> <span class="number">2.0</span></span><br><span class="line"><span class="title">ghci</span>&gt; xcoord point</span><br><span class="line"><span class="number">1.0</span></span><br><span class="line"><span class="title">ghci</span>&gt; ycoord point</span><br><span class="line"><span class="number">2.0</span></span><br></pre></td></tr></table></figure><p>同时也可以通过下面方法来创建这个point：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">point</span> = <span class="type">Point</span> &#123;ycoord=<span class="number">2.0</span>, xcoord=<span class="number">1.0</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="Type-parameters"><a href="#Type-parameters" class="headerlink" title="Type parameters"></a>Type parameters</h3><p>值构造器可以接收参数，类型也可以接收参数，这样它就成为了类型构造器（type constructors）。如Maybe的定义：</p><p style="text-align: center;">data Maybe a = Nothing | Just a</p><p>它的值是Nothing时，类型为Maybe a，是多态的（polymorphic）。<br>他的值不是Nothing时，类型取决于值Just a中a的类型，可以构造出Maybe Int、Maybe [Char]等多种类型：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Nothing</span> :: <span class="type">Maybe</span> a</span><br><span class="line"><span class="type">Just</span> <span class="number">1</span> :: <span class="type">Num</span> a =&gt; <span class="type">Maybe</span> a</span><br><span class="line"><span class="type">Just</span> &#x27;a&#x27; :: <span class="type">Maybe</span> <span class="type">Char</span></span><br><span class="line"><span class="type">Just</span> <span class="string">&quot;abc&quot;</span> :: <span class="type">Maybe</span> [<span class="type">Char</span>]</span><br></pre></td></tr></table></figure><p>可以用这种方法改写Point：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">Point</span> x y = <span class="type">Point</span> &#123; <span class="title">xcoord</span> :: <span class="title">x</span></span></span><br><span class="line"><span class="class">                       , <span class="title">ycoord</span> :: <span class="title">y</span></span></span><br><span class="line"><span class="class">                       &#125; <span class="keyword">deriving</span> (<span class="type">Show</span>)</span></span><br></pre></td></tr></table></figure><p>但使用类型参数（type parameters）并不是总是方便，比如在声明函数类型的时候不能只使用Point来表示Point类型，而是必须写成Point Float Float。</p><p>而且不能在定义类型构造器时添加类约束（class constraint），不然在之后声明函数类型的时候也都需要添加类约束，如：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">data</span> (<span class="type">Ord</span> <span class="title">k</span>) =&gt; <span class="type">Map</span> k v = ... </span></span><br><span class="line"><span class="title">toList</span> :: (<span class="type">Ord</span> k) =&gt; <span class="type">Map</span> k a -&gt; [(k, a)]</span><br></pre></td></tr></table></figure><h4 id="Either"><a href="#Either" class="headerlink" title="Either"></a>Either</h4><p>Either是一个类型构造器，它有两个值构造器，定义是：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">Either</span> a b = <span class="type">Left</span> a | <span class="type">Right</span> b <span class="keyword">deriving</span> (<span class="type">Eq</span>, <span class="type">Ord</span>, <span class="type">Read</span>, <span class="type">Show</span>)  </span></span><br></pre></td></tr></table></figure><p>如果使用了Left，那它的a的类型就是具体的；如果使用了Right，那它的b的类型就是具体的：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; <span class="type">Right</span> <span class="number">20</span>  </span><br><span class="line"><span class="type">Right</span> <span class="number">20</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; <span class="type">Left</span> <span class="string">&quot;w00t&quot;</span>  </span><br><span class="line"><span class="type">Left</span> <span class="string">&quot;w00t&quot;</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; :t <span class="type">Right</span> &#x27;a&#x27;  </span><br><span class="line"><span class="type">Right</span> &#x27;a&#x27; :: <span class="type">Either</span> a <span class="type">Char</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; :t <span class="type">Left</span> <span class="type">True</span>  </span><br><span class="line"><span class="type">Left</span> <span class="type">True</span> :: <span class="type">Either</span> <span class="type">Bool</span> b  </span><br></pre></td></tr></table></figure><p>Either可以看作Maybe的补充，比如Maybe在使用时，出现异常可以返回Nothing，但只是一个Nothing，不包含任何信息；但Either包含左值和右值，正常结果返回右值，而出现异常就可以返回包含错误信息的左值，比如安全除法：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">safeDiv</span> :: <span class="type">Int</span> -&gt; <span class="type">Int</span> -&gt; <span class="type">Maybe</span> <span class="type">Int</span></span><br><span class="line"><span class="title">safeDiv</span> _ <span class="number">0</span> = <span class="type">Nothing</span></span><br><span class="line"><span class="title">safeDiv</span> x y = <span class="type">Just</span> (x `div` y)</span><br><span class="line"></span><br><span class="line"><span class="title">ghci</span>&gt; safeDiv <span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="type">Just</span> <span class="number">2</span></span><br><span class="line"><span class="title">ghci</span>&gt; safeDiv <span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="type">Nothing</span></span><br></pre></td></tr></table></figure><p>而使用Either：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">safeDiv</span> :: <span class="type">Int</span> -&gt; <span class="type">Int</span> -&gt; <span class="type">Either</span> <span class="type">String</span> <span class="type">Int</span></span><br><span class="line"><span class="title">safeDiv</span> _ <span class="number">0</span> = <span class="type">Left</span> <span class="string">&quot;Divided by zero&quot;</span></span><br><span class="line"><span class="title">safeDiv</span> x y = <span class="type">Right</span> (x `div` y)</span><br><span class="line"></span><br><span class="line"><span class="title">ghci</span>&gt; safeDiv <span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="type">Right</span> <span class="number">2</span></span><br><span class="line"><span class="title">ghci</span>&gt; safeDiv <span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="type">Left</span> <span class="string">&quot;Divided by zero&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Derived-instances"><a href="#Derived-instances" class="headerlink" title="Derived instances"></a>Derived instances</h3><p>想要使一个定义的类满足某些Typeclass的需求，需要从其派生（derive），比如：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">Day</span> = <span class="type">Monday</span> | <span class="type">Tuesday</span> | <span class="type">Wednesday</span> | <span class="type">Thursday</span> | <span class="type">Friday</span> | <span class="type">Saturday</span> | <span class="type">Sunday</span>   </span></span><br><span class="line">           <span class="keyword">deriving</span> (<span class="type">Eq</span>, <span class="type">Ord</span>, <span class="type">Show</span>, <span class="type">Read</span>, <span class="type">Bounded</span>, <span class="type">Enum</span>)  </span><br></pre></td></tr></table></figure><p>这样Day类型的值（Monday～Sunday）之间就可以比较是否相等（从Eq派生），比较大小（从Ord派生，左侧为小，右侧为大），显示成字符串（从Show派生），从字符串中读取（从Read派生），包含边界（从Bounded派生），可以枚举（从Enum派生，按照值构造器中的顺序依次向右）</p><h3 id="Type-synonyms"><a href="#Type-synonyms" class="headerlink" title="Type synonyms"></a>Type synonyms</h3><p>为了阅读方便，书写简便，可以使用<code>type</code>关键字为已有类型创建别名（synonyms）。比如String的定义：</p><p style="text-align: center;">type String = [Char]</p><p>在所有需要使用字符串（即[Char]）的地方都可以使用String来代替，它们是完全一致的，只是String更简便易读。<br>同时，类型别名也可以接收类型参数</p><h4 id="newtype-keyword"><a href="#newtype-keyword" class="headerlink" title="newtype keyword"></a>newtype keyword</h4><p>除了<code>data</code>、<code>type</code>关键字之外，还可以用<code>newtype</code>关键字来定义一个新的类型，比如<code>Control.Applicative</code>模块中的ZipList：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">newtype</span> <span class="type">ZipList</span> a = &#123; <span class="title">getZipList</span> :: [<span class="title">a</span>] &#125;</span></span><br></pre></td></tr></table></figure><ul><li>不同于type，它不是别名，可以使用record语法来直接定义取出值的函数</li><li>不同于data，它只能有一个值构造器，但是速度要比data快，而且更加懒惰</li></ul><h3 id="Recursive-data-structures"><a href="#Recursive-data-structures" class="headerlink" title="Recursive data structures"></a>Recursive data structures</h3><p>一个类型也可以递归定义，比如一颗二叉树：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">Tree</span> a = <span class="type">EmptyTree</span> | <span class="type">Node</span> a (<span class="type">Tree</span> <span class="title">a</span>) (<span class="type">Tree</span> <span class="title">a</span>) <span class="keyword">deriving</span> (<span class="type">Show</span>, <span class="type">Read</span>, <span class="type">Eq</span>)  </span></span><br></pre></td></tr></table></figure><h2 id="定义新Typeclass"><a href="#定义新Typeclass" class="headerlink" title="定义新Typeclass"></a>定义新Typeclass</h2><p>定义一个新的Typeclass需要使用class关键字，例如定义Eq类型类：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Eq</span> a <span class="keyword">where</span></span>  </span><br><span class="line">    (==) :: a -&gt; a -&gt; <span class="type">Bool</span>  </span><br><span class="line">    (/=) :: a -&gt; a -&gt; <span class="type">Bool</span>  </span><br><span class="line">    x == y = not (x /= y)  </span><br><span class="line">    x /= y = not (x == y)  </span><br></pre></td></tr></table></figure><p>其中<code>a</code>是一个类型变量，前两行声明了需要实现的函数的名字及其类型，后两行表明了需要的函数之间可以相互定义（不必要）。</p><p>包含了后两行之后，只定义(==)函数或者(/=)函数都可以完成全部定义，它们（<code>(==) | (/=)</code>）成为这个类型类的最小完整定义（minimal complete definition）</p><p>查看一个类型类的成员需要实现的函数可以在GHCi中使用<code>:info</code>：</p><p style="text-align: center;">ghci> :info Eq</p><h3 id="手动创建实例"><a href="#手动创建实例" class="headerlink" title="手动创建实例"></a>手动创建实例</h3><p>使一个类型成为一个类型类的实例可以直接使用<code>deriving</code>来自动完成，也可以通过使用instance关键字来手动完成。比如使Point成为Show的实例：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Show</span> <span class="type">Point</span> <span class="keyword">where</span></span></span><br><span class="line">    show (<span class="type">Point</span> x y) = <span class="string">&quot;(&quot;</span> ++ show x ++ <span class="string">&quot;, &quot;</span> ++ show y ++ <span class="string">&quot;)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- in ghci</span></span><br><span class="line"><span class="title">ghci</span>&gt; <span class="type">Point</span> <span class="number">1.0</span> <span class="number">2.0</span></span><br><span class="line">(<span class="number">1.0</span>, <span class="number">2.0</span>)</span><br></pre></td></tr></table></figure><p>这样就可以自定义显示的内容，否则使用deriving的话只会直接将其转化为字符串。</p><p>同时也要注意类型和类型构造器的区别，传入给instance的第二个参数应该为类型而不是类型构造器，比如Maybe：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Eq</span> <span class="type">Maybe</span> <span class="keyword">where</span></span>  </span><br><span class="line">    ...    </span><br><span class="line"><span class="comment">-- 错误用法，因为Maybe是类型构造器而不是类型</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Eq</span> (<span class="type">Maybe</span> <span class="title">m</span>) <span class="keyword">where</span></span>  </span><br><span class="line">    ...</span><br><span class="line"><span class="comment">-- 错误用法，因为m不一定是Eq的成员</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> (<span class="type">Eq</span> <span class="title">m</span>) =&gt; <span class="type">Eq</span> (<span class="type">Maybe</span> <span class="title">m</span>) <span class="keyword">where</span></span>  </span><br><span class="line">    <span class="type">Just</span> x == <span class="type">Just</span> y = x == y  </span><br><span class="line">    <span class="type">Nothing</span> == <span class="type">Nothing</span> = <span class="type">True</span>  </span><br><span class="line">    _ == _ = <span class="type">False</span>  </span><br></pre></td></tr></table></figure><h3 id="Functor-Typeclass"><a href="#Functor-Typeclass" class="headerlink" title="Functor Typeclass"></a>Functor Typeclass</h3><p>Functor也是一种类型类，它只规定了一个函数：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Functor</span> f <span class="keyword">where</span></span></span><br><span class="line">    fmap :: (a -&gt; b) -&gt; f a -&gt; f b</span><br></pre></td></tr></table></figure><p>其中<code>f</code>是一个类型构造器，而不是一个具体类型</p><h2 id="Kinds"><a href="#Kinds" class="headerlink" title="Kinds"></a>Kinds</h2><p>一个值的类型叫做类型（Type），而一个类型的类型叫做Kind。可以通过GHCi中<code>:k</code>来查看Kind：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; :k <span class="type">Int</span></span><br><span class="line"><span class="type">Int</span> :: *</span><br><span class="line"><span class="title">ghci</span>&gt; :k <span class="type">Maybe</span></span><br><span class="line"><span class="type">Maybe</span> :: * -&gt; *</span><br><span class="line"><span class="title">ghci</span>&gt; :k <span class="type">Maybe</span> <span class="type">Int</span></span><br><span class="line"><span class="type">Maybe</span> <span class="type">Int</span> :: *</span><br><span class="line"><span class="title">ghci</span>&gt; :k <span class="type">Either</span></span><br><span class="line"><span class="type">Either</span> :: * -&gt; * -&gt; *</span><br></pre></td></tr></table></figure><p>其中的星号<code>*</code>代表了一个具体类型（concrete type）。Int本身就是一个具体类型，所以Int的Kind是*。而Maybe是一个类型构造器，它接收一个具体类型返回一个新的具体类型，所以Maybe的Kind是* -&gt; *。如果给Maybe传入了一个Int，那么得到的Maybe Int就是一个具体的类型，它的Kind就是*。Either也是一个类型构造器，但它接收两个类型才产生一个新的类型，所以Either的Kind是* -&gt; * -&gt; *。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="http://learnyouahaskell.com/chapters">Learn You a Haskell</a></li></ul><hr><div style="text-align: center;"><p style="font-size: 1.3rem; font-weight: bold;">目录</p><p>#0&nbsp;|&nbsp;<a href="/p/b3ca5c18.html">总章</a>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;<br>#1&nbsp;|&nbsp;<a href="/p/d63b5b5f.html">基础语法与函数</a>&emsp;&emsp;&emsp;<br>#2&nbsp;|&nbsp;<a href="/p/53e482b7.html">高阶函数与模块</a>&emsp;&emsp;&emsp;<br>#3&nbsp;|&nbsp;<a href="/p/369b7e08.html">类型与类型类</a>&emsp;&emsp;&emsp;&emsp;<br>#4&nbsp;|&nbsp;<a href="/p/a5bbe48a.html">输入输出与文件</a>&emsp;&emsp;&emsp;<br>#5&nbsp;|&nbsp;<a href="/p/290ecb74.html">函子、应用函子与单子</a><br>#6&nbsp;|&nbsp;<a href="/p/d4bb2633.html">半群与幺半群</a>&emsp;&emsp;&emsp;&emsp;<br>#7&nbsp;|&nbsp;<a href="/p/68ef8146.html">一些其它类型类</a>&emsp;&emsp;&emsp;<br>#A&nbsp;|&nbsp;<a href="/p/96c32eae.html">Haskell与范畴论</a>&emsp;&nbsp;&thinsp;</p></div>]]></content>
    
    
    <summary type="html">&lt;div style=&quot;display: flex; justify-content: space-between;&quot;&gt;

&lt;p&gt;&lt;a href=&quot;/p/53e482b7.html&quot;&gt;&amp;lt; #2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/p/a5bbe48a.html&quot;&gt;#4 &amp;gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;Types&quot;&gt;&lt;a href=&quot;#Types&quot; class=&quot;headerlink&quot; title=&quot;Types&quot;&gt;&lt;/a&gt;Types&lt;/h2&gt;&lt;p&gt;Haskell有一个静态类型系统，任何变量、函数都会具有类型，并且有类型判断功能，没给出的类型会自动识别。&lt;br&gt;Type的首字母全为大写，常用的有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Int&lt;/code&gt;：整型，有上下界范围，-2147483647～2147483648&lt;/li&gt;&lt;/ul&gt;</summary>
    
    
    
    
    <category term="Haskell" scheme="https://blog.tonycrane.cc/tags/Haskell/"/>
    
    <category term="笔记" scheme="https://blog.tonycrane.cc/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>「Learn Haskell」#2 高阶函数与模块</title>
    <link href="https://blog.tonycrane.cc/p/53e482b7.html"/>
    <id>https://blog.tonycrane.cc/p/53e482b7.html</id>
    <published>2021-07-07T08:09:03.000Z</published>
    <updated>2021-07-25T04:51:46.184Z</updated>
    
    <content type="html"><![CDATA[<div style="display: flex; justify-content: space-between;"><p><a href="/p/d63b5b5f.html">&lt; #1</a></p><p><a href="/p/369b7e08.html">#3 &gt;</a></p></div><h2 id="Higher-Order-Functions"><a href="#Higher-Order-Functions" class="headerlink" title="Higher Order Functions"></a>Higher Order Functions</h2><h3 id="Currying"><a href="#Currying" class="headerlink" title="Currying"></a>Currying</h3><p>Haskell中的函数是柯里化（Currying）的，可以看作所有函数都只接收一个参数，而接收两个参数的函数实际上是这个函数接收了第一个参数后返回了一个接收第二个参数的函数，然后用这个函数接收第二个参数，返回最终的结果。比如max函数，它的类型签名是：</p><span id="more"></span><p style="text-align: center;">max :: Ord a => a -> a -> a</p><p>可以看成a -&gt; (a -&gt; a)，即接收一个参数，返回一个类型为a -&gt; a的函数。比如max 1的类型签名是：</p><p style="text-align: center;">max 1 :: (Ord a, Num a) => a -> a</p><p>因此max 1 2，也就等同于(max 1) 2，即将函数max 1应用在数字2上</p><p>同时，函数也可以接收函数作为参数，参数有函数的函数就被称为高阶函数（Higher Order Functions）</p><h3 id="一些高阶函数"><a href="#一些高阶函数" class="headerlink" title="一些高阶函数"></a>一些高阶函数</h3><h4 id="zipWith"><a href="#zipWith" class="headerlink" title="zipWith"></a>zipWith</h4><p style="text-align: center;">zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]</p><p>第一个参数为一个函数，然后接收两个列表，将其对应元素传入接收的函数中，得到的结果组成一个新的列表。如果两个传入的列表长度不同，以最短的列表为准，长列表中超出的元素省略。用例：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; zipWith (+) [<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>] [<span class="number">2</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">3</span>]  </span><br><span class="line">[<span class="number">6</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">9</span>]  </span><br><span class="line"><span class="title">ghci</span>&gt; zipWith max [<span class="number">6</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>] [<span class="number">7</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>]  </span><br><span class="line">[<span class="number">7</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>]  </span><br></pre></td></tr></table></figure><h4 id="flip"><a href="#flip" class="headerlink" title="flip"></a>flip</h4><p style="text-align: center;">flip :: (a -> b -> c) -> b -> a -> c</p><p>flip函数接收一个二元函数，返回一个新的二元函数，将其输入的两个参数顺序反过来：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; zip [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>] <span class="string">&quot;hello&quot;</span></span><br><span class="line">[(<span class="number">1</span>,&#x27;h&#x27;),(<span class="number">2</span>,&#x27;e&#x27;),(<span class="number">3</span>,&#x27;l&#x27;),(<span class="number">4</span>,&#x27;l&#x27;),(<span class="number">5</span>,&#x27;o&#x27;)]</span><br><span class="line"><span class="title">ghci</span>&gt; flip zip [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>] <span class="string">&quot;hello&quot;</span>  </span><br><span class="line">[(&#x27;h&#x27;,<span class="number">1</span>),(&#x27;e&#x27;,<span class="number">2</span>),(&#x27;l&#x27;,<span class="number">3</span>),(&#x27;l&#x27;,<span class="number">4</span>),(&#x27;o&#x27;,<span class="number">5</span>)]</span><br></pre></td></tr></table></figure><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><p style="text-align: center;">map :: (a -> b) -> [a] -> [b]</p><p>map函数接收一个函数f和一个列表a，将函数f应用在列表a的每个元素中，并返回得到的所有结果组成的列表b：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; map (+<span class="number">3</span>) [<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">6</span>]  </span><br><span class="line">[<span class="number">4</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">9</span>]  </span><br></pre></td></tr></table></figure><h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><p style="text-align: center;">filter :: (a -> Bool) -> [a] -> [a]</p><p>filter函数接收一个函数f和一个列表a，将列表a中的每个元素传入函数f中，如果结果为True就保留，结果为False就抛弃，返回所有保留的元素组成的新列表：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; filter even [<span class="number">1.</span><span class="number">.10</span>]  </span><br><span class="line">[<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>] </span><br></pre></td></tr></table></figure><h4 id="takeWhile"><a href="#takeWhile" class="headerlink" title="takeWhile"></a>takeWhile</h4><p style="text-align: center;">takeWhile :: (a -> Bool) -> [a] -> [a]</p><p>takeWhile函数接收一个函数f和一个列表a，将列表a中从左向右每个元素传入函数f，直到结果为False停止，返回停止前传入的所有元素组成的新列表：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; takeWhile (/=&#x27; &#x27;) <span class="string">&quot;word1 word2&quot;</span></span><br><span class="line"><span class="string">&quot;word1&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Function-application"><a href="#Function-application" class="headerlink" title="Function application"></a>Function application</h3><p>函数应用可以使用<code>$</code>，<code>$</code>是一个函数，它的类型是：</p><p style="text-align: center;">($) :: (a -> b) -> a -> b</p><p>它可以改变函数结合优先级，将左侧函数应用于全部右侧内容上，相当于给右侧整体加上了括号。否则函数默认左结合，会依次向右应用而不会应用在整体上。</p><!--more--><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">f</span> $ g x</span><br><span class="line"><span class="comment">-- 等价于</span></span><br><span class="line"><span class="title">f</span> (g x)</span><br><span class="line"><span class="comment">-----</span></span><br><span class="line"><span class="title">f</span> g x</span><br><span class="line"><span class="comment">-- 等价于</span></span><br><span class="line">(f g) x</span><br></pre></td></tr></table></figure><h3 id="Function-Composition"><a href="#Function-Composition" class="headerlink" title="Function Composition"></a>Function Composition</h3><p>函数复合可以使用<code>.</code>，<code>.</code>也是一个函数，它的类型是：</p><p style="text-align: center;">(.) :: (b -> c) -> (a -> b) -> a -> c</p><p>定义是：</p><p style="text-align: center;">f . g = \x -> f (g x)</p><p>但是函数复合的优先级要比函数执行低，比如：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">sum</span> . replicate <span class="number">5</span> . max <span class="number">6.7</span> <span class="number">8.9</span></span><br></pre></td></tr></table></figure><p>会先执行max 6.7 8.9并返回8.9，然后将sum、replicate 5、8.9复合，但两个函数无法和一个值(8.9)复合，所以会抛出异常。因此要使用<code>$</code>来规定先复合再执行：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">sum</span> . replicate <span class="number">5</span> . max <span class="number">6.7</span> $ <span class="number">8.9</span></span><br></pre></td></tr></table></figure><h3 id="lambda"><a href="#lambda" class="headerlink" title="lambda"></a>lambda</h3><p>Haskell语言中的lambda表达式是用<code>\</code>来表示的（因为看着像$\mathtt{\lambda}$？）<br>具体语法是</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\para1 para2 ... -&gt; return</span><br></pre></td></tr></table></figure><p>“-&gt;”前的 para1 para2 … 是传入参数，单个多个都可以，需要用空格隔开；”-&gt;”后的 return 是计算得到的返回值。一般需要用括号将整个表达式括起来，防止返回值部分一直向右延伸。</p><h3 id="fold和scan"><a href="#fold和scan" class="headerlink" title="fold和scan"></a>fold和scan</h3><p>fold和scan都接收三个参数（一个二元函数，一个初始值accumulator，一个要折叠的列表），fold返回一个值，而scan返回一个列表<br>传入的二元函数<code>f :: a -&gt; b -&gt; b</code>将accumulator和从列表中取出的值一同传入（l则accumulator在左边为第一个参数，r则accumulator在右边为第二个参数）</p><h4 id="foldl"><a href="#foldl" class="headerlink" title="foldl"></a>foldl</h4><p>左折叠，每次从列表最左侧取出一个值，和accumulator一起传入二元函数，并且accumulator在左边为第一个参数，如：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">foldl</span> f a xs</span><br></pre></td></tr></table></figure><p>它的结果计算过程为</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; foldl f a [x1, x2, x3]</span><br><span class="line">[<span class="number">1.</span>] a = f a x1</span><br><span class="line">[<span class="number">2.</span>] a = f a x2 = f (f a x1) x2</span><br><span class="line">[<span class="number">3.</span>] a = f a x3 = f (f (f a x1) x2) x3</span><br></pre></td></tr></table></figure><p>可以看出 f (f a x1) x2 其实就是 foldl f a [x1, x2]<br>而且因此，foldl在计算时最外层需要找到x3，这样如果xs是一个无穷列表，那么将无法计算，陷入无穷。所以foldl虽然看起来从左边取值，但是函数需要从右侧展开，并不适用于无穷列表</p><h4 id="foldr"><a href="#foldr" class="headerlink" title="foldr"></a>foldr</h4><p>右折叠，每次从列表最右侧取出一个值，和accumulator一起传入二元函数，并且accumulator在右边为第二个参数，如：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">foldr</span> f a xs</span><br></pre></td></tr></table></figure><p>它的结果计算过程为</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; foldr f a [x1, x2, x3]</span><br><span class="line">[<span class="number">1.</span>] a = f x3 a</span><br><span class="line">[<span class="number">2.</span>] a = f x2 a = f x2 (f x3 a)</span><br><span class="line">[<span class="number">3.</span>] a = f x1 a = f x1 (f x2 (f x3 a))</span><br></pre></td></tr></table></figure><p>从中可以看出 f x2 (f x3 a) 就是 foldr f a [x2, x3]<br>因此可以使用递归来写一个和foldr效果一样的函数:</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">foldr&#x27;</span> :: (a -&gt; b -&gt; b) -&gt; b -&gt; [a] -&gt; b</span><br><span class="line"><span class="title">foldr&#x27;</span> _ x [] = x</span><br><span class="line"><span class="title">foldr&#x27;</span> f a (x:xs) = f x (foldr&#x27; f a xs)</span><br></pre></td></tr></table></figure><p>也可以看出，最外层计算时只需要x1并且向下递归，并不会接触到列表末尾，因此可以用于无穷列表。foldr即使看上去从右边取值，但是要从左开始展开，可以用于无穷列表</p><p>例如：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; foldr (||) <span class="type">False</span> (repeat <span class="type">True</span>)</span><br><span class="line"><span class="type">True</span>    <span class="comment">-- 由于逻辑运算存在短路，计算值全应为True，所以直接返回了</span></span><br><span class="line"><span class="title">ghci</span>&gt; foldl (||) <span class="type">False</span> (repeat <span class="type">True</span>)</span><br><span class="line"><span class="comment">-- 这里什么都不会发生，直到电脑内存被爆掉</span></span><br><span class="line"><span class="comment">-- 因为函数刚开始就需要列表最右侧的值，所以在不断计算这个无穷列表</span></span><br></pre></td></tr></table></figure><h4 id="scanl和scanr"><a href="#scanl和scanr" class="headerlink" title="scanl和scanr"></a>scanl和scanr</h4><p>scan类似fold，只是将中间得到的每一个值都添加进一个列表中并返回这个列表<br>scanl则向右延伸这个列表，scanr则向左延伸这个列表<br>但是它和fold恰恰相反，scanl能用于无穷列表，而scanr不能</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; scanr f a [x1, x2, x3]</span><br><span class="line">[<span class="number">1.</span>] 最右侧元素(<span class="number">-1</span> <span class="keyword">in</span> python) : a</span><br><span class="line">[<span class="number">2.</span>] 右侧第二个元素(<span class="number">-2</span>) : f x3 a</span><br><span class="line">[<span class="number">3.</span>] 右侧第三个元素(<span class="number">-3</span>) : f x2 (f x3 a)</span><br><span class="line">[<span class="number">4.</span>] 右侧第四个元素(<span class="number">-4</span>) : f x1 (f x2 (f x3 a))</span><br></pre></td></tr></table></figure><p>可以看出 f x2 (f x3 a) 是 foldr f a [x2, x3]，也是 scanr f a [x2, x3] 的第一个元素<br>因此可以用递归来写一个和scanr效果一样的函数：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">scanr&#x27;</span> :: (a -&gt; b -&gt; b) -&gt; b -&gt; [a] -&gt; [b]</span><br><span class="line"><span class="title">scanr&#x27;</span> _ x [] = [x]</span><br><span class="line"><span class="comment">-- scanr&#x27; f a (x:xs) = f x (foldr f a xs) : scanr&#x27; f a xs</span></span><br><span class="line"><span class="title">scanr&#x27;</span> f a (x:xs) = f x q : qs</span><br><span class="line">                    <span class="keyword">where</span> qs@(q:_) = scanr&#x27; f a xs</span><br></pre></td></tr></table></figure><p>scanl也是同理：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">scanl&#x27;</span> :: (b -&gt; a -&gt; b) -&gt; b -&gt; [a] -&gt; [b]</span><br><span class="line"><span class="title">scanl&#x27;</span> _ x [] = [x]</span><br><span class="line"><span class="title">scanl&#x27;</span> f a (x:xs) = a : scanl&#x27; f (f a x) xs</span><br></pre></td></tr></table></figure><p>也可以看出，scanr返回的列表的第一个元素是最后添加进去的，所以它无法用于无穷列表。而scanl返回的列表中的元素是从左到右依次添加，可以用于无穷列表截取前一部分结果：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; take <span class="number">10</span> (scanl (+) <span class="number">0</span> [<span class="number">1.</span>.])</span><br><span class="line">[<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">21</span>,<span class="number">28</span>,<span class="number">36</span>,<span class="number">45</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; take <span class="number">10</span> (scanr (+) <span class="number">0</span> [<span class="number">1.</span>.])</span><br><span class="line">[*** <span class="type">Exception</span>: stack overflow</span><br></pre></td></tr></table></figure><h4 id="使用foldr编写foldl"><a href="#使用foldr编写foldl" class="headerlink" title="使用foldr编写foldl"></a>使用foldr编写foldl</h4><p>pdcxs还给我介绍了一个神奇的操作，用foldl来定义foldr：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">foldl&#x27;</span> f z xs = foldr (\x g y -&gt; g (f y x)) id xs z</span><br></pre></td></tr></table></figure><p>它利用 foldr (\x g y -&gt; g (f y x)) id xs 生成一个函数，作用于z得到结果。</p><p>先来看一下foldr的类型：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">foldr</span> :: <span class="type">Foldable</span> t =&gt; (a -&gt; b -&gt; b) -&gt; b -&gt; t a -&gt; b</span><br><span class="line"><span class="comment">-- 可以看成 (a -&gt; b -&gt; b) -&gt; b -&gt; [a] -&gt; b</span></span><br></pre></td></tr></table></figure><p>但是在这个例子中，类型b并不是一个数字，而是一个函数(b -&gt; b)。</p><p>所以这里foldr的类型可以写成：</p><p style="text-align: center;">(a -> (b -> b) -> (b -> b)) -> (b -> b) -> [a] -> (b -> b)</p><p>对应于用法 foldr (\x g y -&gt; g (f y x)) id xs ，它返回的值应该是一个函数，类型为 b -&gt; b（后面要作用于z）<br>而xs对应于[a]；id对应于(b -&gt; b)<br>所以 (\x g y -&gt; g (f y x)) 要对应于：</p><p style="text-align: center;">(a -> (b -> b) -> (b -> b))</p><p>因此可以推断出x的类型是a；y的类型是b；而返回的值为一个类型为(b -&gt; b)的函数。</p><p>再看，返回的值是 g (f y x) ，其中 f y x 返回的是一个值，类型为b<br>所以g接收一个类型b，返回一个类型b -&gt; b。即g的类型为：</p><p style="text-align: center;">b -> (b -> b)</p><p>现在根据foldr的定义：</p><p style="text-align: center;">foldr f a (x:xs) = f x (foldr f a xs)</p><p>带入计算一下：</p><blockquote><p>xs即为[x1..xn]，为了方便，用xs’来表示[x2..xn]，用xs’’来表示[x3..xn]</p><p>定义中的f即为(\x g y -&gt; g (f y x))，a即为id</p></blockquote><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  foldr (\x g y -&gt; g (f y x)) id xs z</span><br><span class="line">= (\x g y -&gt; g (f y x)) x1 (foldr (...) id xs&#x27;) z</span><br></pre></td></tr></table></figure><p>写完第一步，可以发现，x1 (foldr (…) id xs’) z 正好分别对应了lambda表达式中的x、g、y。可以将其应用，进一步展开：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  (\x g y -&gt; g (f y x)) x1 (foldr (...) id xs&#x27;) z</span><br><span class="line">= (foldr (...) id xs&#x27;) (f z x1)</span><br></pre></td></tr></table></figure><p>不难发现，原式 (foldr (…) id xs) z 等价于：</p><p style="text-align: center;">(foldr (...) id xs') (f z x1)</p><p>跟着这个思路，xs每次少一个开头的元素x’，z每次变换成为 f z x’<br>因此下一步：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  (\x g y -&gt; g (f y x)) x1 (foldr (...) id xs&#x27;) z</span><br><span class="line">= (foldr (...) id xs&#x27;) (f z x1)</span><br><span class="line">= (foldr (...) id xs&#x27;&#x27;) (f (f z x1) x2)</span><br><span class="line">= (foldr (...) id xs&#x27;&#x27;&#x27;) (f (f (f z x1) x2) x3)</span><br><span class="line">= ...</span><br></pre></td></tr></table></figure><p>可以发现，已经有了规律。那么最终停止时是什么样呢？</p><p>最后到了不能在展开时，最前面的 foldr (…) id xs 已经变成了 foldr (…) id []<br>而根据前面foldr的定义 foldr _ x [] = x ，它应该返回id</p><p>所以最后的结果：<br>(id的定义：id x = x)</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  ...</span><br><span class="line">= (foldr (...) id xs&#x27;) (f z x1)</span><br><span class="line">= (foldr (...) id xs&#x27;&#x27;) (f (f z x1) x2)</span><br><span class="line">= ...</span><br><span class="line">= (foldr (...) id []) (f (.. (f z x1) ..) xn)</span><br><span class="line">= id (f (.. (f z x1) ..) xn)</span><br><span class="line">= f (.. (f z x1) ..) xn</span><br></pre></td></tr></table></figure><p>那么最后这个结果就很熟悉了，它就是 foldl f z xs。<br>所以我们推导出了这个用foldr表示foldl的写法是正确的。</p><h2 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h2><p>Haskell会自动加载Prelude模块（module），如果在GHCi中再加载其他模块，需要使用<code>:m + ...</code>，比如加载Data.List模块：</p><p style="text-align: center;">Prelude> :m + Data.List</p><p>而在hs文件中引入模块，需要使用<code>import</code>语句，下面和python的对比可以便于理解：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Data.List</span><br><span class="line"><span class="comment">-- from Data.List import *</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Data.List (<span class="title">nub</span>, <span class="title">sort</span>)</span><br><span class="line"><span class="comment">-- from Data.List import nub, sort</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Data.List <span class="keyword">hiding</span> (<span class="title">nub</span>)</span><br><span class="line"><span class="comment">-- 从Data.List中引入所有，但不引入nub函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">qualified</span> Data.List</span><br><span class="line"><span class="comment">-- import Data.List</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">qualified</span> Data.List <span class="keyword">as</span> Li</span><br><span class="line"><span class="comment">-- import Data.List as Li</span></span><br></pre></td></tr></table></figure><h3 id="编写Modules"><a href="#编写Modules" class="headerlink" title="编写Modules"></a>编写Modules</h3><p>模块中要包含将要使用的一些函数，像正常的hs文件一样写即可，但头部需要有导出语句（export）。比如一个模块文件名叫<code>ModuleA.hs</code>，那它的头部需要写：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> ModuleA</span><br><span class="line">( <span class="title">functionA</span></span><br><span class="line">, <span class="title">functionB</span></span><br><span class="line">, <span class="title">functionC</span></span><br><span class="line">) <span class="keyword">where</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>而且文件中的所有函数只导出需要使用的即可。比如该文件中还含有functionD供前三个函数内部使用，那么在import ModuleA之后也无法调用functionD。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="http://learnyouahaskell.com/chapters">Learn You a Haskell</a></li><li><a href="https://stackoverflow.com/questions/6172004/writing-foldl-using-foldr">Writing foldl using foldr - StackOverflow</a></li><li><a href="https://blog.csdn.net/WinterShiver/article/details/103308165">Haskell：用foldr定义foldl</a></li></ul><hr><div style="text-align: center;"><p style="font-size: 1.3rem; font-weight: bold;">目录</p><p>#0&nbsp;|&nbsp;<a href="/p/b3ca5c18.html">总章</a>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;<br>#1&nbsp;|&nbsp;<a href="/p/d63b5b5f.html">基础语法与函数</a>&emsp;&emsp;&emsp;<br>#2&nbsp;|&nbsp;<a href="/p/53e482b7.html">高阶函数与模块</a>&emsp;&emsp;&emsp;<br>#3&nbsp;|&nbsp;<a href="/p/369b7e08.html">类型与类型类</a>&emsp;&emsp;&emsp;&emsp;<br>#4&nbsp;|&nbsp;<a href="/p/a5bbe48a.html">输入输出与文件</a>&emsp;&emsp;&emsp;<br>#5&nbsp;|&nbsp;<a href="/p/290ecb74.html">函子、应用函子与单子</a><br>#6&nbsp;|&nbsp;<a href="/p/d4bb2633.html">半群与幺半群</a>&emsp;&emsp;&emsp;&emsp;<br>#7&nbsp;|&nbsp;<a href="/p/68ef8146.html">一些其它类型类</a>&emsp;&emsp;&emsp;<br>#A&nbsp;|&nbsp;<a href="/p/96c32eae.html">Haskell与范畴论</a>&emsp;&nbsp;&thinsp;</p></div>]]></content>
    
    
    <summary type="html">&lt;div style=&quot;display: flex; justify-content: space-between;&quot;&gt;

&lt;p&gt;&lt;a href=&quot;/p/d63b5b5f.html&quot;&gt;&amp;lt; #1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/p/369b7e08.html&quot;&gt;#3 &amp;gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;Higher-Order-Functions&quot;&gt;&lt;a href=&quot;#Higher-Order-Functions&quot; class=&quot;headerlink&quot; title=&quot;Higher Order Functions&quot;&gt;&lt;/a&gt;Higher Order Functions&lt;/h2&gt;&lt;h3 id=&quot;Currying&quot;&gt;&lt;a href=&quot;#Currying&quot; class=&quot;headerlink&quot; title=&quot;Currying&quot;&gt;&lt;/a&gt;Currying&lt;/h3&gt;&lt;p&gt;Haskell中的函数是柯里化（Currying）的，可以看作所有函数都只接收一个参数，而接收两个参数的函数实际上是这个函数接收了第一个参数后返回了一个接收第二个参数的函数，然后用这个函数接收第二个参数，返回最终的结果。比如max函数，它的类型签名是：&lt;/p&gt;</summary>
    
    
    
    
    <category term="Haskell" scheme="https://blog.tonycrane.cc/tags/Haskell/"/>
    
    <category term="笔记" scheme="https://blog.tonycrane.cc/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>「Learn Haskell」#1 基础语法与函数</title>
    <link href="https://blog.tonycrane.cc/p/d63b5b5f.html"/>
    <id>https://blog.tonycrane.cc/p/d63b5b5f.html</id>
    <published>2021-07-07T08:06:40.000Z</published>
    <updated>2021-07-25T04:51:49.962Z</updated>
    
    <content type="html"><![CDATA[<div style="display: flex; justify-content: space-between;"><p><a href="/p/b3ca5c18.html">&lt; #0</a></p><p><a href="/p/53e482b7.html">#2 &gt;</a></p></div><h2 id="基础运算"><a href="#基础运算" class="headerlink" title="基础运算"></a>基础运算</h2><ul><li><code>+ - * / ()</code>：加减乘除</li><li><code>div</code>：整除</li><li><code>mod</code>：取模</li><li><code>True False</code>：布尔值<span id="more"></span></li><li><code>|| &amp;&amp; not</code>：或且非</li><li><code>==</code>：条件判断，相等</li><li><code>/=</code>：条件判断，不等</li></ul><h3 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h3><p>Haskell中调用函数不加括号，先写出函数名，然后逐个列出参数，用空格隔开：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; max <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p>前缀（prefix）函数与中缀（infix）函数转换：</p><ul><li>对前缀函数加<code>``</code>使其变成中缀函数</li><li>对中缀函数加<code>()</code>使其变成前缀函数</li></ul><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; <span class="number">4</span> `div` <span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="title">ghci</span>&gt; <span class="number">1</span> `max` <span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="title">ghci</span>&gt; (+) <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="title">ghci</span>&gt; (||) <span class="type">True</span> <span class="type">False</span></span><br><span class="line"><span class="type">True</span></span><br></pre></td></tr></table></figure><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p>列表是Haskell中很常见的数据类型，和Python中不同，Haskell中的列表中的所有元素必须是同一个类型。</p><p>以下是列表常用的函数：</p><!--more--><ul><li><code>(++)</code> :: [a] -&gt; [a] -&gt; [a]：合并两个列表</li><li><code>(:)</code> :: a -&gt; [a] -&gt; [a]：将单个元素并入列表。[1, 2, 3]是1:2:3:[]的语法糖</li><li><code>(!!)</code> :: [a] -&gt; Int -&gt; a：通过索引取出某个位置上的元素。a !! 1相当于Python中的a[1]</li><li><code>head</code> :: [a] -&gt; a：返回列表的第一个元素</li><li><code>tail</code> :: [a] -&gt; [a]：返回列表中除去第一个元素后的列表（若只有一个元素则返回空列表[]）</li><li><code>last</code> :: [a] -&gt; a：返回列表中的最后一个元素</li><li><code>init</code> :: [a] -&gt; [a]：返回列表中除去最后一个元素后的列表</li><li><code>length</code> :: Foldable t =&gt; t a -&gt; Int：返回列表的长度</li><li><code>null</code> :: Foldable t =&gt; t a -&gt; Bool：返回列表是否为空</li><li><code>reverse</code> :: [a] -&gt; [a]：返回翻转后的列表</li><li><code>take</code> :: Int -&gt; [a] -&gt; [a]：返回列表a的前n个元素的列表(take n a)</li><li><code>drop</code> :: Int -&gt; [a] -&gt; [a]：返回列表a中除去前n个元素后的列表(drop n a)</li><li><code>maximum</code> :: (Foldable t, Ord a) =&gt; t a -&gt; a：返回列表中的最大值</li><li><code>minimum</code> :: (Foldable t, Ord a) =&gt; t a -&gt; a：返回列表中的最小值</li><li><code>sum</code> :: (Foldable t, Num a) =&gt; t a -&gt; a：返回列表中所有元素的和</li><li><code>product</code> :: (Foldable t, Num a) =&gt; t a -&gt; a：返回列表中所有元素的积</li><li><code>elem</code> :: (Foldable t, Eq a) =&gt; t a -&gt; Bool：判断值n是否在列表a中(  <figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">elem</span> n a</span><br><span class="line"><span class="comment">-- 或</span></span><br><span class="line"><span class="title">n</span> `elem` a <span class="comment">--用``包上可以变成中缀函数使用</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Texas-ranges"><a href="#Texas-ranges" class="headerlink" title="Texas ranges"></a>Texas ranges</h3><p>使用<code>..</code>可以表示出范围并自动推导：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; [<span class="number">1</span> .. <span class="number">10</span>]  </span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]  </span><br><span class="line"><span class="title">ghci</span>&gt; [&#x27;a&#x27; .. &#x27;z&#x27;]  </span><br><span class="line"><span class="string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; [&#x27;<span class="type">K&#x27;</span> .. &#x27;<span class="type">Z&#x27;</span>]  </span><br><span class="line"><span class="string">&quot;KLMNOPQRSTUVWXYZ&quot;</span> </span><br><span class="line"><span class="title">ghci</span>&gt; [<span class="number">2</span>, <span class="number">4</span> .. <span class="number">20</span>]  </span><br><span class="line">[<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">12</span>,<span class="number">14</span>,<span class="number">16</span>,<span class="number">18</span>,<span class="number">20</span>]  </span><br><span class="line"><span class="title">ghci</span>&gt; [<span class="number">3</span>, <span class="number">6</span> .. <span class="number">20</span>]  </span><br><span class="line">[<span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">12</span>,<span class="number">15</span>,<span class="number">18</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; [<span class="number">5</span>, <span class="number">4</span> .. <span class="number">1</span>]</span><br><span class="line">[<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>也可以用来生成无穷列表，如[1..]、[1, 3..]。同时也有函数可以生成无穷列表：</p><ul><li><code>cycle</code> :: [a] -&gt; [a]：将原列表不断循环生成无穷列表</li><li><code>repeat</code> :: a -&gt; [a]：将传入的值不断重复生成无穷列表<ul><li><code>replicate</code> :: Int -&gt; a -&gt; [a]：将值a重复n次，返回生成的列表(replicate n a)</li></ul></li></ul><h3 id="List-comprehension"><a href="#List-comprehension" class="headerlink" title="List comprehension"></a>List comprehension</h3><p>Haskell中也有列表推导，形式是一个中括号，左侧为表达式，右侧为变量的范围和约束条件</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; [x * <span class="number">2</span> | x &lt;- [<span class="number">1</span> .. <span class="number">10</span>]]  </span><br><span class="line">[<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">12</span>,<span class="number">14</span>,<span class="number">16</span>,<span class="number">18</span>,<span class="number">20</span>]  </span><br><span class="line"><span class="title">ghci</span>&gt; [x * <span class="number">2</span> | x &lt;- [<span class="number">1</span> .. <span class="number">10</span>], x * <span class="number">2</span> &gt;= <span class="number">12</span>]  </span><br><span class="line">[<span class="number">12</span>,<span class="number">14</span>,<span class="number">16</span>,<span class="number">18</span>,<span class="number">20</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; [ x | x &lt;- [<span class="number">50</span> .. <span class="number">100</span>], x `mod` <span class="number">7</span> == <span class="number">3</span>]  </span><br><span class="line">[<span class="number">52</span>,<span class="number">59</span>,<span class="number">66</span>,<span class="number">73</span>,<span class="number">80</span>,<span class="number">87</span>,<span class="number">94</span>]   </span><br><span class="line"><span class="title">ghci</span>&gt; [x * y | x &lt;- [<span class="number">2</span>, <span class="number">5</span>, <span class="number">10</span>], y &lt;- [<span class="number">8</span>, <span class="number">10</span>, <span class="number">11</span>]]  </span><br><span class="line">[<span class="number">16</span>,<span class="number">20</span>,<span class="number">22</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">55</span>,<span class="number">80</span>,<span class="number">100</span>,<span class="number">110</span>]</span><br></pre></td></tr></table></figure><h2 id="Tuple"><a href="#Tuple" class="headerlink" title="Tuple"></a>Tuple</h2><p>Haskell中的元组可以有不同长度，元素可以有不同类型。并且一个元组的类型由其中所有元素的类型共同决定。它的常用函数：</p><ul><li><code>fst</code> :: (a, b) -&gt; a：返回含有两个元素元组中的第一个元素</li><li><code>snd</code> :: (a, b) -&gt; b：返回含有两个元素元组中的第二个元素</li><li><code>zip</code> :: [a] -&gt; [b] -&gt; [(a, b)]：接收两个列表，返回一个列表，每个元素是依次将两个列表中元素配对成的二元组</li></ul><h2 id="Syntax-in-Functions"><a href="#Syntax-in-Functions" class="headerlink" title="Syntax in Functions"></a>Syntax in Functions</h2><p>函数可以直接定义：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">plus</span> x y = x + y</span><br></pre></td></tr></table></figure><p>这时Haskell会自动推断函数的类型为(Num a) =&gt; a -&gt; a -&gt; a。但是最好在定义函数前声明函数的类型：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">plus</span> :: (<span class="type">Num</span> a) =&gt; a -&gt; a -&gt; a</span><br><span class="line"><span class="title">plus</span> x y = x + y</span><br></pre></td></tr></table></figure><h3 id="Pattern-matching"><a href="#Pattern-matching" class="headerlink" title="Pattern matching"></a>Pattern matching</h3><p>定义函数时可以使用模式匹配语法。运行时依次将输入与给出的模式相匹配，如果匹配，就执行对应操作；不匹配，就继续与下一个模式相匹配，直到匹配成功，也因此，最后必须要给出一种通用的匹配来接收与给出模式全不匹配的输入。如：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">factorial</span> :: (<span class="type">Integral</span> a) =&gt; a -&gt; a  </span><br><span class="line"><span class="title">factorial</span> <span class="number">0</span> = <span class="number">1</span>  </span><br><span class="line"><span class="title">factorial</span> n = n * factorial (n - <span class="number">1</span>)  </span><br></pre></td></tr></table></figure><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">first</span> :: (a, b, c) -&gt; a  </span><br><span class="line"><span class="title">first</span> (x, _, _) = x  </span><br><span class="line">  </span><br><span class="line"><span class="title">second</span> :: (a, b, c) -&gt; b  </span><br><span class="line"><span class="title">second</span> (_, y, _) = y  </span><br><span class="line">  </span><br><span class="line"><span class="title">third</span> :: (a, b, c) -&gt; c  </span><br><span class="line"><span class="title">third</span> (_, _, z) = z  </span><br></pre></td></tr></table></figure><p>其中<code>_</code>表示任何值，且不关心它的内容，只是用来占位</p><p>列表的(:)操作也可以用来进行模式匹配：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">head&#x27;</span> :: [a] -&gt; a  </span><br><span class="line"><span class="title">head&#x27;</span> [] = error <span class="string">&quot;Can&#x27;t call head on an empty list, dummy!&quot;</span>  </span><br><span class="line"><span class="title">head&#x27;</span> (x:_) = x</span><br><span class="line"></span><br><span class="line"><span class="title">sum&#x27;</span> :: (<span class="type">Num</span> a) =&gt; [a] -&gt; a  </span><br><span class="line"><span class="title">sum&#x27;</span> [] = <span class="number">0</span>  </span><br><span class="line"><span class="title">sum&#x27;</span> (x:xs) = x + sum&#x27; xs  </span><br></pre></td></tr></table></figure><p>但(++)操作不可以用来模式匹配</p><p>在针对列表进行模式匹配时，如果同时需要整个列表、列表的第一个值、列表除第一个值外的内容，可以使用<code>xs@(q:qs)</code>。比如[1, 2, 3]通过<code>xs@(q:qs)</code>匹配后，xs为[1, 2, 3]，q为1，qs为[2, 3]</p><h3 id="Guard-syntax"><a href="#Guard-syntax" class="headerlink" title="Guard syntax"></a>Guard syntax</h3><p>在函数的定义中，也可以使用守卫（guard）语法：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">max&#x27;</span> :: (<span class="type">Ord</span> a) =&gt; a -&gt; a -&gt; a  </span><br><span class="line"><span class="title">max&#x27;</span> a b   </span><br><span class="line">    | a &gt; b     = a  </span><br><span class="line">    | otherwise = b </span><br></pre></td></tr></table></figure><p>先给出传入的参数变量，然后下一行缩进后加|，|后面等号前表示进行的判断，如果为True则返回这个等号后面的值；如果为False则继续判断下一行，直到otherwise</p><h3 id="Case-expressions"><a href="#Case-expressions" class="headerlink" title="Case expressions"></a>Case expressions</h3><p>在函数的定义中，也可以使用case表达式来配合模式匹配使用：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">case</span> expression <span class="keyword">of</span> pattern -&gt; result  </span><br><span class="line">                   pattern -&gt; result</span><br><span class="line">                   ...  </span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">head&#x27;</span> :: [a] -&gt; a  </span><br><span class="line"><span class="title">head&#x27;</span> [] = error <span class="string">&quot;No head for empty lists!&quot;</span>  </span><br><span class="line"><span class="title">head&#x27;</span> (x:_) = x  </span><br><span class="line"><span class="comment">-- 等价于：</span></span><br><span class="line"><span class="title">head&#x27;</span> :: [a] -&gt; a  </span><br><span class="line"><span class="title">head&#x27;</span> xs = <span class="keyword">case</span> xs <span class="keyword">of</span> [] -&gt; error <span class="string">&quot;No head for empty lists!&quot;</span>  </span><br><span class="line">                      (x:_) -&gt; x  </span><br></pre></td></tr></table></figure><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">describeList</span> :: [a] -&gt; <span class="type">String</span>  </span><br><span class="line"><span class="title">describeList</span> xs = <span class="string">&quot;The list is &quot;</span> ++ <span class="keyword">case</span> xs <span class="keyword">of</span> [] -&gt; <span class="string">&quot;empty.&quot;</span>  </span><br><span class="line">                                               [x] -&gt; <span class="string">&quot;a singleton list.&quot;</span>   </span><br><span class="line">                                               xs -&gt; <span class="string">&quot;a longer list.&quot;</span>  </span><br><span class="line"><span class="comment">-- 等价于：</span></span><br><span class="line"><span class="title">describeList</span> :: [a] -&gt; <span class="type">String</span>  </span><br><span class="line"><span class="title">describeList</span> xs = <span class="string">&quot;The list is &quot;</span> ++ what xs  </span><br><span class="line">    <span class="keyword">where</span> what [] = <span class="string">&quot;empty.&quot;</span>  </span><br><span class="line">          what [x] = <span class="string">&quot;a singleton list.&quot;</span>  </span><br><span class="line">          what xs = <span class="string">&quot;a longer list.&quot;</span> </span><br></pre></td></tr></table></figure><h3 id="where"><a href="#where" class="headerlink" title="where"></a>where</h3><p>声明在函数定义中要使用的局部变量，可以使用where关键字：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">nitials</span> :: <span class="type">String</span> -&gt; <span class="type">String</span> -&gt; <span class="type">String</span>  </span><br><span class="line"><span class="title">initials</span> firstname lastname = [f] ++ <span class="string">&quot;. &quot;</span> ++ [l] ++ <span class="string">&quot;.&quot;</span>  </span><br><span class="line">    <span class="keyword">where</span> (f:_) = firstname  </span><br><span class="line">          (l:_) = lastname  </span><br></pre></td></tr></table></figure><p>在where中，也可以使用上面的模式匹配</p><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><p><code>let &lt;bindings&gt; in &lt;expression&gt;</code>语法可以在函数的定义中使用，也可以在普通算式或列表中使用：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">cylinder</span> :: (<span class="type">RealFloat</span> a) =&gt; a -&gt; a -&gt; a  </span><br><span class="line"><span class="title">cylinder</span> r h = </span><br><span class="line">    <span class="keyword">let</span> sideArea = <span class="number">2</span> * pi * r * h  </span><br><span class="line">        topArea = pi * r ^<span class="number">2</span>  </span><br><span class="line">    <span class="keyword">in</span>  sideArea + <span class="number">2</span> * topArea  </span><br></pre></td></tr></table></figure><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; <span class="number">4</span> * (<span class="keyword">let</span> a = <span class="number">9</span> <span class="keyword">in</span> a + <span class="number">1</span>) + <span class="number">2</span>  </span><br><span class="line"><span class="number">42</span> </span><br><span class="line"><span class="title">ghci</span>&gt; [<span class="keyword">let</span> square x = x * x <span class="keyword">in</span> (square <span class="number">5</span>, square <span class="number">3</span>, square <span class="number">2</span>)]  </span><br><span class="line">[(<span class="number">25</span>,<span class="number">9</span>,<span class="number">4</span>)] </span><br></pre></td></tr></table></figure><h3 id="if-statement"><a href="#if-statement" class="headerlink" title="if statement"></a>if statement</h3><p>Haskell中的if语句为：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">if</span> ... <span class="keyword">then</span> ...</span><br><span class="line"><span class="title">else</span> ...</span><br><span class="line"><span class="comment">-- or if ... then ... else ...</span></span><br><span class="line"><span class="comment">-- or</span></span><br><span class="line"><span class="title">if</span> ... <span class="keyword">then</span> ...</span><br><span class="line"><span class="title">else</span> <span class="keyword">if</span> ... <span class="keyword">then</span> ...</span><br><span class="line"><span class="title">else</span> ...</span><br></pre></td></tr></table></figure><p>其中最后一个else无论如何也不可以省去</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="http://learnyouahaskell.com/chapters">Learn You a Haskell</a></li></ul><hr><div style="text-align: center;"><p style="font-size: 1.3rem; font-weight: bold;">目录</p><p>#0&nbsp;|&nbsp;<a href="/p/b3ca5c18.html">总章</a>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;<br>#1&nbsp;|&nbsp;<a href="/p/d63b5b5f.html">基础语法与函数</a>&emsp;&emsp;&emsp;<br>#2&nbsp;|&nbsp;<a href="/p/53e482b7.html">高阶函数与模块</a>&emsp;&emsp;&emsp;<br>#3&nbsp;|&nbsp;<a href="/p/369b7e08.html">类型与类型类</a>&emsp;&emsp;&emsp;&emsp;<br>#4&nbsp;|&nbsp;<a href="/p/a5bbe48a.html">输入输出与文件</a>&emsp;&emsp;&emsp;<br>#5&nbsp;|&nbsp;<a href="/p/290ecb74.html">函子、应用函子与单子</a><br>#6&nbsp;|&nbsp;<a href="/p/d4bb2633.html">半群与幺半群</a>&emsp;&emsp;&emsp;&emsp;<br>#7&nbsp;|&nbsp;<a href="/p/68ef8146.html">一些其它类型类</a>&emsp;&emsp;&emsp;<br>#A&nbsp;|&nbsp;<a href="/p/96c32eae.html">Haskell与范畴论</a>&emsp;&nbsp;&thinsp;</p></div>]]></content>
    
    
    <summary type="html">&lt;div style=&quot;display: flex; justify-content: space-between;&quot;&gt;

&lt;p&gt;&lt;a href=&quot;/p/b3ca5c18.html&quot;&gt;&amp;lt; #0&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/p/53e482b7.html&quot;&gt;#2 &amp;gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h2 id=&quot;基础运算&quot;&gt;&lt;a href=&quot;#基础运算&quot; class=&quot;headerlink&quot; title=&quot;基础运算&quot;&gt;&lt;/a&gt;基础运算&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;+ - * / ()&lt;/code&gt;：加减乘除&lt;/li&gt;
&lt;li&gt;&lt;code&gt;div&lt;/code&gt;：整除&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mod&lt;/code&gt;：取模&lt;/li&gt;
&lt;li&gt;&lt;code&gt;True False&lt;/code&gt;：布尔值&lt;/li&gt;&lt;/ul&gt;</summary>
    
    
    
    
    <category term="Haskell" scheme="https://blog.tonycrane.cc/tags/Haskell/"/>
    
    <category term="笔记" scheme="https://blog.tonycrane.cc/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>「Learn Haskell」#0 总章</title>
    <link href="https://blog.tonycrane.cc/p/b3ca5c18.html"/>
    <id>https://blog.tonycrane.cc/p/b3ca5c18.html</id>
    <published>2021-06-21T10:07:58.000Z</published>
    <updated>2021-07-25T05:09:10.893Z</updated>
    
    <content type="html"><![CDATA[<p style="text-align: center;">学习一门新语言之Haskell</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前一直很好奇函数式编程，觉得Haskell挺有意思的，想学学<br>现在高考完放假了，可以有时间具体学一学了<br>这里没有Haskell的教程，只有我在学习Haskell时写下的笔记</p><span id="more"></span><div style="text-align: center;"><p style="font-size: 1.3rem; font-weight: bold;">目录</p><p>#0&nbsp;|&nbsp;<a href="/p/b3ca5c18.html">总章</a>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;<br>#1&nbsp;|&nbsp;<a href="/p/d63b5b5f.html">基础语法与函数</a>&emsp;&emsp;&emsp;<br>#2&nbsp;|&nbsp;<a href="/p/53e482b7.html">高阶函数与模块</a>&emsp;&emsp;&emsp;<br>#3&nbsp;|&nbsp;<a href="/p/369b7e08.html">类型与类型类</a>&emsp;&emsp;&emsp;&emsp;<br>#4&nbsp;|&nbsp;<a href="/p/a5bbe48a.html">输入输出与文件</a>&emsp;&emsp;&emsp;<br>#5&nbsp;|&nbsp;<a href="/p/290ecb74.html">函子、应用函子与单子</a><br>#6&nbsp;|&nbsp;<a href="/p/d4bb2633.html">半群与幺半群</a>&emsp;&emsp;&emsp;&emsp;<br>#7&nbsp;|&nbsp;<a href="/p/68ef8146.html">一些其它类型类</a>&emsp;&emsp;&emsp;<br>#A&nbsp;|&nbsp;<a href="/p/96c32eae.html">Haskell与范畴论</a>&emsp;&nbsp;&thinsp;</p></div><h2 id="基础运算"><a href="#基础运算" class="headerlink" title="基础运算"></a>基础运算</h2><ul><li><code>+ - * / ()</code>：加减乘除</li><li><code>div</code>：整除</li><li><code>mod</code>：取模</li><li><code>True False</code>：布尔值</li><li><code>|| &amp;&amp; not</code>：或且非</li><li><code>==</code>：条件判断，相等</li><li><code>/=</code>：条件判断，不等</li></ul><h3 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h3><p>Haskell中调用函数不加括号，先写出函数名，然后逐个列出参数，用空格隔开：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; max <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p>前缀（prefix）函数与中缀（infix）函数转换：</p><ul><li>对前缀函数加<code>``</code>使其变成中缀函数</li><li>对中缀函数加<code>()</code>使其变成前缀函数</li></ul><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; <span class="number">4</span> `div` <span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="title">ghci</span>&gt; <span class="number">1</span> `max` <span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="title">ghci</span>&gt; (+) <span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="title">ghci</span>&gt; (||) <span class="type">True</span> <span class="type">False</span></span><br><span class="line"><span class="type">True</span></span><br></pre></td></tr></table></figure><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p>列表是Haskell中很常见的数据类型，和Python中不同，Haskell中的列表中的所有元素必须是同一个类型。</p><p>以下是列表常用的函数：</p><ul><li><code>(++)</code> :: [a] -&gt; [a] -&gt; [a]：合并两个列表</li><li><code>(:)</code> :: a -&gt; [a] -&gt; [a]：将单个元素并入列表。[1, 2, 3]是1:2:3:[]的语法糖</li><li><code>(!!)</code> :: [a] -&gt; Int -&gt; a：通过索引取出某个位置上的元素。a !! 1相当于Python中的a[1]</li><li><code>head</code> :: [a] -&gt; a：返回列表的第一个元素</li><li><code>tail</code> :: [a] -&gt; [a]：返回列表中除去第一个元素后的列表（若只有一个元素则返回空列表[]）</li><li><code>last</code> :: [a] -&gt; a：返回列表中的最后一个元素</li><li><code>init</code> :: [a] -&gt; [a]：返回列表中除去最后一个元素后的列表</li><li><code>length</code> :: Foldable t =&gt; t a -&gt; Int：返回列表的长度</li><li><code>null</code> :: Foldable t =&gt; t a -&gt; Bool：返回列表是否为空</li><li><code>reverse</code> :: [a] -&gt; [a]：返回翻转后的列表</li><li><code>take</code> :: Int -&gt; [a] -&gt; [a]：返回列表a的前n个元素的列表(take n a)</li><li><code>drop</code> :: Int -&gt; [a] -&gt; [a]：返回列表a中除去前n个元素后的列表(drop n a)</li><li><code>maximum</code> :: (Foldable t, Ord a) =&gt; t a -&gt; a：返回列表中的最大值</li><li><code>minimum</code> :: (Foldable t, Ord a) =&gt; t a -&gt; a：返回列表中的最小值</li><li><code>sum</code> :: (Foldable t, Num a) =&gt; t a -&gt; a：返回列表中所有元素的和</li><li><code>product</code> :: (Foldable t, Num a) =&gt; t a -&gt; a：返回列表中所有元素的积</li><li><code>elem</code> :: (Foldable t, Eq a) =&gt; t a -&gt; Bool：判断值n是否在列表a中(  <figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">elem</span> n a</span><br><span class="line"><span class="comment">-- 或</span></span><br><span class="line"><span class="title">n</span> `elem` a <span class="comment">--用``包上可以变成中缀函数使用</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Texas-ranges"><a href="#Texas-ranges" class="headerlink" title="Texas ranges"></a>Texas ranges</h3><p>使用<code>..</code>可以表示出范围并自动推导：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; [<span class="number">1</span> .. <span class="number">10</span>]  </span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]  </span><br><span class="line"><span class="title">ghci</span>&gt; [&#x27;a&#x27; .. &#x27;z&#x27;]  </span><br><span class="line"><span class="string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; [&#x27;<span class="type">K&#x27;</span> .. &#x27;<span class="type">Z&#x27;</span>]  </span><br><span class="line"><span class="string">&quot;KLMNOPQRSTUVWXYZ&quot;</span> </span><br><span class="line"><span class="title">ghci</span>&gt; [<span class="number">2</span>, <span class="number">4</span> .. <span class="number">20</span>]  </span><br><span class="line">[<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">12</span>,<span class="number">14</span>,<span class="number">16</span>,<span class="number">18</span>,<span class="number">20</span>]  </span><br><span class="line"><span class="title">ghci</span>&gt; [<span class="number">3</span>, <span class="number">6</span> .. <span class="number">20</span>]  </span><br><span class="line">[<span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">12</span>,<span class="number">15</span>,<span class="number">18</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; [<span class="number">5</span>, <span class="number">4</span> .. <span class="number">1</span>]</span><br><span class="line">[<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>也可以用来生成无穷列表，如[1..]、[1, 3..]。同时也有函数可以生成无穷列表：</p><ul><li><code>cycle</code> :: [a] -&gt; [a]：将原列表不断循环生成无穷列表</li><li><code>repeat</code> :: a -&gt; [a]：将传入的值不断重复生成无穷列表<ul><li><code>replicate</code> :: Int -&gt; a -&gt; [a]：将值a重复n次，返回生成的列表(replicate n a)</li></ul></li></ul><h3 id="List-comprehension"><a href="#List-comprehension" class="headerlink" title="List comprehension"></a>List comprehension</h3><p>Haskell中也有列表推导，形式是一个中括号，左侧为表达式，右侧为变量的范围和约束条件</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; [x * <span class="number">2</span> | x &lt;- [<span class="number">1</span> .. <span class="number">10</span>]]  </span><br><span class="line">[<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">12</span>,<span class="number">14</span>,<span class="number">16</span>,<span class="number">18</span>,<span class="number">20</span>]  </span><br><span class="line"><span class="title">ghci</span>&gt; [x * <span class="number">2</span> | x &lt;- [<span class="number">1</span> .. <span class="number">10</span>], x * <span class="number">2</span> &gt;= <span class="number">12</span>]  </span><br><span class="line">[<span class="number">12</span>,<span class="number">14</span>,<span class="number">16</span>,<span class="number">18</span>,<span class="number">20</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; [ x | x &lt;- [<span class="number">50</span> .. <span class="number">100</span>], x `mod` <span class="number">7</span> == <span class="number">3</span>]  </span><br><span class="line">[<span class="number">52</span>,<span class="number">59</span>,<span class="number">66</span>,<span class="number">73</span>,<span class="number">80</span>,<span class="number">87</span>,<span class="number">94</span>]   </span><br><span class="line"><span class="title">ghci</span>&gt; [x * y | x &lt;- [<span class="number">2</span>, <span class="number">5</span>, <span class="number">10</span>], y &lt;- [<span class="number">8</span>, <span class="number">10</span>, <span class="number">11</span>]]  </span><br><span class="line">[<span class="number">16</span>,<span class="number">20</span>,<span class="number">22</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">55</span>,<span class="number">80</span>,<span class="number">100</span>,<span class="number">110</span>]</span><br></pre></td></tr></table></figure><h2 id="Tuple"><a href="#Tuple" class="headerlink" title="Tuple"></a>Tuple</h2><p>Haskell中的元组可以有不同长度，元素可以有不同类型。并且一个元组的类型由其中所有元素的类型共同决定。它的常用函数：</p><ul><li><code>fst</code> :: (a, b) -&gt; a：返回含有两个元素元组中的第一个元素</li><li><code>snd</code> :: (a, b) -&gt; b：返回含有两个元素元组中的第二个元素</li><li><code>zip</code> :: [a] -&gt; [b] -&gt; [(a, b)]：接收两个列表，返回一个列表，每个元素是依次将两个列表中元素配对成的二元组</li></ul><h2 id="Syntax-in-Functions"><a href="#Syntax-in-Functions" class="headerlink" title="Syntax in Functions"></a>Syntax in Functions</h2><p>函数可以直接定义：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">plus</span> x y = x + y</span><br></pre></td></tr></table></figure><p>这时Haskell会自动推断函数的类型为(Num a) =&gt; a -&gt; a -&gt; a。但是最好在定义函数前声明函数的类型：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">plus</span> :: (<span class="type">Num</span> a) =&gt; a -&gt; a -&gt; a</span><br><span class="line"><span class="title">plus</span> x y = x + y</span><br></pre></td></tr></table></figure><h3 id="Pattern-matching"><a href="#Pattern-matching" class="headerlink" title="Pattern matching"></a>Pattern matching</h3><p>定义函数时可以使用模式匹配语法。运行时依次将输入与给出的模式相匹配，如果匹配，就执行对应操作；不匹配，就继续与下一个模式相匹配，直到匹配成功，也因此，最后必须要给出一种通用的匹配来接收与给出模式全不匹配的输入。如：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">factorial</span> :: (<span class="type">Integral</span> a) =&gt; a -&gt; a  </span><br><span class="line"><span class="title">factorial</span> <span class="number">0</span> = <span class="number">1</span>  </span><br><span class="line"><span class="title">factorial</span> n = n * factorial (n - <span class="number">1</span>)  </span><br></pre></td></tr></table></figure><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">first</span> :: (a, b, c) -&gt; a  </span><br><span class="line"><span class="title">first</span> (x, _, _) = x  </span><br><span class="line">  </span><br><span class="line"><span class="title">second</span> :: (a, b, c) -&gt; b  </span><br><span class="line"><span class="title">second</span> (_, y, _) = y  </span><br><span class="line">  </span><br><span class="line"><span class="title">third</span> :: (a, b, c) -&gt; c  </span><br><span class="line"><span class="title">third</span> (_, _, z) = z  </span><br></pre></td></tr></table></figure><p>其中<code>_</code>表示任何值，且不关心它的内容，只是用来占位</p><p>列表的(:)操作也可以用来进行模式匹配：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">head&#x27;</span> :: [a] -&gt; a  </span><br><span class="line"><span class="title">head&#x27;</span> [] = error <span class="string">&quot;Can&#x27;t call head on an empty list, dummy!&quot;</span>  </span><br><span class="line"><span class="title">head&#x27;</span> (x:_) = x</span><br><span class="line"></span><br><span class="line"><span class="title">sum&#x27;</span> :: (<span class="type">Num</span> a) =&gt; [a] -&gt; a  </span><br><span class="line"><span class="title">sum&#x27;</span> [] = <span class="number">0</span>  </span><br><span class="line"><span class="title">sum&#x27;</span> (x:xs) = x + sum&#x27; xs  </span><br></pre></td></tr></table></figure><p>但(++)操作不可以用来模式匹配</p><p>在针对列表进行模式匹配时，如果同时需要整个列表、列表的第一个值、列表除第一个值外的内容，可以使用<code>xs@(q:qs)</code>。比如[1, 2, 3]通过<code>xs@(q:qs)</code>匹配后，xs为[1, 2, 3]，q为1，qs为[2, 3]</p><h3 id="Guard-syntax"><a href="#Guard-syntax" class="headerlink" title="Guard syntax"></a>Guard syntax</h3><p>在函数的定义中，也可以使用守卫（guard）语法：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">max&#x27;</span> :: (<span class="type">Ord</span> a) =&gt; a -&gt; a -&gt; a  </span><br><span class="line"><span class="title">max&#x27;</span> a b   </span><br><span class="line">    | a &gt; b     = a  </span><br><span class="line">    | otherwise = b </span><br></pre></td></tr></table></figure><p>先给出传入的参数变量，然后下一行缩进后加|，|后面等号前表示进行的判断，如果为True则返回这个等号后面的值；如果为False则继续判断下一行，直到otherwise</p><h3 id="Case-expressions"><a href="#Case-expressions" class="headerlink" title="Case expressions"></a>Case expressions</h3><p>在函数的定义中，也可以使用case表达式来配合模式匹配使用：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">case</span> expression <span class="keyword">of</span> pattern -&gt; result  </span><br><span class="line">                   pattern -&gt; result</span><br><span class="line">                   ...  </span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">head&#x27;</span> :: [a] -&gt; a  </span><br><span class="line"><span class="title">head&#x27;</span> [] = error <span class="string">&quot;No head for empty lists!&quot;</span>  </span><br><span class="line"><span class="title">head&#x27;</span> (x:_) = x  </span><br><span class="line"><span class="comment">-- 等价于：</span></span><br><span class="line"><span class="title">head&#x27;</span> :: [a] -&gt; a  </span><br><span class="line"><span class="title">head&#x27;</span> xs = <span class="keyword">case</span> xs <span class="keyword">of</span> [] -&gt; error <span class="string">&quot;No head for empty lists!&quot;</span>  </span><br><span class="line">                      (x:_) -&gt; x  </span><br></pre></td></tr></table></figure><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">describeList</span> :: [a] -&gt; <span class="type">String</span>  </span><br><span class="line"><span class="title">describeList</span> xs = <span class="string">&quot;The list is &quot;</span> ++ <span class="keyword">case</span> xs <span class="keyword">of</span> [] -&gt; <span class="string">&quot;empty.&quot;</span>  </span><br><span class="line">                                               [x] -&gt; <span class="string">&quot;a singleton list.&quot;</span>   </span><br><span class="line">                                               xs -&gt; <span class="string">&quot;a longer list.&quot;</span>  </span><br><span class="line"><span class="comment">-- 等价于：</span></span><br><span class="line"><span class="title">describeList</span> :: [a] -&gt; <span class="type">String</span>  </span><br><span class="line"><span class="title">describeList</span> xs = <span class="string">&quot;The list is &quot;</span> ++ what xs  </span><br><span class="line">    <span class="keyword">where</span> what [] = <span class="string">&quot;empty.&quot;</span>  </span><br><span class="line">          what [x] = <span class="string">&quot;a singleton list.&quot;</span>  </span><br><span class="line">          what xs = <span class="string">&quot;a longer list.&quot;</span> </span><br></pre></td></tr></table></figure><h3 id="where"><a href="#where" class="headerlink" title="where"></a>where</h3><p>声明在函数定义中要使用的局部变量，可以使用where关键字：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">nitials</span> :: <span class="type">String</span> -&gt; <span class="type">String</span> -&gt; <span class="type">String</span>  </span><br><span class="line"><span class="title">initials</span> firstname lastname = [f] ++ <span class="string">&quot;. &quot;</span> ++ [l] ++ <span class="string">&quot;.&quot;</span>  </span><br><span class="line">    <span class="keyword">where</span> (f:_) = firstname  </span><br><span class="line">          (l:_) = lastname  </span><br></pre></td></tr></table></figure><p>在where中，也可以使用上面的模式匹配</p><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><p><code>let &lt;bindings&gt; in &lt;expression&gt;</code>语法可以在函数的定义中使用，也可以在普通算式或列表中使用：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">cylinder</span> :: (<span class="type">RealFloat</span> a) =&gt; a -&gt; a -&gt; a  </span><br><span class="line"><span class="title">cylinder</span> r h = </span><br><span class="line">    <span class="keyword">let</span> sideArea = <span class="number">2</span> * pi * r * h  </span><br><span class="line">        topArea = pi * r ^<span class="number">2</span>  </span><br><span class="line">    <span class="keyword">in</span>  sideArea + <span class="number">2</span> * topArea  </span><br></pre></td></tr></table></figure><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; <span class="number">4</span> * (<span class="keyword">let</span> a = <span class="number">9</span> <span class="keyword">in</span> a + <span class="number">1</span>) + <span class="number">2</span>  </span><br><span class="line"><span class="number">42</span> </span><br><span class="line"><span class="title">ghci</span>&gt; [<span class="keyword">let</span> square x = x * x <span class="keyword">in</span> (square <span class="number">5</span>, square <span class="number">3</span>, square <span class="number">2</span>)]  </span><br><span class="line">[(<span class="number">25</span>,<span class="number">9</span>,<span class="number">4</span>)] </span><br></pre></td></tr></table></figure><h3 id="if-statement"><a href="#if-statement" class="headerlink" title="if statement"></a>if statement</h3><p>Haskell中的if语句为：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">if</span> ... <span class="keyword">then</span> ...</span><br><span class="line"><span class="title">else</span> ...</span><br><span class="line"><span class="comment">-- or if ... then ... else ...</span></span><br><span class="line"><span class="comment">-- or</span></span><br><span class="line"><span class="title">if</span> ... <span class="keyword">then</span> ...</span><br><span class="line"><span class="title">else</span> <span class="keyword">if</span> ... <span class="keyword">then</span> ...</span><br><span class="line"><span class="title">else</span> ...</span><br></pre></td></tr></table></figure><p>其中最后一个else无论如何也不可以省去</p><h2 id="Higher-Order-Functions"><a href="#Higher-Order-Functions" class="headerlink" title="Higher Order Functions"></a>Higher Order Functions</h2><h3 id="Currying"><a href="#Currying" class="headerlink" title="Currying"></a>Currying</h3><p>Haskell中的函数是柯里化（Currying）的，可以看作所有函数都只接收一个参数，而接收两个参数的函数实际上是这个函数接收了第一个参数后返回了一个接收第二个参数的函数，然后用这个函数接收第二个参数，返回最终的结果。比如max函数，它的类型签名是：</p><p style="text-align: center;">max :: Ord a => a -> a -> a</p><p>可以看成a -&gt; (a -&gt; a)，即接收一个参数，返回一个类型为a -&gt; a的函数。比如max 1的类型签名是：</p><p style="text-align: center;">max 1 :: (Ord a, Num a) => a -> a</p><p>因此max 1 2，也就等同于(max 1) 2，即将函数max 1应用在数字2上</p><p>同时，函数也可以接收函数作为参数，参数有函数的函数就被称为高阶函数（Higher Order Functions）</p><h3 id="一些高阶函数"><a href="#一些高阶函数" class="headerlink" title="一些高阶函数"></a>一些高阶函数</h3><h4 id="zipWith"><a href="#zipWith" class="headerlink" title="zipWith"></a>zipWith</h4><p style="text-align: center;">zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]</p><p>第一个参数为一个函数，然后接收两个列表，将其对应元素传入接收的函数中，得到的结果组成一个新的列表。如果两个传入的列表长度不同，以最短的列表为准，长列表中超出的元素省略。用例：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; zipWith (+) [<span class="number">4</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>] [<span class="number">2</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">3</span>]  </span><br><span class="line">[<span class="number">6</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">9</span>]  </span><br><span class="line"><span class="title">ghci</span>&gt; zipWith max [<span class="number">6</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>] [<span class="number">7</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>]  </span><br><span class="line">[<span class="number">7</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>]  </span><br></pre></td></tr></table></figure><h4 id="flip"><a href="#flip" class="headerlink" title="flip"></a>flip</h4><p style="text-align: center;">flip :: (a -> b -> c) -> b -> a -> c</p><p>flip函数接收一个二元函数，返回一个新的二元函数，将其输入的两个参数顺序反过来：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; zip [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>] <span class="string">&quot;hello&quot;</span></span><br><span class="line">[(<span class="number">1</span>,&#x27;h&#x27;),(<span class="number">2</span>,&#x27;e&#x27;),(<span class="number">3</span>,&#x27;l&#x27;),(<span class="number">4</span>,&#x27;l&#x27;),(<span class="number">5</span>,&#x27;o&#x27;)]</span><br><span class="line"><span class="title">ghci</span>&gt; flip zip [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>] <span class="string">&quot;hello&quot;</span>  </span><br><span class="line">[(&#x27;h&#x27;,<span class="number">1</span>),(&#x27;e&#x27;,<span class="number">2</span>),(&#x27;l&#x27;,<span class="number">3</span>),(&#x27;l&#x27;,<span class="number">4</span>),(&#x27;o&#x27;,<span class="number">5</span>)]</span><br></pre></td></tr></table></figure><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><p style="text-align: center;">map :: (a -> b) -> [a] -> [b]</p><p>map函数接收一个函数f和一个列表a，将函数f应用在列表a的每个元素中，并返回得到的所有结果组成的列表b：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; map (+<span class="number">3</span>) [<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">6</span>]  </span><br><span class="line">[<span class="number">4</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">9</span>]  </span><br></pre></td></tr></table></figure><h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><p style="text-align: center;">filter :: (a -> Bool) -> [a] -> [a]</p><p>filter函数接收一个函数f和一个列表a，将列表a中的每个元素传入函数f中，如果结果为True就保留，结果为False就抛弃，返回所有保留的元素组成的新列表：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; filter even [<span class="number">1.</span><span class="number">.10</span>]  </span><br><span class="line">[<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">10</span>] </span><br></pre></td></tr></table></figure><h4 id="takeWhile"><a href="#takeWhile" class="headerlink" title="takeWhile"></a>takeWhile</h4><p style="text-align: center;">takeWhile :: (a -> Bool) -> [a] -> [a]</p><p>takeWhile函数接收一个函数f和一个列表a，将列表a中从左向右每个元素传入函数f，直到结果为False停止，返回停止前传入的所有元素组成的新列表：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; takeWhile (/=&#x27; &#x27;) <span class="string">&quot;word1 word2&quot;</span></span><br><span class="line"><span class="string">&quot;word1&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Function-application"><a href="#Function-application" class="headerlink" title="Function application"></a>Function application</h3><p>函数应用可以使用<code>$</code>，<code>$</code>是一个函数，它的类型是：</p><p style="text-align: center;">($) :: (a -> b) -> a -> b</p><p>它可以改变函数结合优先级，将左侧函数应用于全部右侧内容上，相当于给右侧整体加上了括号。否则函数默认左结合，会依次向右应用而不会应用在整体上。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">f</span> $ g x</span><br><span class="line"><span class="comment">-- 等价于</span></span><br><span class="line"><span class="title">f</span> (g x)</span><br><span class="line"><span class="comment">-----</span></span><br><span class="line"><span class="title">f</span> g x</span><br><span class="line"><span class="comment">-- 等价于</span></span><br><span class="line">(f g) x</span><br></pre></td></tr></table></figure><h3 id="Function-Composition"><a href="#Function-Composition" class="headerlink" title="Function Composition"></a>Function Composition</h3><p>函数复合可以使用<code>.</code>，<code>.</code>也是一个函数，它的类型是：</p><p style="text-align: center;">(.) :: (b -> c) -> (a -> b) -> a -> c</p><p>定义是：</p><p style="text-align: center;">f . g = \x -> f (g x)</p><p>但是函数复合的优先级要比函数执行低，比如：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">sum</span> . replicate <span class="number">5</span> . max <span class="number">6.7</span> <span class="number">8.9</span></span><br></pre></td></tr></table></figure><p>会先执行max 6.7 8.9并返回8.9，然后将sum、replicate 5、8.9复合，但两个函数无法和一个值(8.9)复合，所以会抛出异常。因此要使用<code>$</code>来规定先复合再执行：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">sum</span> . replicate <span class="number">5</span> . max <span class="number">6.7</span> $ <span class="number">8.9</span></span><br></pre></td></tr></table></figure><h3 id="lambda"><a href="#lambda" class="headerlink" title="lambda"></a>lambda</h3><p>Haskell语言中的lambda表达式是用<code>\</code>来表示的（因为看着像$\mathtt{\lambda}$？）<br>具体语法是</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\para1 para2 ... -&gt; return</span><br></pre></td></tr></table></figure><p>“-&gt;”前的 para1 para2 … 是传入参数，单个多个都可以，需要用空格隔开；”-&gt;”后的 return 是计算得到的返回值。一般需要用括号将整个表达式括起来，防止返回值部分一直向右延伸。</p><h3 id="fold和scan"><a href="#fold和scan" class="headerlink" title="fold和scan"></a>fold和scan</h3><p>fold和scan都接收三个参数（一个二元函数，一个初始值accumulator，一个要折叠的列表），fold返回一个值，而scan返回一个列表<br>传入的二元函数<code>f :: a -&gt; b -&gt; b</code>将accumulator和从列表中取出的值一同传入（l则accumulator在左边为第一个参数，r则accumulator在右边为第二个参数）</p><h4 id="foldl"><a href="#foldl" class="headerlink" title="foldl"></a>foldl</h4><p>左折叠，每次从列表最左侧取出一个值，和accumulator一起传入二元函数，并且accumulator在左边为第一个参数，如：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">foldl</span> f a xs</span><br></pre></td></tr></table></figure><p>它的结果计算过程为</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; foldl f a [x1, x2, x3]</span><br><span class="line">[<span class="number">1.</span>] a = f a x1</span><br><span class="line">[<span class="number">2.</span>] a = f a x2 = f (f a x1) x2</span><br><span class="line">[<span class="number">3.</span>] a = f a x3 = f (f (f a x1) x2) x3</span><br></pre></td></tr></table></figure><p>可以看出 f (f a x1) x2 其实就是 foldl f a [x1, x2]<br>而且因此，foldl在计算时最外层需要找到x3，这样如果xs是一个无穷列表，那么将无法计算，陷入无穷。所以foldl虽然看起来从左边取值，但是函数需要从右侧展开，并不适用于无穷列表</p><h4 id="foldr"><a href="#foldr" class="headerlink" title="foldr"></a>foldr</h4><p>右折叠，每次从列表最右侧取出一个值，和accumulator一起传入二元函数，并且accumulator在右边为第二个参数，如：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">foldr</span> f a xs</span><br></pre></td></tr></table></figure><p>它的结果计算过程为</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; foldr f a [x1, x2, x3]</span><br><span class="line">[<span class="number">1.</span>] a = f x3 a</span><br><span class="line">[<span class="number">2.</span>] a = f x2 a = f x2 (f x3 a)</span><br><span class="line">[<span class="number">3.</span>] a = f x1 a = f x1 (f x2 (f x3 a))</span><br></pre></td></tr></table></figure><p>从中可以看出 f x2 (f x3 a) 就是 foldr f a [x2, x3]<br>因此可以使用递归来写一个和foldr效果一样的函数:</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">foldr&#x27;</span> :: (a -&gt; b -&gt; b) -&gt; b -&gt; [a] -&gt; b</span><br><span class="line"><span class="title">foldr&#x27;</span> _ x [] = x</span><br><span class="line"><span class="title">foldr&#x27;</span> f a (x:xs) = f x (foldr&#x27; f a xs)</span><br></pre></td></tr></table></figure><p>也可以看出，最外层计算时只需要x1并且向下递归，并不会接触到列表末尾，因此可以用于无穷列表。foldr即使看上去从右边取值，但是要从左开始展开，可以用于无穷列表</p><p>例如：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; foldr (||) <span class="type">False</span> (repeat <span class="type">True</span>)</span><br><span class="line"><span class="type">True</span>    <span class="comment">-- 由于逻辑运算存在短路，计算值全应为True，所以直接返回了</span></span><br><span class="line"><span class="title">ghci</span>&gt; foldl (||) <span class="type">False</span> (repeat <span class="type">True</span>)</span><br><span class="line"><span class="comment">-- 这里什么都不会发生，直到电脑内存被爆掉</span></span><br><span class="line"><span class="comment">-- 因为函数刚开始就需要列表最右侧的值，所以在不断计算这个无穷列表</span></span><br></pre></td></tr></table></figure><h4 id="scanl和scanr"><a href="#scanl和scanr" class="headerlink" title="scanl和scanr"></a>scanl和scanr</h4><p>scan类似fold，只是将中间得到的每一个值都添加进一个列表中并返回这个列表<br>scanl则向右延伸这个列表，scanr则向左延伸这个列表<br>但是它和fold恰恰相反，scanl能用于无穷列表，而scanr不能</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; scanr f a [x1, x2, x3]</span><br><span class="line">[<span class="number">1.</span>] 最右侧元素(<span class="number">-1</span> <span class="keyword">in</span> python) : a</span><br><span class="line">[<span class="number">2.</span>] 右侧第二个元素(<span class="number">-2</span>) : f x3 a</span><br><span class="line">[<span class="number">3.</span>] 右侧第三个元素(<span class="number">-3</span>) : f x2 (f x3 a)</span><br><span class="line">[<span class="number">4.</span>] 右侧第四个元素(<span class="number">-4</span>) : f x1 (f x2 (f x3 a))</span><br></pre></td></tr></table></figure><p>可以看出 f x2 (f x3 a) 是 foldr f a [x2, x3]，也是 scanr f a [x2, x3] 的第一个元素<br>因此可以用递归来写一个和scanr效果一样的函数：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">scanr&#x27;</span> :: (a -&gt; b -&gt; b) -&gt; b -&gt; [a] -&gt; [b]</span><br><span class="line"><span class="title">scanr&#x27;</span> _ x [] = [x]</span><br><span class="line"><span class="comment">-- scanr&#x27; f a (x:xs) = f x (foldr f a xs) : scanr&#x27; f a xs</span></span><br><span class="line"><span class="title">scanr&#x27;</span> f a (x:xs) = f x q : qs</span><br><span class="line">                    <span class="keyword">where</span> qs@(q:_) = scanr&#x27; f a xs</span><br></pre></td></tr></table></figure><p>scanl也是同理：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">scanl&#x27;</span> :: (b -&gt; a -&gt; b) -&gt; b -&gt; [a] -&gt; [b]</span><br><span class="line"><span class="title">scanl&#x27;</span> _ x [] = [x]</span><br><span class="line"><span class="title">scanl&#x27;</span> f a (x:xs) = a : scanl&#x27; f (f a x) xs</span><br></pre></td></tr></table></figure><p>也可以看出，scanr返回的列表的第一个元素是最后添加进去的，所以它无法用于无穷列表。而scanl返回的列表中的元素是从左到右依次添加，可以用于无穷列表截取前一部分结果：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; take <span class="number">10</span> (scanl (+) <span class="number">0</span> [<span class="number">1.</span>.])</span><br><span class="line">[<span class="number">0</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">21</span>,<span class="number">28</span>,<span class="number">36</span>,<span class="number">45</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; take <span class="number">10</span> (scanr (+) <span class="number">0</span> [<span class="number">1.</span>.])</span><br><span class="line">[*** <span class="type">Exception</span>: stack overflow</span><br></pre></td></tr></table></figure><h4 id="使用foldr编写foldl"><a href="#使用foldr编写foldl" class="headerlink" title="使用foldr编写foldl"></a>使用foldr编写foldl</h4><p>pdcxs还给我介绍了一个神奇的操作，用foldl来定义foldr：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">foldl&#x27;</span> f z xs = foldr (\x g y -&gt; g (f y x)) id xs z</span><br></pre></td></tr></table></figure><p>它利用 foldr (\x g y -&gt; g (f y x)) id xs 生成一个函数，作用于z得到结果。</p><p>先来看一下foldr的类型：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">foldr</span> :: <span class="type">Foldable</span> t =&gt; (a -&gt; b -&gt; b) -&gt; b -&gt; t a -&gt; b</span><br><span class="line"><span class="comment">-- 可以看成 (a -&gt; b -&gt; b) -&gt; b -&gt; [a] -&gt; b</span></span><br></pre></td></tr></table></figure><p>但是在这个例子中，类型b并不是一个数字，而是一个函数(b -&gt; b)。</p><p>所以这里foldr的类型可以写成：</p><p style="text-align: center;">(a -> (b -> b) -> (b -> b)) -> (b -> b) -> [a] -> (b -> b)</p><p>对应于用法 foldr (\x g y -&gt; g (f y x)) id xs ，它返回的值应该是一个函数，类型为 b -&gt; b（后面要作用于z）<br>而xs对应于[a]；id对应于(b -&gt; b)<br>所以 (\x g y -&gt; g (f y x)) 要对应于：</p><p style="text-align: center;">(a -> (b -> b) -> (b -> b))</p><p>因此可以推断出x的类型是a；y的类型是b；而返回的值为一个类型为(b -&gt; b)的函数。</p><p>再看，返回的值是 g (f y x) ，其中 f y x 返回的是一个值，类型为b<br>所以g接收一个类型b，返回一个类型b -&gt; b。即g的类型为：</p><p style="text-align: center;">b -> (b -> b)</p><p>现在根据foldr的定义：</p><p style="text-align: center;">foldr f a (x:xs) = f x (foldr f a xs)</p><p>带入计算一下：</p><blockquote><p>xs即为[x1..xn]，为了方便，用xs’来表示[x2..xn]，用xs’’来表示[x3..xn]</p><p>定义中的f即为(\x g y -&gt; g (f y x))，a即为id</p></blockquote><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  foldr (\x g y -&gt; g (f y x)) id xs z</span><br><span class="line">= (\x g y -&gt; g (f y x)) x1 (foldr (...) id xs&#x27;) z</span><br></pre></td></tr></table></figure><p>写完第一步，可以发现，x1 (foldr (…) id xs’) z 正好分别对应了lambda表达式中的x、g、y。可以将其应用，进一步展开：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  (\x g y -&gt; g (f y x)) x1 (foldr (...) id xs&#x27;) z</span><br><span class="line">= (foldr (...) id xs&#x27;) (f z x1)</span><br></pre></td></tr></table></figure><p>不难发现，原式 (foldr (…) id xs) z 等价于：</p><p style="text-align: center;">(foldr (...) id xs') (f z x1)</p><p>跟着这个思路，xs每次少一个开头的元素x’，z每次变换成为 f z x’<br>因此下一步：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  (\x g y -&gt; g (f y x)) x1 (foldr (...) id xs&#x27;) z</span><br><span class="line">= (foldr (...) id xs&#x27;) (f z x1)</span><br><span class="line">= (foldr (...) id xs&#x27;&#x27;) (f (f z x1) x2)</span><br><span class="line">= (foldr (...) id xs&#x27;&#x27;&#x27;) (f (f (f z x1) x2) x3)</span><br><span class="line">= ...</span><br></pre></td></tr></table></figure><p>可以发现，已经有了规律。那么最终停止时是什么样呢？</p><p>最后到了不能在展开时，最前面的 foldr (…) id xs 已经变成了 foldr (…) id []<br>而根据前面foldr的定义 foldr _ x [] = x ，它应该返回id</p><p>所以最后的结果：<br>(id的定义：id x = x)</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  ...</span><br><span class="line">= (foldr (...) id xs&#x27;) (f z x1)</span><br><span class="line">= (foldr (...) id xs&#x27;&#x27;) (f (f z x1) x2)</span><br><span class="line">= ...</span><br><span class="line">= (foldr (...) id []) (f (.. (f z x1) ..) xn)</span><br><span class="line">= id (f (.. (f z x1) ..) xn)</span><br><span class="line">= f (.. (f z x1) ..) xn</span><br></pre></td></tr></table></figure><p>那么最后这个结果就很熟悉了，它就是 foldl f z xs。<br>所以我们推导出了这个用foldr表示foldl的写法是正确的。</p><h2 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h2><p>Haskell会自动加载Prelude模块（module），如果在GHCi中再加载其他模块，需要使用<code>:m + ...</code>，比如加载Data.List模块：</p><p style="text-align: center;">Prelude> :m + Data.List</p><p>而在hs文件中引入模块，需要使用<code>import</code>语句，下面和python的对比可以便于理解：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Data.List</span><br><span class="line"><span class="comment">-- from Data.List import *</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Data.List (<span class="title">nub</span>, <span class="title">sort</span>)</span><br><span class="line"><span class="comment">-- from Data.List import nub, sort</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Data.List <span class="keyword">hiding</span> (<span class="title">nub</span>)</span><br><span class="line"><span class="comment">-- 从Data.List中引入所有，但不引入nub函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">qualified</span> Data.List</span><br><span class="line"><span class="comment">-- import Data.List</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">qualified</span> Data.List <span class="keyword">as</span> Li</span><br><span class="line"><span class="comment">-- import Data.List as Li</span></span><br></pre></td></tr></table></figure><h3 id="编写Modules"><a href="#编写Modules" class="headerlink" title="编写Modules"></a>编写Modules</h3><p>模块中要包含将要使用的一些函数，像正常的hs文件一样写即可，但头部需要有导出语句（export）。比如一个模块文件名叫<code>ModuleA.hs</code>，那它的头部需要写：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> ModuleA</span><br><span class="line">( <span class="title">functionA</span></span><br><span class="line">, <span class="title">functionB</span></span><br><span class="line">, <span class="title">functionC</span></span><br><span class="line">) <span class="keyword">where</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>而且文件中的所有函数只导出需要使用的即可。比如该文件中还含有functionD供前三个函数内部使用，那么在import ModuleA之后也无法调用functionD。</p><h2 id="Types-amp-Typeclasses"><a href="#Types-amp-Typeclasses" class="headerlink" title="Types &amp; Typeclasses"></a>Types &amp; Typeclasses</h2><h3 id="Types"><a href="#Types" class="headerlink" title="Types"></a>Types</h3><p>Haskell有一个静态类型系统，任何变量、函数都会具有类型，并且有类型判断功能，没给出的类型会自动识别。<br>Type的首字母全为大写，常用的有：</p><ul><li><code>Int</code>：整型，有上下界范围，-2147483647～2147483648</li><li><code>Integer</code>：整数，无界，但是效率比Int低</li><li><code>Float</code>：单精度浮点型</li><li><code>Double</code>：双精度浮点型</li><li><code>Bool</code>：布尔值</li><li><code>Char</code>：字符</li><li><code>String</code>：字符串，等同于<code>[Char]</code></li><li><code>Ording</code>：大小关系，包含LT、EQ、GT，且它们有大小关系 LT &lt; EQ &lt; GT</li></ul><p>列表的类型是由其中元素决定的，并且列表中元素必须是同一类型，所以列表的类型就是其元素类型外加<code>[]</code>。</p><p>元组的类型由其中各个元素的类型共同决定，因为元组中的元素可以是不同类型。如(“abc”, ‘a’, True)的类型是([Char], Char, Bool)。</p><h3 id="Typeclasses"><a href="#Typeclasses" class="headerlink" title="Typeclasses"></a>Typeclasses</h3><p>类型类（Typeclass）是定义一系列功能的接口，如果一个Type属于一个Typeclass的成员，那么它可以实现这个类型类所规定的功能。一个Type也可以属于多个Typeclass<br>Typeclass的首字母也全为大写，常见的有：</p><ul><li><code>Eq</code>：可判断是否相等</li><li><code>Ord</code>：可比较大小</li><li><code>Show</code>：可展示成字符串</li><li><code>Read</code>：可从字符串转换成特定类型</li><li><code>Enum</code>：可枚举（连续），即可以使用pred和succ函数得到前驱和后缀</li><li><code>Bounded</code>: 有上下界，如果元组中所有元素都属于Bounded，那这个元组的类型也属于Bounded</li><li><code>Integral</code>：是整数，包括Int和Integer</li><li><code>RealFloat</code>： 是实浮点数，包括Float和Double</li><li><code>RealFrac</code>：是实分数，包括Float、Double和Ratio（在Data.Ratio模块中）</li><li><code>Floating</code>：是浮点数，包括Float、Double和Complex（在Data.Complex模块中）</li><li><code>Real</code>：是实数，包括Integral和RealFrac的成员</li><li><code>Fractional</code>：是分数，包括RealFrac和Floating的成员</li><li><code>Num</code>：是数字，包括上述所有数字相关的类型</li></ul><h3 id="Type-variables"><a href="#Type-variables" class="headerlink" title="Type variables"></a>Type variables</h3><p>如果查看一个函数的类型，比如<code>head</code>，那么将会返回以下类型：</p><p style="text-align: center;">head :: [a] -> a</p><p>其中的a就是一个类型变量（type variable），它在head中可以属于任何类型，在这里只是表示返回值的类型和输入的列表中的元素的类型相一致。</p><p>在函数的类型表达式其实可以看作$\lambda$表达式，它适用于$\alpha$变换（$\alpha$-conversion）。即a在这里可以指Int、Char等类型，也可以指[Char], (Int, Char), 甚至函数Int -&gt; Int等。</p><p>在大部分函数的类型中，类型变量需要保证是某个Typeclass的成员才能完成操作。比如<code>(==)</code>函数，它需要传入的参数是可判断相等的，即是Eq的成员，那么<code>(==)</code>的类型就是：</p><p style="text-align: center;">(==) :: (Eq a) => a -> a -> Bool</p><p>其中<code>=&gt;</code>前的部分(Eq a)就是类约束（class constraint），它规定了a是Eq的成员，所以<code>(==)</code>函数传入的两个参数都是a类型，且都是Eq的成员，保证了它们之间是可以比较是否相等的。</p><h3 id="定义新Type"><a href="#定义新Type" class="headerlink" title="定义新Type"></a>定义新Type</h3><p>定义一个新的Type需要使用<code>data</code>关键字，比如定义<code>Bool</code>需要使用：</p><p style="text-align: center;">data Bool = False | True</p><p>其中<code>=</code>左侧的部分定义了新类型的名称<code>Bool</code>，右侧的部分叫做值构造器（value constructors），表示了Bool类型的值为False或True。<br>并且名称和值构造器的首字母都需要大写。</p><p>另外，值构造器也是函数，它们可以有参数，叫做项（field）。比如：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">Shape</span> = <span class="type">Circle</span> <span class="type">Float</span> <span class="type">Float</span> <span class="type">Float</span> | <span class="type">Rectangle</span> <span class="type">Float</span> <span class="type">Float</span> <span class="type">Float</span> <span class="type">Float</span>   </span></span><br></pre></td></tr></table></figure><p>它定义了一个新Type叫Shape，值构造器是Circle和Rectangle，Circle接收三个参数都是Float类型，Rectangle接收四个Float类型参数。<br>如果查看Circle的类型，将返回：</p><p style="text-align: center;">Circle :: Float -> Float -> Float -> Shape</p><p>如果想要让它能给直接显示出来，需要让它属于Show类型类。在代码中只需要在结尾加上<code>deriving (Show)</code>:</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">Shape</span> = <span class="type">Circle</span> <span class="type">Float</span> <span class="type">Float</span> <span class="type">Float</span> | <span class="type">Rectangle</span> <span class="type">Float</span> <span class="type">Float</span> <span class="type">Float</span> <span class="type">Float</span> <span class="keyword">deriving</span> (<span class="type">Show</span>)</span></span><br></pre></td></tr></table></figure><p>类型的名称和值构造器名称也可以相同，比如：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">Point</span> = <span class="type">Point</span> <span class="type">Float</span> <span class="type">Float</span> <span class="keyword">deriving</span> (<span class="type">Show</span>)</span></span><br></pre></td></tr></table></figure><h4 id="导出Type"><a href="#导出Type" class="headerlink" title="导出Type"></a>导出Type</h4><p>在文件中定义了新的Type之后，如果在别的文件中将其作为模块导入，则需要先导出。比如文件<code>Shapes.hs</code>中定义了Shape和Point，以及其他的一些函数，那么文件开头需要写：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span> Shapes</span><br><span class="line">( <span class="type">Shape(..)</span></span><br><span class="line">, <span class="type">Point(..)</span></span><br><span class="line">, <span class="title">functionA</span></span><br><span class="line">, <span class="title">functionB</span></span><br><span class="line">) <span class="keyword">where</span></span><br></pre></td></tr></table></figure><p>其中的<code>Shape(..)</code>导出了Shape类型和它所有的值构造器，<code>..</code>代表了它的所有值构造器。因此，<code>Shape(..)</code>相当于<code>Shape (Circle, Rectangle)</code>。</p><p>如果不想要导出值构造器，即不允许使用值构造器的方法来创建Shape类型的变量。那么需要将<code>Shape(..)</code>替换为<code>Shape</code>，这样就只导出了Shape类型，而不导出其值构造器。</p><h4 id="Record-Syntax"><a href="#Record-Syntax" class="headerlink" title="Record Syntax"></a>Record Syntax</h4><p>如果想要方便地取出类型实例中的参数，可以使用Record语法，如：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">Point</span> = <span class="type">Point</span> &#123; <span class="title">xcoord</span> :: <span class="type">Float</span></span></span><br><span class="line"><span class="class">                   , <span class="title">ycoord</span> :: <span class="type">Float</span></span></span><br><span class="line"><span class="class">                   &#125; <span class="keyword">deriving</span> (<span class="type">Show</span>)</span></span><br></pre></td></tr></table></figure><p>在值构造器的参数部分先加一个大括号，然后指定取出值的函数名称（xcoord, ycoord），后面指定类型（:: Float）。这样xcoord和ycoord就都是一个类型为Point -&gt; Float的函数，可以通过下面方法来访问值：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; <span class="keyword">let</span> point = <span class="type">Point</span> <span class="number">1.0</span> <span class="number">2.0</span></span><br><span class="line"><span class="title">ghci</span>&gt; xcoord point</span><br><span class="line"><span class="number">1.0</span></span><br><span class="line"><span class="title">ghci</span>&gt; ycoord point</span><br><span class="line"><span class="number">2.0</span></span><br></pre></td></tr></table></figure><p>同时也可以通过下面方法来创建这个point：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">point</span> = <span class="type">Point</span> &#123;ycoord=<span class="number">2.0</span>, xcoord=<span class="number">1.0</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="Type-parameters"><a href="#Type-parameters" class="headerlink" title="Type parameters"></a>Type parameters</h4><p>值构造器可以接收参数，类型也可以接收参数，这样它就成为了类型构造器（type constructors）。如Maybe的定义：</p><p style="text-align: center;">data Maybe a = Nothing | Just a</p><p>它的值是Nothing时，类型为Maybe a，是多态的（polymorphic）。<br>他的值不是Nothing时，类型取决于值Just a中a的类型，可以构造出Maybe Int、Maybe [Char]等多种类型：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Nothing</span> :: <span class="type">Maybe</span> a</span><br><span class="line"><span class="type">Just</span> <span class="number">1</span> :: <span class="type">Num</span> a =&gt; <span class="type">Maybe</span> a</span><br><span class="line"><span class="type">Just</span> &#x27;a&#x27; :: <span class="type">Maybe</span> <span class="type">Char</span></span><br><span class="line"><span class="type">Just</span> <span class="string">&quot;abc&quot;</span> :: <span class="type">Maybe</span> [<span class="type">Char</span>]</span><br></pre></td></tr></table></figure><p>可以用这种方法改写Point：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">Point</span> x y = <span class="type">Point</span> &#123; <span class="title">xcoord</span> :: <span class="title">x</span></span></span><br><span class="line"><span class="class">                       , <span class="title">ycoord</span> :: <span class="title">y</span></span></span><br><span class="line"><span class="class">                       &#125; <span class="keyword">deriving</span> (<span class="type">Show</span>)</span></span><br></pre></td></tr></table></figure><p>但使用类型参数（type parameters）并不是总是方便，比如在声明函数类型的时候不能只使用Point来表示Point类型，而是必须写成Point Float Float。</p><p>而且不能在定义类型构造器时添加类约束（class constraint），不然在之后声明函数类型的时候也都需要添加类约束，如：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">data</span> (<span class="type">Ord</span> <span class="title">k</span>) =&gt; <span class="type">Map</span> k v = ... </span></span><br><span class="line"><span class="title">toList</span> :: (<span class="type">Ord</span> k) =&gt; <span class="type">Map</span> k a -&gt; [(k, a)]</span><br></pre></td></tr></table></figure><h4 id="Either"><a href="#Either" class="headerlink" title="Either"></a>Either</h4><p>Either是一个类型构造器，它有两个值构造器，定义是：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">Either</span> a b = <span class="type">Left</span> a | <span class="type">Right</span> b <span class="keyword">deriving</span> (<span class="type">Eq</span>, <span class="type">Ord</span>, <span class="type">Read</span>, <span class="type">Show</span>)  </span></span><br></pre></td></tr></table></figure><p>如果使用了Left，那它的a的类型就是具体的；如果使用了Right，那它的b的类型就是具体的：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; <span class="type">Right</span> <span class="number">20</span>  </span><br><span class="line"><span class="type">Right</span> <span class="number">20</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; <span class="type">Left</span> <span class="string">&quot;w00t&quot;</span>  </span><br><span class="line"><span class="type">Left</span> <span class="string">&quot;w00t&quot;</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; :t <span class="type">Right</span> &#x27;a&#x27;  </span><br><span class="line"><span class="type">Right</span> &#x27;a&#x27; :: <span class="type">Either</span> a <span class="type">Char</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; :t <span class="type">Left</span> <span class="type">True</span>  </span><br><span class="line"><span class="type">Left</span> <span class="type">True</span> :: <span class="type">Either</span> <span class="type">Bool</span> b  </span><br></pre></td></tr></table></figure><p>Either可以看作Maybe的补充，比如Maybe在使用时，出现异常可以返回Nothing，但只是一个Nothing，不包含任何信息；但Either包含左值和右值，正常结果返回右值，而出现异常就可以返回包含错误信息的左值，比如安全除法：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">safeDiv</span> :: <span class="type">Int</span> -&gt; <span class="type">Int</span> -&gt; <span class="type">Maybe</span> <span class="type">Int</span></span><br><span class="line"><span class="title">safeDiv</span> _ <span class="number">0</span> = <span class="type">Nothing</span></span><br><span class="line"><span class="title">safeDiv</span> x y = <span class="type">Just</span> (x `div` y)</span><br><span class="line"></span><br><span class="line"><span class="title">ghci</span>&gt; safeDiv <span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="type">Just</span> <span class="number">2</span></span><br><span class="line"><span class="title">ghci</span>&gt; safeDiv <span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="type">Nothing</span></span><br></pre></td></tr></table></figure><p>而使用Either：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">safeDiv</span> :: <span class="type">Int</span> -&gt; <span class="type">Int</span> -&gt; <span class="type">Either</span> <span class="type">String</span> <span class="type">Int</span></span><br><span class="line"><span class="title">safeDiv</span> _ <span class="number">0</span> = <span class="type">Left</span> <span class="string">&quot;Divided by zero&quot;</span></span><br><span class="line"><span class="title">safeDiv</span> x y = <span class="type">Right</span> (x `div` y)</span><br><span class="line"></span><br><span class="line"><span class="title">ghci</span>&gt; safeDiv <span class="number">4</span> <span class="number">2</span></span><br><span class="line"><span class="type">Right</span> <span class="number">2</span></span><br><span class="line"><span class="title">ghci</span>&gt; safeDiv <span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="type">Left</span> <span class="string">&quot;Divided by zero&quot;</span></span><br></pre></td></tr></table></figure><h4 id="Derived-instances"><a href="#Derived-instances" class="headerlink" title="Derived instances"></a>Derived instances</h4><p>想要使一个定义的类满足某些Typeclass的需求，需要从其派生（derive），比如：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">Day</span> = <span class="type">Monday</span> | <span class="type">Tuesday</span> | <span class="type">Wednesday</span> | <span class="type">Thursday</span> | <span class="type">Friday</span> | <span class="type">Saturday</span> | <span class="type">Sunday</span>   </span></span><br><span class="line">           <span class="keyword">deriving</span> (<span class="type">Eq</span>, <span class="type">Ord</span>, <span class="type">Show</span>, <span class="type">Read</span>, <span class="type">Bounded</span>, <span class="type">Enum</span>)  </span><br></pre></td></tr></table></figure><p>这样Day类型的值（Monday～Sunday）之间就可以比较是否相等（从Eq派生），比较大小（从Ord派生，左侧为小，右侧为大），显示成字符串（从Show派生），从字符串中读取（从Read派生），包含边界（从Bounded派生），可以枚举（从Enum派生，按照值构造器中的顺序依次向右）</p><h4 id="Type-synonyms"><a href="#Type-synonyms" class="headerlink" title="Type synonyms"></a>Type synonyms</h4><p>为了阅读方便，书写简便，可以使用<code>type</code>关键字为已有类型创建别名（synonyms）。比如String的定义：</p><p style="text-align: center;">type String = [Char]</p><p>在所有需要使用字符串（即[Char]）的地方都可以使用String来代替，它们是完全一致的，只是String更简便易读。<br>同时，类型别名也可以接收类型参数</p><h4 id="newtype-keyword"><a href="#newtype-keyword" class="headerlink" title="newtype keyword"></a>newtype keyword</h4><p>除了<code>data</code>、<code>type</code>关键字之外，还可以用<code>newtype</code>关键字来定义一个新的类型，比如<code>Control.Applicative</code>模块中的ZipList：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">newtype</span> <span class="type">ZipList</span> a = &#123; <span class="title">getZipList</span> :: [<span class="title">a</span>] &#125;</span></span><br></pre></td></tr></table></figure><ul><li>不同于type，它不是别名，可以使用record语法来直接定义取出值的函数</li><li>不同于data，它只能有一个值构造器，但是速度要比data快，而且更加懒惰</li></ul><h4 id="Recursive-data-structures"><a href="#Recursive-data-structures" class="headerlink" title="Recursive data structures"></a>Recursive data structures</h4><p>一个类型也可以递归定义，比如一颗二叉树：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">Tree</span> a = <span class="type">EmptyTree</span> | <span class="type">Node</span> a (<span class="type">Tree</span> <span class="title">a</span>) (<span class="type">Tree</span> <span class="title">a</span>) <span class="keyword">deriving</span> (<span class="type">Show</span>, <span class="type">Read</span>, <span class="type">Eq</span>)  </span></span><br></pre></td></tr></table></figure><h3 id="定义新Typeclass"><a href="#定义新Typeclass" class="headerlink" title="定义新Typeclass"></a>定义新Typeclass</h3><p>定义一个新的Typeclass需要使用class关键字，例如定义Eq类型类：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Eq</span> a <span class="keyword">where</span></span>  </span><br><span class="line">    (==) :: a -&gt; a -&gt; <span class="type">Bool</span>  </span><br><span class="line">    (/=) :: a -&gt; a -&gt; <span class="type">Bool</span>  </span><br><span class="line">    x == y = not (x /= y)  </span><br><span class="line">    x /= y = not (x == y)  </span><br></pre></td></tr></table></figure><p>其中<code>a</code>是一个类型变量，前两行声明了需要实现的函数的名字及其类型，后两行表明了需要的函数之间可以相互定义（不必要）。</p><p>包含了后两行之后，只定义(==)函数或者(/=)函数都可以完成全部定义，它们（<code>(==) | (/=)</code>）成为这个类型类的最小完整定义（minimal complete definition）</p><p>查看一个类型类的成员需要实现的函数可以在GHCi中使用<code>:info</code>：</p><p style="text-align: center;">ghci> :info Eq</p><h4 id="手动创建实例"><a href="#手动创建实例" class="headerlink" title="手动创建实例"></a>手动创建实例</h4><p>使一个类型成为一个类型类的实例可以直接使用<code>deriving</code>来自动完成，也可以通过使用instance关键字来手动完成。比如使Point成为Show的实例：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Show</span> <span class="type">Point</span> <span class="keyword">where</span></span></span><br><span class="line">    show (<span class="type">Point</span> x y) = <span class="string">&quot;(&quot;</span> ++ show x ++ <span class="string">&quot;, &quot;</span> ++ show y ++ <span class="string">&quot;)&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- in ghci</span></span><br><span class="line"><span class="title">ghci</span>&gt; <span class="type">Point</span> <span class="number">1.0</span> <span class="number">2.0</span></span><br><span class="line">(<span class="number">1.0</span>, <span class="number">2.0</span>)</span><br></pre></td></tr></table></figure><p>这样就可以自定义显示的内容，否则使用deriving的话只会直接将其转化为字符串。</p><p>同时也要注意类型和类型构造器的区别，传入给instance的第二个参数应该为类型而不是类型构造器，比如Maybe：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Eq</span> <span class="type">Maybe</span> <span class="keyword">where</span></span>  </span><br><span class="line">    ...    </span><br><span class="line"><span class="comment">-- 错误用法，因为Maybe是类型构造器而不是类型</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Eq</span> (<span class="type">Maybe</span> <span class="title">m</span>) <span class="keyword">where</span></span>  </span><br><span class="line">    ...</span><br><span class="line"><span class="comment">-- 错误用法，因为m不一定是Eq的成员</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> (<span class="type">Eq</span> <span class="title">m</span>) =&gt; <span class="type">Eq</span> (<span class="type">Maybe</span> <span class="title">m</span>) <span class="keyword">where</span></span>  </span><br><span class="line">    <span class="type">Just</span> x == <span class="type">Just</span> y = x == y  </span><br><span class="line">    <span class="type">Nothing</span> == <span class="type">Nothing</span> = <span class="type">True</span>  </span><br><span class="line">    _ == _ = <span class="type">False</span>  </span><br></pre></td></tr></table></figure><h4 id="Functor-Typeclass"><a href="#Functor-Typeclass" class="headerlink" title="Functor Typeclass"></a>Functor Typeclass</h4><p>Functor也是一种类型类，它只规定了一个函数：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Functor</span> f <span class="keyword">where</span></span></span><br><span class="line">    fmap :: (a -&gt; b) -&gt; f a -&gt; f b</span><br></pre></td></tr></table></figure><p>其中<code>f</code>是一个类型构造器，而不是一个具体类型</p><h3 id="Kinds"><a href="#Kinds" class="headerlink" title="Kinds"></a>Kinds</h3><p>一个值的类型叫做类型（Type），而一个类型的类型叫做Kind。可以通过GHCi中<code>:k</code>来查看Kind：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; :k <span class="type">Int</span></span><br><span class="line"><span class="type">Int</span> :: *</span><br><span class="line"><span class="title">ghci</span>&gt; :k <span class="type">Maybe</span></span><br><span class="line"><span class="type">Maybe</span> :: * -&gt; *</span><br><span class="line"><span class="title">ghci</span>&gt; :k <span class="type">Maybe</span> <span class="type">Int</span></span><br><span class="line"><span class="type">Maybe</span> <span class="type">Int</span> :: *</span><br><span class="line"><span class="title">ghci</span>&gt; :k <span class="type">Either</span></span><br><span class="line"><span class="type">Either</span> :: * -&gt; * -&gt; *</span><br></pre></td></tr></table></figure><p>其中的星号<code>*</code>代表了一个具体类型（concrete type）。Int本身就是一个具体类型，所以Int的Kind是*。而Maybe是一个类型构造器，它接收一个具体类型返回一个新的具体类型，所以Maybe的Kind是* -&gt; *。如果给Maybe传入了一个Int，那么得到的Maybe Int就是一个具体的类型，它的Kind就是*。Either也是一个类型构造器，但它接收两个类型才产生一个新的类型，所以Either的Kind是* -&gt; * -&gt; *。</p><h2 id="Input-Output"><a href="#Input-Output" class="headerlink" title="Input/Output"></a>Input/Output</h2><h3 id="运行Haskell程序"><a href="#运行Haskell程序" class="headerlink" title="运行Haskell程序"></a>运行Haskell程序</h3><p>不在GHCi中运行一个Haskell程序有两种方式：</p><ol><li>编译运行： <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ghc --make code</span><br><span class="line">$ ./code</span><br></pre></td></tr></table></figure></li><li>通过<code>runhaskell</code>命令直接运行： <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ runhaskell code.hs</span><br></pre></td></tr></table></figure></li></ol><h3 id="输出文本"><a href="#输出文本" class="headerlink" title="输出文本"></a>输出文本</h3><p>在一个Haskell程序中输出文字需要定义一个main函数：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">main</span> = putStrLn <span class="string">&quot;Hello World&quot;</span></span><br></pre></td></tr></table></figure><p>其中putStrLn的类型是：</p><p style="text-align: center;">putStrLn :: String -> IO ()</p><p>putStrLn接收一个String类型，并返回一个结果为()类型的IO动作（I/O action）。所以main函数的类型为IO ()。（IO的Kind是* -&gt; *）</p><p>除此之外，还有其他默认提供的输出文本的函数：</p><ul><li><code>putStr</code>：输出文本，结尾不换行</li><li><code>putChar</code>：输出单个字符，结尾不换行。接收的参数为单个Char，不是String（用单引号不是双引号）</li><li><code>print</code>：可以接收任何Show的成员，先用show转化为字符串然后输出。等同于putStrLn . show</li></ul><h4 id="do-block"><a href="#do-block" class="headerlink" title="do block"></a>do block</h4><p>在main函数中使用多个putStrLn需要使用do语句：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">main</span> = <span class="keyword">do</span></span><br><span class="line">    putStrLn <span class="string">&quot;Line1&quot;</span></span><br><span class="line">    putStrLn <span class="string">&quot;Line2&quot;</span></span><br></pre></td></tr></table></figure><p>其中最后一行一定要返回IO ()类型的值</p><h3 id="输入文本"><a href="#输入文本" class="headerlink" title="输入文本"></a>输入文本</h3><p>输入文字需要在do块中使用getLine：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">main</span> = <span class="keyword">do</span></span><br><span class="line">    line &lt;- getLine</span><br><span class="line">    putStrLn line</span><br></pre></td></tr></table></figure><p>getLine的类型是：</p><p style="text-align: center;">getLine :: IO String</p><p>而&lt;-操作符将getLine中的String提取了出来给到了line，使line变成了String类型的一个字符串。</p><p>而且使用输入的字符串必须要经过一次&lt;-，不能直接使用getLine作为字符串，因为getLine不是String类型，而是IO String类型。</p><p>除此之外，还可以使用getChar来获取单个字符，但仍然需要使用&lt;-操作符来提取Char</p><h3 id="其他IO相关函数用法"><a href="#其他IO相关函数用法" class="headerlink" title="其他IO相关函数用法"></a>其他IO相关函数用法</h3><h4 id="return"><a href="#return" class="headerlink" title="return"></a>return</h4><p>Haskell中的return和其他命令式语言中的return完全不同，它不会使函数直接结束并返回一个值。</p><p>main函数必须定义为类型为IO ()的函数，所以在main函数中使用if语句，如果不输出的话也不可以直接放下什么都不干，因为这时候main函数的类型不是IO ()。所以这时需要使用return ()来为main函数指定为IO ()类型，例如：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">main</span> = <span class="keyword">do</span> </span><br><span class="line">    line &lt;- getLine</span><br><span class="line">    <span class="keyword">if</span> null line</span><br><span class="line">        <span class="keyword">then</span> return () <span class="comment">-- &lt;-这里</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">do</span></span><br><span class="line">            ...</span><br></pre></td></tr></table></figure><p>使用&lt;-操作符也可以直接将return语句中的内容提取出来，比如a &lt;- return ‘A’，执行后a就是’A’。</p><h4 id="when"><a href="#when" class="headerlink" title="when"></a>when</h4><p>when包含在<code>Control.Monad</code>模块中，它表示在满足第一个参数的条件下会执行第二个函数，否则会return ()。比如：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Control.Monad   </span><br><span class="line">  </span><br><span class="line"><span class="title">main</span> = <span class="keyword">do</span>  </span><br><span class="line">    c &lt;- getChar  </span><br><span class="line">    when (c /= &#x27; &#x27;) $ <span class="keyword">do</span>  </span><br><span class="line">        putChar c  </span><br><span class="line">        main  </span><br></pre></td></tr></table></figure><p>等同于：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">main</span> = <span class="keyword">do</span>     </span><br><span class="line">    c &lt;- getChar  </span><br><span class="line">    <span class="keyword">if</span> c /= &#x27; &#x27;  </span><br><span class="line">        <span class="keyword">then</span> <span class="keyword">do</span>  </span><br><span class="line">            putChar c  </span><br><span class="line">            main  </span><br><span class="line">        <span class="keyword">else</span> return () </span><br></pre></td></tr></table></figure><h4 id="sequence"><a href="#sequence" class="headerlink" title="sequence"></a>sequence</h4><p>sequence在IO中使用时可以达成[IO a] -&gt; IO [a]的效果，所以可以用作：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[a, b, c] &lt;- sequence [getLine, getLine, getLine]</span><br></pre></td></tr></table></figure><h4 id="mapM-amp-mapM"><a href="#mapM-amp-mapM" class="headerlink" title="mapM &amp; mapM_"></a>mapM &amp; mapM_</h4><p>在IO相关的地方使用map，可以使用mapM和mapM_，其中mapM有返回值而mapM_直接扔掉了返回值：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; mapM print [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]  </span><br><span class="line"><span class="number">1</span>  </span><br><span class="line"><span class="number">2</span>  </span><br><span class="line"><span class="number">3</span>  </span><br><span class="line">[(),(),()]  </span><br><span class="line"><span class="title">ghci</span>&gt; mapM_ print [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]  </span><br><span class="line"><span class="number">1</span>  </span><br><span class="line"><span class="number">2</span>  </span><br><span class="line"><span class="number">3</span>  </span><br></pre></td></tr></table></figure><h4 id="forever"><a href="#forever" class="headerlink" title="forever"></a>forever</h4><p>forever函数包含在<code>Control.Monad</code>模块中。在main函数开头加上forever函数可以使后面的do块一直重复执行直到程序被迫终止，如：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Control.Monad</span><br><span class="line">  </span><br><span class="line"><span class="title">main</span> = forever $ <span class="keyword">do</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h4 id="forM"><a href="#forM" class="headerlink" title="forM"></a>forM</h4><p>forM函数包含在<code>Control.Monad</code>模块中，它的功能和mapM类似，从第一个参数中逐个取出元素传入第二个参数（一个接收一个参数的函数）中，并且第二个参数可以返回IO a类型。比如：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Control.Monad</span><br><span class="line"></span><br><span class="line"><span class="title">main</span> = <span class="keyword">do</span> </span><br><span class="line">    colors &lt;- forM [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>] (\a -&gt; <span class="keyword">do</span></span><br><span class="line">        putStrLn $ <span class="string">&quot;Which color do you associate with the number &quot;</span> ++ show a ++ <span class="string">&quot;?&quot;</span>  </span><br><span class="line">        color &lt;- getLine  </span><br><span class="line">        return color)</span><br><span class="line">    putStrLn <span class="string">&quot;The colors that you associate with 1, 2, 3 and 4 are: &quot;</span>  </span><br><span class="line">    mapM putStrLn colors</span><br></pre></td></tr></table></figure><h4 id="getContents"><a href="#getContents" class="headerlink" title="getContents"></a>getContents</h4><p>getLine获取一整行，而getContents从标准输入中获取全部内容直到遇到EOF，并且它是lazy的，在执行了foo &lt;- getContents后，它并不会读取标准输入并且赋值到foo，而是等到需要使用foo的时候再从标准输入读取。</p><p>getContents在使用管道传入文字时很常用，可以代替forever+getLine使用，比如一个Haskell程序文件code.hs：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Data.Char  </span><br><span class="line">  </span><br><span class="line"><span class="title">main</span> = <span class="keyword">do</span>  </span><br><span class="line">    contents &lt;- getContents  </span><br><span class="line">    putStr (map toUpper contents)  </span><br></pre></td></tr></table></figure><p>使用ghc –make code编译后，通过管道传入文字：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat text.txt | ./code</span><br></pre></td></tr></table></figure><p>会将text.txt中的所有字母转为大写并输出</p><h4 id="interact"><a href="#interact" class="headerlink" title="interact"></a>interact</h4><p>上述功能还可以转化为一个String -&gt; String的函数：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">upperStrings</span> = unlines . map (map toUpper) . lines</span><br></pre></td></tr></table></figure><p>而在main中使用这个函数就需要：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">main</span> = <span class="keyword">do</span></span><br><span class="line">    contents &lt;- getContents</span><br><span class="line">    putStr (upperStrings contents)</span><br></pre></td></tr></table></figure><p>但是String -&gt; String类型的函数在输入输出中的使用太常见了，所以可以使用interact函数来简化。interact的类型是：</p><p style="text-align: center;">interact :: (String -> String) -> IO ()</p><p>可以看出它接收一个String -&gt; String的函数，并返回一个IO ()类型，所以可以直接用在main上。</p><p>于是整个转换为大写的程序就可以简化为：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">main</span> = interact $ unlines . map (map toUpper) . lines</span><br></pre></td></tr></table></figure><h3 id="文件和流"><a href="#文件和流" class="headerlink" title="文件和流"></a>文件和流</h3><p>以下与文件和流相关的函数都包含在<code>System.IO</code>模块中</p><h4 id="openFile"><a href="#openFile" class="headerlink" title="openFile"></a>openFile</h4><p>openFile函数可以用来打开一个文件，它的类型是：</p><p style="text-align: center;">openFile :: FilePath -> IOMode -> IO Handle</p><p>其中<code>FilePath</code>是String的type synonyms，用一个字符串来表示需要打开的文件的路径</p><p><code>IOMode</code>的定义是：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">IOMode</span> = <span class="type">ReadMode</span> | <span class="type">WriteMode</span> | <span class="type">AppendMode</span> | <span class="type">ReadWriteMode</span></span></span><br></pre></td></tr></table></figure><p>所以它一共只有四个值，用来表示进行IO操作的模式</p><p>openFile返回一个IO Handle类型的值，将其用&lt;-操作符提取后会出现一个Handle的值。但不能从Handle中直接使用文字，还需要使用一系列函数：</p><ul><li><code>hGetContents</code> :: Handle -&gt; IO String ，从Handle中读取全部内容，返回一个IO String</li><li><code>hGetChar</code> :: Handle -&gt; IO Char ，从Handle中读取一个字符</li><li><code>hGetLine</code> :: Handle -&gt; IO String ，从Handle中读取一行，返回一个IO String</li><li><code>hPutStr</code> :: Handle -&gt; String -&gt; IO () ，向Handle中输出字符串</li><li><code>hPutStrLn</code> :: Handle -&gt; String -&gt; IO () ，同上</li></ul><p>在使用openFile进行文件操作后，需要使用hClose手动关闭Handle。hClose :: Handle -&gt; IO ()，接收一个Handle并返回IO ()，可以直接放在main函数末尾</p><p>所以使用openFile读取一个文件中的全部内容并输出的全部代码是：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> System.IO</span><br><span class="line"></span><br><span class="line"><span class="title">main</span> = <span class="keyword">do</span></span><br><span class="line">    handle &lt;- openFile <span class="string">&quot;text.txt&quot;</span> <span class="type">ReadMode</span></span><br><span class="line">    contents &lt;- hGetContents handle</span><br><span class="line">    putStrLn contents</span><br><span class="line">    hClose handle</span><br></pre></td></tr></table></figure><h4 id="withFile"><a href="#withFile" class="headerlink" title="withFile"></a>withFile</h4><p>withFile类似Python中的with open，它在读取文件使用之后不需要手动close文件。它的类型是：</p><p style="text-align: center;">withFile :: FilePath -> IOMode -> (Handle -> IO a) -> IO a</p><p>可以看出，它接收三个参数：</p><ul><li><code>FilePath</code>：一个表示文件路径的String</li><li><code>IOMode</code>：打开文件的模式</li><li><code>(Handle -&gt; IO a)</code>：一个函数，表示对读取文件后的Handle索要进行的操作，需要返回一个I/O action；而这个返回值也将作为withFile的返回值</li></ul><p>现在使用withFile来改写上述代码：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> System.IO</span><br><span class="line"></span><br><span class="line"><span class="title">main</span> = withFile <span class="string">&quot;text.txt&quot;</span> <span class="type">ReadMode</span> (\handle -&gt; <span class="keyword">do</span></span><br><span class="line">    contents &lt;- hGetContents handle</span><br><span class="line">    putStrLn contents)</span><br></pre></td></tr></table></figure><p>withFile的功能相当于以下函数：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">withFile&#x27;</span> :: <span class="type">FilePath</span> -&gt; <span class="type">IOMode</span> -&gt; (<span class="type">Handle</span> -&gt; <span class="type">IO</span> a) -&gt; <span class="type">IO</span> a  </span><br><span class="line"><span class="title">withFile&#x27;</span> path mode f = <span class="keyword">do</span>  </span><br><span class="line">    handle &lt;- openFile path mode   </span><br><span class="line">    result &lt;- f handle  </span><br><span class="line">    hClose handle  </span><br><span class="line">    return result  </span><br></pre></td></tr></table></figure><h4 id="readFile"><a href="#readFile" class="headerlink" title="readFile"></a>readFile</h4><p>readFile可以更加简化读取文件内容的操作，它的类型：</p><p style="text-align: center;">readFile :: FilePath -> IO String</p><p>它只需要输入一个表示文件路径的字符串，返回其中以其中内容为内容的I/O action：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> System.IO</span><br><span class="line"></span><br><span class="line"><span class="title">main</span> = <span class="keyword">do</span></span><br><span class="line">    contents &lt;- readFile <span class="string">&quot;text.txt&quot;</span></span><br><span class="line">    putStrLn contents</span><br></pre></td></tr></table></figure><h4 id="writeFile"><a href="#writeFile" class="headerlink" title="writeFile"></a>writeFile</h4><p>writeFile简化了写入文件的操作，它的类型：</p><p style="text-align: center;">writeFile :: FilePath -> String -> IO ()</p><p>传入的第一个参数是要写入的文件的路径，第二个参数是要写入的字符串，返回一个IO ()</p><h4 id="appendFile"><a href="#appendFile" class="headerlink" title="appendFile"></a>appendFile</h4><p>appendFile类似writeFile，但使用它不会覆盖文件中原来内容，而是直接把字符串添加到文件末尾</p><h4 id="buffer"><a href="#buffer" class="headerlink" title="buffer"></a>buffer</h4><p>文件以流的形式被读取，默认文字文件的缓冲区（buffer）大小是一行，即每次读取一行内容；默认二进制文件的缓冲区大小是以块为单位，如果没有指定则根据系统默认来选择。</p><p>也可以通过<code>hSetBuffering</code>函数来手动设置缓冲区大小，这个函数的类型：</p><p style="text-align: center;">hSetBuffering :: Handle -> BufferMode -> IO ()</p><p>它接收一个handle，和一个BufferMode，并返回IO ()。其中BufferMode有以下几种：</p><ul><li><code>NoBuffering</code>：没有缓冲区，一次读入一个字符</li><li><code>LineBuffering</code>：缓冲区大小是一行，即每次读入一行内容</li><li><code>BlockBuffering (Maybe Int)</code>：缓冲区大小是一块，块的大小由Maybe Int指定：<ul><li><code>BlockBuffering (Nothing)</code>：使用系统默认的块大小</li><li><code>BlockBuffering (Just 2048)</code>：一块的大小是2048字节，即每次读入2048bytes的内容</li></ul></li></ul><p>缓冲区的刷新是自动的，也可以通过<code>hFlush</code>来手动刷新</p><p style="text-align: center;">hFlush :: Handle -> IO ()</p><p>传入一个handle，返回IO ()，即刷新对应handle的缓冲区</p><h4 id="openTempFile"><a href="#openTempFile" class="headerlink" title="openTempFile"></a>openTempFile</h4><p>openTempFile可以新建一个临时文件：</p><p style="text-align: center;">openTempFile :: FilePath -> String -> IO (FilePath, Handle)</p><p><code>FilePath</code>指临时文件要创建的位置路径，<code>String</code>指临时文件名字的前缀，返回一个I/O action，其内容第一个<code>FilePath</code>是创建得到的临时文件的路径，<code>Handle</code>是临时文件的handle</p><p>例如：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> System.IO</span><br><span class="line"></span><br><span class="line"><span class="title">main</span> = <span class="keyword">do</span></span><br><span class="line">    (tempFile, tempHandle) &lt;- openTempFile <span class="string">&quot;.&quot;</span> <span class="string">&quot;temp&quot;</span></span><br><span class="line">    ...</span><br><span class="line">    hClose tempHandle</span><br></pre></td></tr></table></figure><p><code>&quot;.&quot;</code>指临时文件要在当前目录创建，<code>&quot;temp&quot;</code>指临时文件名字以temp开头。最终得到的tempFile就是./temp…….，temp后为随机数字，如<code>./temp43620-0</code></p><h3 id="路径操作"><a href="#路径操作" class="headerlink" title="路径操作"></a>路径操作</h3><p>相关函数都包含在<code>System.Directory</code>模块中，全部内容见<a href="https://hackage.haskell.org/package/directory-1.3.6.2/docs/System-Directory.html">System.Directory</a></p><h4 id="getCurrentDirectory"><a href="#getCurrentDirectory" class="headerlink" title="getCurrentDirectory"></a>getCurrentDirectory</h4><p style="text-align: center;">getCurrentDirectory :: IO FilePath</p><p>直接返回一个I/O action，其内容是一个字符串表示当前路径的绝对路径</p><h4 id="removeFile"><a href="#removeFile" class="headerlink" title="removeFile"></a>removeFile</h4><p style="text-align: center;">removeFile :: FilePath -> IO ()</p><p>输入一个文件路径，并删除掉它</p><h4 id="renameFile"><a href="#renameFile" class="headerlink" title="renameFile"></a>renameFile</h4><p style="text-align: center;">renameFile :: FilePath -> FilePath -> IO ()</p><p>输入一个原路径，一个新路径，为原路径的文件重命名为新路径的名</p><h4 id="doesFileExist"><a href="#doesFileExist" class="headerlink" title="doesFileExist"></a>doesFileExist</h4><p style="text-align: center;">doesFileExist :: FilePath -> IO Bool</p><p>检查文件是否存在，返回一个包含布尔值的I/O action</p><h3 id="Command-line-arguments"><a href="#Command-line-arguments" class="headerlink" title="Command line arguments"></a>Command line arguments</h3><p><code>System.Environment</code>模块中提供了两个函数可以用来处理传入命令行的参数</p><h4 id="getArgs"><a href="#getArgs" class="headerlink" title="getArgs"></a>getArgs</h4><p style="text-align: center;">getArgs :: IO [String]</p><p>不需要输入参数，直接返回一个I/O action，内容为传入命令行的参数（一个由String组成的列表）。相当于C语言中的argv[1:]</p><h4 id="getProgName"><a href="#getProgName" class="headerlink" title="getProgName"></a>getProgName</h4><p style="text-align: center;">getProgName :: IO String</p><p>返回I/O action，内容为程序的名字，相当于C语言中的argv[0]</p><h3 id="Randomness"><a href="#Randomness" class="headerlink" title="Randomness"></a>Randomness</h3><p>和随机数有关的函数都包含在<code>System.Random</code>模块中。GHCi启动时可能不会包含System.Random的配置，导致无法找到模块。需要通过stack打开:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stack ghci --package random</span><br></pre></td></tr></table></figure><p>Haskell要求同样的程序需要运行出同样的结果，除了用到了I/O action，所有会造成不同结果的函数都要交给I/O action来完成</p><p>那要使随机数脱离IO存在，就要用到随机生成器（random generator）</p><p><code>System.Random</code>模块提供了几个生成随机数的函数：</p><h4 id="random"><a href="#random" class="headerlink" title="random"></a>random</h4><p style="text-align: center;">random :: (Random a, RandomGen g) => g -> (a, g)</p><p>其中又有两个新的typeclass，Random表示可以取随机，RandomGen表示随机数生成器。random函数接收一个随机数生成器，返回一个元组，其中第一个元素是生成的随机数，第二个元素是一个新的随机数生成器</p><p>获取随机数生成器可以使用<code>mkStdGen</code>函数：</p><p style="text-align: center;">mkStdGen :: Int -> StdGen</p><p>其中<code>StdGen</code>是一个RandomGen的实例</p><p>运用random生成随机数需要指定类型，不然程序无法确定<code>a</code>是什么类型。例如：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; random (mkStdGen <span class="number">100</span>) :: (<span class="type">Int</span>, <span class="type">StdGen</span>)</span><br><span class="line">(<span class="number">9216477508314497915</span>,<span class="type">StdGen</span> &#123;unStdGen = <span class="type">SMGen</span> <span class="number">712633246999323047</span> <span class="number">2532601429470541125</span>&#125;)</span><br><span class="line"><span class="title">ghci</span>&gt; random (mkStdGen <span class="number">100</span>) :: (<span class="type">Char</span>, <span class="type">StdGen</span>)</span><br><span class="line">(&#x27;\<span class="number">537310</span>&#x27;,<span class="type">StdGen</span> &#123;unStdGen = <span class="type">SMGen</span> <span class="number">712633246999323047</span> <span class="number">2532601429470541125</span>&#125;)</span><br><span class="line"><span class="title">ghci</span>&gt; random (mkStdGen <span class="number">100</span>) :: (<span class="type">Bool</span>, <span class="type">StdGen</span>)</span><br><span class="line">(<span class="type">True</span>,<span class="type">StdGen</span> &#123;unStdGen = <span class="type">SMGen</span> <span class="number">712633246999323047</span> <span class="number">2532601429470541125</span>&#125;)</span><br></pre></td></tr></table></figure><p>再次运行同样的函数，会得到同样的结果。所以如果需要生成其他的随机数，需要更换生成器，就可以使用上一次调用结果返回的新随机数生成器：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">threeCoins</span> :: <span class="type">StdGen</span> -&gt; (<span class="type">Bool</span>, <span class="type">Bool</span>, <span class="type">Bool</span>)  </span><br><span class="line"><span class="title">threeCoins</span> gen =   </span><br><span class="line">    <span class="keyword">let</span> (firstCoin, newGen) = random gen  </span><br><span class="line">        (secondCoin, newGen&#x27;) = random newGen  </span><br><span class="line">        (thirdCoin, newGen&#x27;&#x27;) = random newGen&#x27;  </span><br><span class="line">    <span class="keyword">in</span>  (firstCoin, secondCoin, thirdCoin) </span><br></pre></td></tr></table></figure><h4 id="randoms"><a href="#randoms" class="headerlink" title="randoms"></a>randoms</h4><p style="text-align: center;">randoms :: (Random a, RandomGen g) => g -> [a]</p><p>randoms接收一个RandomGen，返回一个随机的无穷列表。因为它是无穷的，所以不会返回新的随机数生成器</p><h4 id="randomR"><a href="#randomR" class="headerlink" title="randomR"></a>randomR</h4><p style="text-align: center;">randomR :: (Random a, RandomGen g) => (a, a) -> g -> (a, g)</p><p>可以用来生成有范围的随机数，第一个参数是一个元组，表示生成随机数的范围(闭区间)</p><h4 id="randomRs"><a href="#randomRs" class="headerlink" title="randomRs"></a>randomRs</h4><p style="text-align: center;">randomRs :: (Random a, RandomGen g) => (a, a) -> g -> [a]</p><p>同上两个，生成有范围的无穷随机数列表</p><h4 id="getStdGen"><a href="#getStdGen" class="headerlink" title="getStdGen"></a>getStdGen</h4><p>如果想要让程序每次运行得到不同的随机结果，需要使用<code>getStdGen</code>来获取全局随机数生成器，它会在每次运行的时候产生不同的值，也因此，它返回的是一个I/O action，而不是一个直接的StdGen</p><p style="text-align: center;">getStdGen :: Control.Monad.IO.Class.MonadIO m => m StdGen</p><p>即可以看成getStdGen :: IO StdGen，需要使用&lt;-操作符将StdGen提取出来</p><p>但是在同一个程序中，getStdGen的结果是相同的，全局随机数生成器不会自动更新，所以就需要另一个函数newStdGen</p><h4 id="newStdGen"><a href="#newStdGen" class="headerlink" title="newStdGen"></a>newStdGen</h4><p style="text-align: center;">newStdGen :: Control.Monad.IO.Class.MonadIO m => m StdGen</p><p>执行newStdGen会进行两个操作：</p><ul><li>更新全局随机数生成器，下次执行getStdGen会获得不同的结果</li><li>返回一个I/O action，包含一个新的StdGen（但是这个生成器和全局生成器也不同）</li></ul><h3 id="Exceptions"><a href="#Exceptions" class="headerlink" title="Exceptions"></a>Exceptions</h3><p>程序在运行失败时会抛出异常，可以通过<code>Control.Exception</code>模块中的<code>catch</code>函数来捕获异常：</p><p style="text-align: center;">catch :: Exception e => IO a -> (e -> IO a) -> IO a</p><p>第一个参数是要进行的操作，以IO a为返回值的类型，第二个参数是一个函数，它接收异常并进行操作，例如：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Control.Exception</span><br><span class="line"></span><br><span class="line"><span class="title">main</span> = main&#x27; `catch` handler</span><br><span class="line"></span><br><span class="line"><span class="title">main&#x27;</span> :: <span class="type">IO</span> ()</span><br><span class="line"><span class="title">main&#x27;</span> = <span class="keyword">do</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="title">handler</span> :: <span class="type">Exception</span> e =&gt; e -&gt; <span class="type">IO</span> ()</span><br><span class="line"><span class="title">handler</span> e =  putStrLn <span class="string">&quot;...&quot;</span></span><br></pre></td></tr></table></figure><p>也可以利用守卫（guard）语法和<code>System.IO.Error</code>中的函数来判断IO异常的类型来进行不同操作：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> System.Environment</span><br><span class="line"><span class="keyword">import</span> System.IO.Error</span><br><span class="line"><span class="keyword">import</span> Control.Exception</span><br><span class="line">  </span><br><span class="line"><span class="title">main</span> = toTry `catch` handler</span><br><span class="line">              </span><br><span class="line"><span class="title">toTry</span> :: <span class="type">IO</span> ()  </span><br><span class="line"><span class="title">toTry</span> = <span class="keyword">do</span> (fileName:_) &lt;- getArgs  </span><br><span class="line">           contents &lt;- readFile fileName  </span><br><span class="line">           putStrLn $ <span class="string">&quot;The file has &quot;</span> ++ show (length (lines contents)) ++ <span class="string">&quot; lines!&quot;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="title">handler</span> :: <span class="type">IOError</span> -&gt; <span class="type">IO</span> ()  </span><br><span class="line"><span class="title">handler</span> e  </span><br><span class="line">    | isDoesNotExistError e = putStrLn <span class="string">&quot;The file doesn&#x27;t exist!&quot;</span>  </span><br><span class="line">    | otherwise = ioError e  </span><br></pre></td></tr></table></figure><p>具体相关全部函数见文档：<a href="https://hackage.haskell.org/package/base-4.15.0.0/docs/System-IO-Error.html">System.IO.Error</a>、<a href="https://hackage.haskell.org/package/base-4.15.0.0/docs/Control-Exception-Base.html">Control.Exception</a></p><h2 id="Functors"><a href="#Functors" class="headerlink" title="Functors"></a>Functors</h2><p>函子（Functor）是一个类型类（typeclass），和其他类型类一样，它规定了其实例类必须实现的功能（例如Eq类型类规定了它的实例必须是可以比较是否相等的），Functor规定类它的实例必须是可以进行映射的。Functor要求使用<code>fmap</code> :: (a -&gt; b) -&gt; f a -&gt; f b 函数来实现这个功能，它接收一个a -&gt; b类型的函数、一个内部元素为a类型的函子，返回一个内部元素为b类型的函子</p><p>Functor可以比作盒子，那fmap函数就相当于给定一个函数和一个盒子，将盒子中的全部元素都应用这个函数，再返回应用函数后的盒子</p><p>函子的实例必须是一个Kind为* -&gt; *的类型构造器，因为它要求其是一个盒子，盒子在接收内容后才会成为一个具体的类型。fmap中的<code>f a</code>和<code>f b</code>也是因为<code>f</code>是一个类型构造器，在接收类型a/b后才会变成一个具体类型（f a和f b）出现在函数类型声明中</p><p>Functor的定义是:</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Functor</span> f <span class="keyword">where</span></span></span><br><span class="line">    fmap :: (a -&gt; b) -&gt; f a -&gt; f b</span><br><span class="line">    (&lt;$) :: a -&gt; f a -&gt; f b</span><br><span class="line">    (&lt;$) = fmap . const</span><br></pre></td></tr></table></figure><p>可以发现Functor不仅需要fmap函数，还需要一个&lt;$函数，它接收一个a类型的变量和一个内容为b类型的函子，返回一个内容为a类型的函子；作用就是将传入的函子中的所有元素都替换为传入的第一个参数，比如：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; &#x27;a&#x27; &lt;$ [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="string">&quot;aaa&quot;</span></span><br></pre></td></tr></table></figure><p>但它不是声明一个函子实例必须的，因为它可以使用fmap和const函数复合来实现，其中const的类型签名：</p><p style="text-align: center;">const :: a -> b -> a</p><p>即接收两个参数，但始终只返回第一个参数</p><h3 id="Functor实例"><a href="#Functor实例" class="headerlink" title="Functor实例"></a>Functor实例</h3><h4 id><a href="#" class="headerlink" title="[]"></a>[]</h4><p>列表[]是一个函子，它通过map函数来实现fmap的功能：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Functor</span> [] <span class="keyword">where</span></span></span><br><span class="line">    fmap = map</span><br></pre></td></tr></table></figure><p style="text-align: center;">map :: (a -> b) -> [a] -> [b]</p><p>map和fmap要求的相同，达成的目的也一致。map接收一个函数和一个列表，它会将列表中的所有元素都应用这个函数后再返回这个列表</p><h4 id="Maybe"><a href="#Maybe" class="headerlink" title="Maybe"></a>Maybe</h4><p>Maybe也具有kind * -&gt; *，它也是一个函子：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Functor</span> <span class="type">Maybe</span> <span class="keyword">where</span></span></span><br><span class="line">    fmap f <span class="type">Nothing</span> = <span class="type">Nothing</span></span><br><span class="line">    fmap f (<span class="type">Just</span> x) = <span class="type">Just</span> (f x)</span><br><span class="line"></span><br><span class="line"><span class="title">ghci</span>&gt; fmap (*<span class="number">2</span>) <span class="type">Nothing</span></span><br><span class="line"><span class="type">Nothing</span></span><br><span class="line"><span class="title">ghci</span>&gt; fmap (*<span class="number">2</span>) (<span class="type">Just</span> <span class="number">2</span>)</span><br><span class="line"><span class="type">Just</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><h4 id="Either-a"><a href="#Either-a" class="headerlink" title="Either a"></a>Either a</h4><p>Either的kind是* -&gt; * -&gt; *，显然它不是函子，但是固定了一个传入类型的Either a的kind是* -&gt; *，也是一个函子：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Functor</span> (<span class="type">Either</span> <span class="title">a</span>) <span class="keyword">where</span></span></span><br><span class="line">    fmap f (<span class="type">Left</span> x) = <span class="type">Left</span> x</span><br><span class="line">    fmap f (<span class="type">Right</span> x) = <span class="type">Right</span> (f x)</span><br><span class="line"></span><br><span class="line"><span class="title">ghci</span>&gt; fmap (*<span class="number">2</span>) (<span class="type">Left</span> <span class="number">4</span>)</span><br><span class="line"><span class="type">Left</span> <span class="number">4</span></span><br><span class="line"><span class="title">ghci</span>&gt; fmap (*<span class="number">2</span>) (<span class="type">Right</span> <span class="number">4</span>)</span><br><span class="line"><span class="type">Right</span> <span class="number">8</span></span><br></pre></td></tr></table></figure><p>因为使用Either时一般用右值表示正常结果，左值表示异常信息，所以使用fmap时只对右值进行操作，如果时左值则保持不变（而且左值此时也作为确定类型确定值存在）</p><h4 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h4><p>IO也是一个函子，使用fmap对IO中内容应用函数：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Functor</span> <span class="type">IO</span> <span class="keyword">where</span></span></span><br><span class="line">    fmap f action = <span class="keyword">do</span></span><br><span class="line">        result &lt;- action</span><br><span class="line">        return (f result)</span><br><span class="line"></span><br><span class="line"><span class="title">ghci</span>&gt; fmap (<span class="string">&quot;input: &quot;</span>++) getLine</span><br><span class="line"><span class="title">test</span></span><br><span class="line"><span class="string">&quot;input: test&quot;</span></span><br></pre></td></tr></table></figure><h4 id="a"><a href="#a" class="headerlink" title="(,) a"></a>(,) a</h4><p>(,)表示一个二元组的类型构造器，(,) :: * -&gt; * -&gt; *，而确定了第一个元素的类型后就变成了(,) a，它的kind是* -&gt; *。也是一个函子，进行fmap函数时只对第二个元素应用：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Functor</span> ((,) a) <span class="keyword">where</span></span></span><br><span class="line">    fmap f (x, y) = (x, f y)</span><br></pre></td></tr></table></figure><p>只剩一个元素的三元组和四元组也都是函子，fmap也只对最后一个元素应用：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Functor</span> ((,,) a b) <span class="keyword">where</span></span></span><br><span class="line">    fmap f (a, b, c) = (a, b, f c)</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Functor</span> ((,,,) a b c) <span class="keyword">where</span></span></span><br><span class="line">    fmap f (a, b, c, d) = (a, b, c, f d)</span><br></pre></td></tr></table></figure><h4 id="gt-r"><a href="#gt-r" class="headerlink" title="(-&gt;) r"></a>(-&gt;) r</h4><p>-&gt;也是一个类型构造器，它的kind：</p><p style="text-align: center;">(->) :: * -> * -> *</p><p>一个映射（一元函数）的类型a -&gt; b也可以写成(-&gt;) a b，它是由类型a和类型b输入到类型构造器-&gt;中后形成的一个具体类型。所以确定了输入类型后的一元函数的类型就是(-&gt;) r（其中<code>r</code>是输入的类型）</p><p>规定的fmap的类型签名是：</p><p style="text-align: center;">fmap :: (a -> b) -> f a -> f b</p><p>其中的f是函子，而在这个实例中(-&gt;) r就是函子，将其带入f可以得到：</p><p style="text-align: center;">fmap :: (a -> b) -> ((-> r) a) -> ((-> r) b)</p><p>把其中的(-&gt;)换成中缀可以得到：</p><p style="text-align: center;">fmap :: (a -> b) -> (r -> a) -> (r -> b)</p><p>传入两个函数，一个类型为a -&gt; b，一个类型为r -&gt; a，返回一个函数，类型为r -&gt; b。<br>不难推测这个fmap是将这两个函数复合了，先对输入对r应用第二个函数产生类型a的结果，然后在应用第一个函数产生类型b的结果，所以(-&gt;) r定义的fmap是：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Functor</span> ((-&gt;) r) <span class="keyword">where</span></span></span><br><span class="line">    fmap f g = (\x -&gt; f (g x))</span><br></pre></td></tr></table></figure><p>所以(-&gt;) r的fmap其实就是函数复合(.)：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Functor</span> ((-&gt;) r) <span class="keyword">where</span></span></span><br><span class="line">    fmap = (.)</span><br></pre></td></tr></table></figure><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; :t fmap (*<span class="number">3</span>) (+<span class="number">100</span>)  </span><br><span class="line"><span class="title">fmap</span> (*<span class="number">3</span>) (+<span class="number">100</span>) :: (<span class="type">Num</span> a) =&gt; a -&gt; a  </span><br><span class="line"><span class="title">ghci</span>&gt; fmap (*<span class="number">3</span>) (+<span class="number">100</span>) <span class="number">1</span>  </span><br><span class="line"><span class="number">303</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; (*<span class="number">3</span>) `fmap` (+<span class="number">100</span>) $ <span class="number">1</span>  </span><br><span class="line"><span class="number">303</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; (*<span class="number">3</span>) . (+<span class="number">100</span>) $ <span class="number">1</span>  </span><br><span class="line"><span class="number">303</span></span><br></pre></td></tr></table></figure><h3 id="Functor-Laws"><a href="#Functor-Laws" class="headerlink" title="Functor Laws"></a>Functor Laws</h3><p>所有的函子都应该满足两个定律。这两个定律不是Haskell强制要求的，但应该确保一个函子满足这两个定律：</p><ol><li><code>fmap id = id</code>（其中id为函数<code>(\x -&gt; x)</code>）：即对一个函子fmap id，那它应该返回本身（fmap id a = id a = a，a为一个函子），比如： <figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; fmap id [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; fmap id (<span class="type">Just</span> <span class="number">2</span>)</span><br><span class="line"><span class="type">Just</span> <span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><code>fmap (f . g) = fmap f . fmap g</code>：即函子的fmap支持结合律<br> fmap (f . g) a = fmap f . fmap g $ a = fmap f (fmap g a)，其中<code>a</code>为一个函子<br> fmap (f . g) (Just x) = fmap f (fmap g (Just x)) = fmap f (Just (g x)) = Just (f (g x)) <figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; fmap ((*<span class="number">3</span>) . (+<span class="number">100</span>)) (<span class="type">Just</span> <span class="number">1</span>)</span><br><span class="line"><span class="type">Just</span> <span class="number">303</span></span><br></pre></td></tr></table></figure></li></ol><p>满足第一个定律的函子一定满足第二个定律，所以只要检查函子是否满足第一个定律即可</p><h3 id="Intuition"><a href="#Intuition" class="headerlink" title="Intuition"></a>Intuition</h3><p>对于函子和fmap，有两种理解方法</p><ol><li>函子是一种容器（container）；fmap接收一个函数和一个容器，在容器内部应用这个函数，返回应用后的新容器</li><li>函子是一种计算上下文（context）；fmap是柯里化的，把其类型签名看作<p style="text-align: center;">fmap :: (a -> b) -> (f a -> f b)</p>接收一个函数返回另一个函数，传入函数g :: a -> b，fmap将其转换为新的函数<p style="text-align: center;">fmap g :: f a -> f b</p>使普通的函数g可以在计算上下文<code>f</code>中使用，这种转换也被称为提升（lift）</li></ol><h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><h4 id="lt-gt"><a href="#lt-gt" class="headerlink" title="&lt;$&gt;"></a>&lt;$&gt;</h4><p><code>&lt;$&gt;</code>函数是<code>fmap</code>的中缀形式（它看着类似<code>$</code>，<code>f $ 3</code>将f应用在单个值3上，而<code>f &lt;$&gt; [1, 2, 3]</code>将f应用在一个函子上，也就是应用在一个函子内部的所有值上）：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; fmap (*<span class="number">2</span>) (<span class="type">Just</span> <span class="number">2</span>)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="title">ghci</span>&gt; (*<span class="number">2</span>) &lt;$&gt; <span class="type">Just</span> <span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><h4 id="gt"><a href="#gt" class="headerlink" title="$&gt;"></a>$&gt;</h4><p><code>$&gt;</code>函数包含在<code>Data.Functor</code>模块中</p><p style="text-align: center;">($>) :: Functor f => f a -> b -> f b</p> <p>Functor定义时要求了<code>&lt;$</code>函数，将函子内部的元素全部替换为指定的某个值，而<code>$&gt;</code>正好将<code>&lt;$</code>函数的两个参数反了过来，相当于<code>flip (&lt;$)</code>：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; &#x27;a&#x27; &lt;$ [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="string">&quot;aaa&quot;</span></span><br><span class="line"><span class="title">ghci</span>&gt; [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] $&gt; &#x27;a&#x27;</span><br><span class="line"><span class="string">&quot;aaa&quot;</span></span><br></pre></td></tr></table></figure><h4 id="void"><a href="#void" class="headerlink" title="void"></a>void</h4><p><code>void</code>函数也包含在<code>Data.Functor</code>模块中</p><p style="text-align: center;">void :: Functor f => f a -> f ()</p><p>void函数把一个函子内部的全部元素都变成空（<code>()</code>），<code>void x</code>相当于<code>() &lt;$ x</code>：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; void [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">[(), (), ()]</span><br><span class="line"><span class="title">ghci</span>&gt; void (<span class="type">Just</span> <span class="number">2</span>)</span><br><span class="line"><span class="type">Just</span> ()</span><br></pre></td></tr></table></figure><h2 id="Applicative-Functor"><a href="#Applicative-Functor" class="headerlink" title="Applicative Functor"></a>Applicative Functor</h2><p>应用函子（Applicative Functor）是函子的升级版，它包含在<code>Control.Applicative</code>模块中。</p><p>fmap进行的操作是将一个普通一元函数应用在一个函子内部。而如果要将一个包含函数的函子应用在另一个函子上，fmap就处理不了了，但是应用函子的方法可以处理。应用函子的定义：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Functor</span> f =&gt; <span class="type">Applicative</span> f <span class="keyword">where</span></span></span><br><span class="line">    pure :: a -&gt; f a</span><br><span class="line">    (&lt;*&gt;) :: f (a -&gt; b) -&gt; f a -&gt; f b</span><br></pre></td></tr></table></figure><p>应用函子要求实现两个函数：</p><ul><li><code>pure</code> :: a -&gt; f a，不难理解，pure接收一个值，并将其放在默认的上下文/容器中。对于列表，pure = []；对于Maybe，pure = Just</li><li><code>&lt;*&gt;</code> :: f (a -&gt; b) -&gt; f a -&gt; f b，类似于fmap :: (a -&gt; b) -&gt; f a -&gt; f b，但不同的是&lt;*&gt;的第一个参数的类型是f (a -&gt; b)不是a -&gt; b。所以&lt;*&gt;的第一个参数是在上下文中的函数，而不是一个普通函数。换句话说，&lt;*&gt;接收一个装有函数的函子和另一个函子，应用函数后返回新的函子。</li></ul><h3 id="Applicative-Functor实例"><a href="#Applicative-Functor实例" class="headerlink" title="Applicative Functor实例"></a>Applicative Functor实例</h3><h4 id="Maybe-1"><a href="#Maybe-1" class="headerlink" title="Maybe"></a>Maybe</h4><p>Maybe是一个应用函子：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Applicative</span> <span class="type">Maybe</span> <span class="keyword">where</span></span></span><br><span class="line">    pure = <span class="type">Just</span></span><br><span class="line">    <span class="type">Nothing</span> &lt;*&gt; _ = <span class="type">Nothing</span></span><br><span class="line">    (<span class="type">Just</span> f) &lt;*&gt; something = fmap f something</span><br></pre></td></tr></table></figure><ul><li><code>pure</code>函数：将一个值放在默认的上下文中，而对于Maybe，默认的上下文就是Just，所以pure x = Just x</li><li><code>&lt;*&gt;</code>函数：将装有函数的函子中的函数应用另一个函子中<ul><li>第一个参数是Nothing，即第一个函子不包含函数，那返回的结果就也会是Nothing</li><li>第一个参数是装有函数f的函子Just f，将其中的函数f应用在函子something中，只需要将f提取出来使用fmap应用在函子something中即可</li></ul></li></ul><p>实际应用的例子：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; <span class="type">Just</span> (+<span class="number">3</span>) &lt;*&gt; <span class="type">Just</span> <span class="number">9</span></span><br><span class="line"><span class="type">Just</span> <span class="number">12</span></span><br><span class="line"><span class="title">ghci</span>&gt; pure (+<span class="number">3</span>) &lt;*&gt; <span class="type">Just</span> <span class="number">9</span></span><br><span class="line"><span class="type">Just</span> <span class="number">12</span></span><br><span class="line"><span class="title">ghci</span>&gt; (+<span class="number">3</span>) &lt;$&gt; <span class="type">Just</span> <span class="number">9</span></span><br><span class="line"><span class="type">Just</span> <span class="number">12</span></span><br><span class="line"><span class="title">ghci</span>&gt; <span class="type">Nothing</span> &lt;*&gt; <span class="type">Just</span> <span class="number">9</span></span><br><span class="line"><span class="type">Nothing</span></span><br></pre></td></tr></table></figure><p>第一个例子，Just (+3)是一个包含函数(+3)的函子，将其应用在函子Just 9中，将Just (+3)中的函数(+3)提取出来，应用在Just 9中，得到了Just 12</p><p>第二个例子，可以发现，在这里pure (+3)和Just (+3)等效，因为pure将函数(+3)放在默认上下文中，也就是Just中了</p><p>而&lt;*&gt;能做的不止这些，他可以连续传入更多函子作为参数，比如：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; pure (+) &lt;*&gt; <span class="type">Just</span> <span class="number">3</span> &lt;*&gt; <span class="type">Just</span> <span class="number">9</span></span><br><span class="line"><span class="type">Just</span> <span class="number">12</span></span><br><span class="line"><span class="title">ghci</span>&gt; pure (\x y z -&gt; x + y + z) &lt;*&gt; <span class="type">Just</span> <span class="number">3</span> &lt;*&gt; <span class="type">Just</span> <span class="number">4</span> &lt;*&gt; <span class="type">Just</span> <span class="number">5</span></span><br><span class="line"><span class="type">Just</span> <span class="number">12</span></span><br></pre></td></tr></table></figure><p>&lt;*&gt;函数一样是默认左结合的，pure (+) &lt;*&gt; Just 3 &lt;*&gt; Just 9相当于(pure (+) &lt;*&gt; Just 3) &lt;*&gt; Just 9，而pure (+) &lt;*&gt; Just 3将(+)应用在Just 3上，得到的就是Just (+3)一个包含函数的函子，又将其通过&lt;*&gt;应用在了Just 9上，得到了Just 12:</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  pure (\x y z -&gt; x + y + z) &lt;*&gt; <span class="type">Just</span> <span class="number">3</span> &lt;*&gt; <span class="type">Just</span> <span class="number">4</span> &lt;*&gt; <span class="type">Just</span> <span class="number">5</span></span><br><span class="line">= (pure (\x y z -&gt; x + y + z) &lt;*&gt; <span class="type">Just</span> <span class="number">3</span>) &lt;*&gt; <span class="type">Just</span> <span class="number">4</span> &lt;*&gt; <span class="type">Just</span> <span class="number">5</span></span><br><span class="line">= (<span class="type">Just</span> (\y z -&gt; <span class="number">3</span> + y + z) &lt;*&gt; <span class="type">Just</span> <span class="number">4</span>) &lt;*&gt; <span class="type">Just</span> <span class="number">5</span></span><br><span class="line">= <span class="type">Just</span> (\z -&gt; <span class="number">3</span> + <span class="number">4</span> + z) &lt;*&gt; <span class="type">Just</span> <span class="number">5</span> = <span class="type">Just</span> (+<span class="number">7</span>) &lt;*&gt; <span class="type">Just</span> <span class="number">5</span></span><br><span class="line">= <span class="type">Just</span> <span class="number">12</span></span><br></pre></td></tr></table></figure><p>所以可以使用类似pure f &lt;*&gt; x &lt;*&gt; y &lt;*&gt; …来将一个普通多元函数f应用在多个函子上。</p><p>而且pure f &lt;*&gt; x实际上先将普通函数f放在上下文中，然后执行&lt;*&gt;时再将其提取出来执行fmap，所以它就相当于将普通函数应用在函子x上，即fmap f x，也可以写成f &lt;$&gt; x。所以常用的写法就是：</p><p style="text-align: center;">f <$> x <*> y <*> ...</*></*></$></p><h4 id="-1"><a href="#-1" class="headerlink" title="[]"></a>[]</h4><p>列表也是一个应用函子：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Applicative</span> [] <span class="keyword">where</span></span></span><br><span class="line">    pure x = [x]</span><br><span class="line">    fs &lt;*&gt; xs = [f x | f &lt;- fs, x &lt;- xs]</span><br></pre></td></tr></table></figure><ul><li><code>pure</code>函数：对于列表而言，一个值的最小上下文就是只包含这个值的列表[x]</li><li><code>&lt;*&gt;</code>函数：列表的&lt;*&gt;函数是通过列表推导来实现的。因为不同于Maybe的Just只包含一个值，列表可以包含很多值，第一个传入的列表中可能会包含很多函数，第二个传入的列表也会包含很多值，所以就需要先从第一个列表中取出一个函数然后依次应用在第二个列表的每个值中，再取出第一个列表中的第二个函数应用在第二个列表的每个值中……最终返回得到的所有结果的列表</li></ul><p>使用例子：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; [(+<span class="number">3</span>), (*<span class="number">2</span>)] &lt;*&gt; [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">[<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">4</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; [(+), (*)]  &lt;*&gt;  [<span class="number">1</span>, <span class="number">2</span>]  &lt;*&gt;  [<span class="number">3</span>, <span class="number">4</span>]  </span><br><span class="line">[<span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br></pre></td></tr></table></figure><h4 id="IO-1"><a href="#IO-1" class="headerlink" title="IO"></a>IO</h4><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Applicative</span> <span class="type">IO</span> <span class="keyword">where</span></span></span><br><span class="line">    pure = return</span><br><span class="line">    a &lt;*&gt; b = <span class="keyword">do</span></span><br><span class="line">        f &lt;- a</span><br><span class="line">        x &lt;- b</span><br><span class="line">        return (f x)</span><br></pre></td></tr></table></figure><p>也不难理解，pure函数直接将传入的值return，相当于放在了IO的上下文中。而&lt;*&gt;函数先将两个IO中内容提取出来，然后应用函数后return，形成新的IO函子</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; (++) &lt;$&gt; getLine &lt;*&gt; getLine</span><br><span class="line"><span class="type">Line1</span></span><br><span class="line"><span class="type">Line2</span></span><br><span class="line"><span class="string">&quot;Line1Line2&quot;</span></span><br></pre></td></tr></table></figure><h4 id="gt-r-1"><a href="#gt-r-1" class="headerlink" title="(-&gt;) r"></a>(-&gt;) r</h4><p>(-&gt;) r同样也是一个应用函子，和函子的分析一样，先来分析它的&lt;*&gt;函数的类型签名：</p><p style="text-align: center;"><*> :: f (a -> b) -> f a -> f b</*></p><p>其中f为(-&gt;) r，将其代入并替换为中缀：</p><p style="text-align: center;"><*> :: (r -> a -> b) -> (r -> a) -> (r -> b)</*></p><p>可以看出它接收两个函数f :: r -&gt; a -&gt; b、g :: r -&gt; a，返回另一个函数h :: (r -&gt; b)</p><p>那么返回的函数的输入为r，输出为b，所以先对输入应用函数g得到a，然后在对r和a应用f得到b，所以推测&lt;*&gt;函数的操作就是：</p><p style="text-align: center;">\x -> f x (g x)</p><p>于是：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Applicative</span> ((-&gt;) r) <span class="keyword">where</span></span></span><br><span class="line">    pure x = (\_ -&gt; x)</span><br><span class="line">    f &lt;*&gt; g = \x -&gt; f x (g x)</span><br></pre></td></tr></table></figure><p>将一个值放在函数的上下文中，最小上下文就应该返回这个值本身，所以pure函数定义为(_ -&gt; x)，即无论输入什么，都返回x</p><p>应用函子的&lt;*&gt;函数接收两个函子，返回一个新的函子。对于(-&gt;) r，它接收两个函数，返回一个新的函数。具体例子：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; (+) &lt;$&gt; (+<span class="number">3</span>) &lt;*&gt; (*<span class="number">100</span>) $ <span class="number">5</span></span><br><span class="line"><span class="number">508</span></span><br></pre></td></tr></table></figure><p>执行这句时发生了什么？：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  (+) &lt;$&gt; (+<span class="number">3</span>) &lt;*&gt; (*<span class="number">100</span>) $ <span class="number">5</span></span><br><span class="line">= ((+) &lt;$&gt; (+<span class="number">3</span>)) &lt;*&gt; (*<span class="number">100</span>) $ <span class="number">5</span></span><br><span class="line">= ((+) . (+<span class="number">3</span>)) &lt;*&gt; (*<span class="number">100</span>) $ <span class="number">5</span> = (\a -&gt; (+) ((+<span class="number">3</span>) a)) &lt;*&gt; (*<span class="number">100</span>) $ <span class="number">5</span></span><br><span class="line">= (\a b -&gt; (a + <span class="number">3</span> + b)) &lt;*&gt; (*<span class="number">100</span>) $ <span class="number">5</span></span><br><span class="line">= (\x -&gt; x + <span class="number">3</span> + ((*<span class="number">100</span>) x)) $ <span class="number">5</span></span><br><span class="line">= (\x -&gt; x + <span class="number">3</span> + x * <span class="number">100</span>) $ <span class="number">5</span></span><br><span class="line">= <span class="number">5</span> + <span class="number">3</span> + <span class="number">5</span> * <span class="number">100</span> = <span class="number">508</span></span><br><span class="line">= (<span class="number">5</span> + <span class="number">3</span>) + (<span class="number">5</span> * <span class="number">100</span>)</span><br></pre></td></tr></table></figure><p>所以就相当于先对输入分别执行(+3)和(*100)，然后将两个结果执行了(+)</p><p>同样：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; (\x y z -&gt; [x,y,z]) &lt;$&gt; (+<span class="number">3</span>) &lt;*&gt; (*<span class="number">2</span>) &lt;*&gt; (/<span class="number">2</span>) $ <span class="number">5</span>  </span><br><span class="line">[<span class="number">8.0</span>,<span class="number">10.0</span>,<span class="number">2.5</span>]  </span><br></pre></td></tr></table></figure><p>先对5分别执行(+3)、(*2)、(/2)，然后将得到的三个结果传入(\x y z -&gt; [x,y,z])得到了最终的结果</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  f &lt;$&gt; g &lt;*&gt; h &lt;*&gt; i</span><br><span class="line">= (\x -&gt; f (g x) (h x) (i x))</span><br></pre></td></tr></table></figure><h4 id="ZipList"><a href="#ZipList" class="headerlink" title="ZipList"></a>ZipList</h4><p>普通列表实现的&lt;*&gt;函数是将每个函数应用在所有值上，但还有一种实现方法是将每个函数应用在对应值上，因为同一个类型不能存在同一函数的两种实现形式，所以引入了一个新的列表ZipList，包含在<code>Control.Applicative</code>模块中</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Applicative</span> <span class="type">ZipList</span> <span class="keyword">where</span></span></span><br><span class="line">    pure x = <span class="type">ZipList</span> (repeat x)</span><br><span class="line">    <span class="type">ZipList</span> fs &lt;*&gt; <span class="type">ZipList</span> xs = <span class="type">ZipList</span> (zipWith ($) fs xs)</span><br></pre></td></tr></table></figure><p>但是ZipList并不是Show的实例，所以不能直接显示出来，要使用<code>getZipList</code>来获取它内部的列表：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; getZipList $ (+) &lt;$&gt; <span class="type">ZipList</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] &lt;*&gt; <span class="type">ZipList</span> [<span class="number">100</span>,<span class="number">100.</span>.]  </span><br><span class="line">[<span class="number">101</span>,<span class="number">102</span>,<span class="number">103</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; getZipList $ (,,) &lt;$&gt; <span class="type">ZipList</span> <span class="string">&quot;dog&quot;</span> &lt;*&gt; <span class="type">ZipList</span> <span class="string">&quot;cat&quot;</span> &lt;*&gt; <span class="type">ZipList</span> <span class="string">&quot;rat&quot;</span>  </span><br><span class="line">[(&#x27;d&#x27;,&#x27;c&#x27;,&#x27;r&#x27;),(&#x27;o&#x27;,&#x27;a&#x27;,&#x27;a&#x27;),(&#x27;g&#x27;,&#x27;t&#x27;,&#x27;t&#x27;)]  </span><br></pre></td></tr></table></figure><h3 id="Applicative-Functor-Laws"><a href="#Applicative-Functor-Laws" class="headerlink" title="Applicative Functor Laws"></a>Applicative Functor Laws</h3><p>应用函子一般有四个定律，都是保证pure的正确性的：</p><ol><li><code>Identity law</code>：pure id &lt;*&gt; v = v</li><li><code>Homomorphism</code>：pure f &lt;*&gt; pure x = pure (f x)</li><li><code>Interchange</code>：u &lt;*&gt; pure v = pure ($ v) &lt;*&gt; u</li><li><code>Composition</code>：u &lt;*&gt; (v &lt;*&gt; w) = pure (.) &lt;*&gt; u &lt;*&gt; v &lt;*&gt; w</li></ol><h3 id="Intuition-1"><a href="#Intuition-1" class="headerlink" title="Intuition"></a>Intuition</h3><p>理解应用函子的方式也是将其看作是计算上下文（context），比如要计算：<br>$$<br>[[\ \ g\ x_1\ x_2\ \cdots\ x_n\ \ ]]<br>$$</p><p>其中$x_i$的类型是$f\ t_i$，$f$是应用函子（看作上下文）。而函数$g$的类型是：</p><p>$$<br>t_1\to t_2\to\cdots\to t_n\to t<br>$$</p><p>所以双括号（idiom brackets）的作用是将一个普通函数应用在包含在上下文中的参数上。$g\ x_1$可以通过fmap来执行，将$g$提升（lift）到$x_1$的上下文中，然后应用在$x_1$上。但是fmap返回的结果是一个函子，换句话说，$g\ x_1$结果的类型是：</p><p>$$<br>f\ \ (t_2\to t_3\to\cdots\to t_n\to t)<br>$$</p><p>但是fmap并不能将上下文中的函数应用在上下文中的参数上，于是应用函子的&lt;*&gt;函数提供了这个方法，所以计算$[[\ g\ x_1\ x_2\ \cdots\ x_n\ ]]$，只需要：</p><p style="text-align: center;">g <$> x1 <*> x2 <*> ... <*> xn</*></*></*></$></p><p>而pure函数的作用就是将一个不在上下文中的值（函数或参数）提升到上下文中，但不进行其他操作。比如参数$x_2$如果不在上下文中，需要用pure提升到上下文中才能按上面计算：</p><p style="text-align: center;">g <$> x1 <*> pure x2 <*> ... <*> xn</*></*></*></$></p><h3 id="常用函数-1"><a href="#常用函数-1" class="headerlink" title="常用函数"></a>常用函数</h3><h4 id="liftA-amp-liftA2-amp-liftA3"><a href="#liftA-amp-liftA2-amp-liftA3" class="headerlink" title="liftA &amp; liftA2 &amp; liftA3"></a>liftA &amp; liftA2 &amp; liftA3</h4><p style="text-align: center;">liftA :: Applicative f => (a -> b) -> f a -> f b</p><p style="text-align: center;">liftA2 :: Applicative f => (a -> b -> c) -> f a -> f b -> f c</p><p style="text-align: center;">liftA3 :: Applicative f => (a -> b -> c -> d) -> f a -> f b -> f c -> f d</p><p>不难推测liftA就是fmap，<code>liftA2 f x1 x2</code>相当于<code>f &lt;$&gt; x1 &lt;*&gt; x2</code>，<code>liftA3 f x1 x2 x3</code>相当于<code>f &lt;$&gt; x1 &lt;*&gt; x2 &lt;*&gt; x3</code></p><h4 id="lt-amp-gt"><a href="#lt-amp-gt" class="headerlink" title="&lt;* &amp; *&gt;"></a>&lt;* &amp; *&gt;</h4><p>类型类似函子的<code>&lt;$</code>和<code>$&gt;</code>：</p><p style="text-align: center;">(&lt;*) :: Applicative f => f a -> f b -> f a</p><p style="text-align: center;">(*>) :: Applicative f => f a -> f b -> f b</p><p>&lt;*接收两个函子，如果两个函子中又一个为空，就返回空，否则返回的类型与第一个函子相同。*&gt;反过来</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; <span class="type">Just</span> <span class="number">3</span> &lt;* <span class="type">Just</span> <span class="number">4</span></span><br><span class="line"><span class="type">Just</span> <span class="number">3</span></span><br><span class="line"><span class="title">ghci</span>&gt; <span class="type">Just</span> <span class="number">3</span> *&gt; <span class="type">Just</span> <span class="number">4</span></span><br><span class="line"><span class="type">Just</span> <span class="number">4</span></span><br><span class="line"><span class="title">ghci</span>&gt; <span class="type">Nothing</span> &lt;* <span class="type">Just</span> <span class="number">3</span></span><br><span class="line"><span class="type">Nothing</span></span><br><span class="line"><span class="title">ghci</span>&gt; <span class="type">Nothing</span> *&gt; <span class="type">Just</span> <span class="number">3</span></span><br><span class="line"><span class="type">Nothing</span></span><br><span class="line"><span class="title">ghci</span>&gt; [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] &lt;* [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] *&gt; [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">[<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; [] &lt;* [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">[]</span><br><span class="line"><span class="title">ghci</span>&gt; [] *&gt; [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">[]</span><br></pre></td></tr></table></figure><h4 id="lt-gt-1"><a href="#lt-gt-1" class="headerlink" title="&lt;**&gt;"></a>&lt;**&gt;</h4><p style="text-align: center;">(**) :: Applicative f => f a -> f (a -> b) -> f b</p><p>接收的参数是&lt;*&gt;反转过来的，即先接收一个参数函子，然后接收一个函数函子，在将其应用返回。但是和flip(&lt;*&gt;)不同，它先取参数函子的每个参数，然后再取函数函子中的函数逐个应用：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; [(+<span class="number">1</span>), (+<span class="number">2</span>), (+<span class="number">3</span>)] &lt;*&gt; [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">[<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; [<span class="number">1</span>, <span class="number">2</span>] &lt;**&gt; [(+<span class="number">1</span>), (+<span class="number">2</span>), (+<span class="number">3</span>)]</span><br><span class="line">[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; flip(&lt;*&gt;) [<span class="number">1</span>, <span class="number">2</span>] [(+<span class="number">1</span>), (+<span class="number">2</span>), (+<span class="number">3</span>)]</span><br><span class="line">[<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br></pre></td></tr></table></figure><h4 id="when-amp-unless"><a href="#when-amp-unless" class="headerlink" title="when &amp; unless"></a>when &amp; unless</h4><p style="text-align: center;">when :: Applicative f => Bool -> f () -> f ()</p><p>传入的第一个是一个结果为Bool类型的测试，如果测试为True，则调用第二个参数，否则返回pure ()。（when函数在上文IO操作中使用过）</p><p>unless则与when相反，测试为True返回pure ()</p><h4 id="sequenceA"><a href="#sequenceA" class="headerlink" title="sequenceA"></a>sequenceA</h4><p style="text-align: center;">sequenceA :: (Traversable t, Applicative f) => t (f a) -> f (t a)</p><p>应用在列表上时，它的类型相当于：</p><p style="text-align: center;">[f a] -> f [a]</p><p>所以在列表上它的使用方法：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; sequenceA [<span class="type">Just</span> <span class="number">3</span>, <span class="type">Just</span> <span class="number">2</span>, <span class="type">Just</span> <span class="number">1</span>]  </span><br><span class="line"><span class="type">Just</span> [<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]  </span><br><span class="line"><span class="title">ghci</span>&gt; sequenceA [<span class="type">Just</span> <span class="number">3</span>, <span class="type">Nothing</span>, <span class="type">Just</span> <span class="number">1</span>]  </span><br><span class="line"><span class="type">Nothing</span>  </span><br><span class="line"><span class="title">ghci</span>&gt; sequenceA [(+<span class="number">3</span>),(+<span class="number">2</span>),(+<span class="number">1</span>)] <span class="number">3</span>  </span><br><span class="line">[<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>]  </span><br><span class="line"><span class="title">ghci</span>&gt; sequenceA [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]]  </span><br><span class="line">[[<span class="number">1</span>,<span class="number">4</span>],[<span class="number">1</span>,<span class="number">5</span>],[<span class="number">1</span>,<span class="number">6</span>],[<span class="number">2</span>,<span class="number">4</span>],[<span class="number">2</span>,<span class="number">5</span>],[<span class="number">2</span>,<span class="number">6</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">3</span>,<span class="number">5</span>],[<span class="number">3</span>,<span class="number">6</span>]]  </span><br><span class="line"><span class="title">ghci</span>&gt; sequenceA [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>],[]]  </span><br><span class="line">[]  </span><br></pre></td></tr></table></figure><p>它在对同一个参数应用不同函数时很有用：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; map (\f -&gt; f <span class="number">7</span>) [(&gt;<span class="number">4</span>), (&lt;<span class="number">10</span>), odd]  </span><br><span class="line">[<span class="type">True</span>,<span class="type">True</span>,<span class="type">True</span>]  </span><br><span class="line"><span class="title">ghci</span>&gt; sequenceA [(&gt;<span class="number">4</span>), (&lt;<span class="number">10</span>), odd] <span class="number">7</span>  </span><br><span class="line">[<span class="type">True</span>,<span class="type">True</span>,<span class="type">True</span>]  </span><br></pre></td></tr></table></figure><h2 id="Monad"><a href="#Monad" class="headerlink" title="Monad"></a>Monad</h2><p>单子（Monad）是对Applicative Functor的扩展（但是诞生比Applicative早），Functor的<code>&lt;$&gt;</code>函数实现了将普通函数应用在上下文值上，Applicative的<code>&lt;*&gt;</code>函数将上下文中函数应用在上下文值上。而Monad提供了一个函数<code>&gt;&gt;=</code>（bind），将一个接收普通值返回上下文值的函数应用在上下文值上：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Applicative</span> m =&gt; <span class="type">Monad</span> m <span class="keyword">where</span></span></span><br><span class="line">    (&gt;&gt;=) :: m a -&gt; (a -&gt; m b) -&gt; m b</span><br><span class="line">    (&gt;&gt;) :: m a -&gt; m b -&gt; m b</span><br><span class="line">    return :: a -&gt; m a</span><br><span class="line">    m &gt;&gt; n = m &gt;&gt;= \_ -&gt; n</span><br><span class="line">    return = pure</span><br></pre></td></tr></table></figure><ul><li><code>return</code>函数：和<code>pure</code>一样，只是有另一个名字</li><li><code>&gt;&gt;</code>函数：提供了默认的实现方法，它的作用和Applicative的*&gt;函数一样</li><li><code>&gt;&gt;=</code>函数（bind）：比Applicative升级的函数，第一个参数是一个单子，第二个参数是一个接收值返回单子的函数，将这个函数应用在第一个参数单子中的值上，并返回得到的新单子</li></ul><h3 id="Monad实例"><a href="#Monad实例" class="headerlink" title="Monad实例"></a>Monad实例</h3><h4 id="Maybe-2"><a href="#Maybe-2" class="headerlink" title="Maybe"></a>Maybe</h4><p>Maybe是一个单子实例，Applicative已经为它实现了return，因此只需要&gt;&gt;=函数：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Monad</span> <span class="type">Maybe</span> <span class="keyword">where</span></span></span><br><span class="line">    (<span class="type">Just</span> x) &gt;&gt;= f = f x </span><br><span class="line">    <span class="type">Nothing</span>  &gt;&gt;= _ = <span class="type">Nothing</span></span><br></pre></td></tr></table></figure><p>根据定义就很容易实现Maybe的&gt;&gt;=函数了，而且也很好理解</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; <span class="type">Just</span> <span class="number">1</span> &gt;&gt;= \x -&gt; <span class="type">Just</span> (x + <span class="number">1</span>)</span><br><span class="line"><span class="type">Just</span> <span class="number">2</span></span><br><span class="line"><span class="title">ghci</span>&gt; <span class="type">Just</span> <span class="number">1</span> &gt;&gt;= \x -&gt; return (x + <span class="number">1</span>)</span><br><span class="line"><span class="type">Just</span> <span class="number">2</span></span><br><span class="line"><span class="title">ghci</span>&gt; <span class="type">Nothing</span> &gt;&gt;= \x -&gt; <span class="type">Just</span> (x + <span class="number">1</span>)</span><br><span class="line"><span class="type">Nothing</span></span><br><span class="line"><span class="title">ghci</span>&gt; <span class="type">Just</span> <span class="number">1</span> &gt;&gt;= \x -&gt; <span class="type">Just</span> (x + <span class="number">1</span>) &gt;&gt; <span class="type">Nothing</span> &gt;&gt;= \y -&gt; <span class="type">Just</span> (y + <span class="number">1</span>)</span><br><span class="line"><span class="type">Nothing</span></span><br></pre></td></tr></table></figure><p>最后一个例子中出现了&gt;&gt; Nothing，这时Nothing前的部分全都相当于没用，因为&gt;&gt;操作符的左右两边只要有一个出现Nothing，那整体就会是Nothing。这个特性可以用于在中途随时判断失误，只要有一处失误，结果就会是Nothing</p><h4 id="-2"><a href="#-2" class="headerlink" title="[]"></a>[]</h4><p>列表也是一个单子：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Monad</span> [] <span class="keyword">where</span></span></span><br><span class="line">    xs &gt;&gt;= f = concat (map f xs)</span><br></pre></td></tr></table></figure><p>将这个函数应用在xs的每个值上，将返回的所有列表平铺成一个列表：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>] &gt;&gt;= \x -&gt; [x,-x]  </span><br><span class="line">[<span class="number">3</span>,<span class="number">-3</span>,<span class="number">4</span>,<span class="number">-4</span>,<span class="number">5</span>,<span class="number">-5</span>]  </span><br><span class="line"><span class="title">ghci</span>&gt; [<span class="number">1</span>,<span class="number">2</span>] &gt;&gt;= \n -&gt; [&#x27;a&#x27;,&#x27;b&#x27;] &gt;&gt;= \ch -&gt; return (n,ch)  </span><br><span class="line">[(<span class="number">1</span>,&#x27;a&#x27;),(<span class="number">1</span>,&#x27;b&#x27;),(<span class="number">2</span>,&#x27;a&#x27;),(<span class="number">2</span>,&#x27;b&#x27;)]  </span><br></pre></td></tr></table></figure><h4 id="IO-2"><a href="#IO-2" class="headerlink" title="IO"></a>IO</h4><p>IO也是一个单子，但是实现方法比较深奥（逃</p><h4 id="gt-r-2"><a href="#gt-r-2" class="headerlink" title="(-&gt;) r"></a>(-&gt;) r</h4><p>(-&gt;) r也是一个单子，和Functor、Applicative一样，先分析它的&gt;&gt;=类型签名：</p><p style="text-align: center;">(>>=) :: (-> r) a -> (a -> (-> r) b) -> (-> r) b</p><p style="text-align: center;">(>>=) :: (r -> a) -> (a -> r -> b) -> (r -> b)</p><p>也可以看出来，它接收两个函数f :: r -&gt; a、g :: a -&gt; r -&gt; b，然后返回一个新的函数h :: r -&gt; b</p><p>那么函数h接收一个类型为r的参数，返回一个类型为b的值。所以先对输入应用f得到类型为a的中间值，然后再将这个值和输入参数一起传入函数g得到结果。所以函数h的定义应该是：</p><p style="text-align: center;">\x -> g (f x) x</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Monad</span> ((-&gt;) r) <span class="keyword">where</span></span></span><br><span class="line">    f &gt;&gt;= g = \x -&gt; g (f x) x</span><br></pre></td></tr></table></figure><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; (+<span class="number">3</span>) &gt;&gt;= (+) $ <span class="number">1</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="title">ghci</span>&gt; (+) &lt;$&gt; (+<span class="number">3</span>) &lt;*&gt; id $ <span class="number">1</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><h3 id="do-notation"><a href="#do-notation" class="headerlink" title="do-notation"></a>do-notation</h3><p>Haskell的do语句为链式的&gt;&gt;=应用提供了类似命令式（imperative style）的语法糖。比如<code>a &gt;&gt;= \x -&gt; b &gt;&gt; c &gt;&gt;= \y -&gt; d</code>：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">a</span> &gt;&gt;= \x -&gt;</span><br><span class="line"><span class="title">b</span> &gt;&gt;</span><br><span class="line"><span class="title">c</span> &gt;&gt;= \y -&gt;</span><br><span class="line"><span class="title">d</span></span><br></pre></td></tr></table></figure><p>其中有abcd四个值，可以看出a中内容绑定到了x上，c中内容绑定到了y上。使用do语句来表示这个操作可以写成：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">do</span> &#123; x &lt;- a </span><br><span class="line">   ;      b </span><br><span class="line">   ; y &lt;- c </span><br><span class="line">   ;      d </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>其中的大括号和分号可以省略不写（挤在一行时不能省略）。do语句也只是一个语法糖，它可以递归地转换成普通的Monad操作语句：</p><ul><li><code>do e</code>：e</li><li><code>do &#123; e; ... &#125;</code>：e &gt;&gt; do { … }</li><li><code>do &#123; v &lt;- e; ... &#125;</code>：e &gt;&gt;= \v -&gt; do { … }</li><li><code>do &#123; let ...; ... &#125;</code>：let … in do { … }</li></ul><h4 id="ApplicativeDo"><a href="#ApplicativeDo" class="headerlink" title="ApplicativeDo"></a>ApplicativeDo</h4><p>比如如下一个do语句：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">do</span> x &lt;- a </span><br><span class="line">   y &lt;- b </span><br><span class="line">   z &lt;- c </span><br><span class="line">   return (f x y z)</span><br></pre></td></tr></table></figure><p>它可以转化成：</p><p style="text-align: center;">a >>= \x -> b >>= \y -> c >>= \z -> return (f x y z)</p><p>但是经过观察可以发现，整个语句实际上将函数f应用在了三个上下文中的值上，所以仅用Applicative的&lt;$&gt;和&lt;*&gt;完全可以实现：</p><p style="text-align: center;">f <$> a <*> b <*> c</*></*></$></p><p>而且在运行的时候Applicative的效率会比Monad高，所以Haskell会将do语句尽可能优先转换为Applicative的表示方法然后再计算</p><h3 id="Monad-Laws"><a href="#Monad-Laws" class="headerlink" title="Monad Laws"></a>Monad Laws</h3><ol><li><code>Left identity</code>： return a &gt;&gt;= k      <code>=</code> k a</li><li><code>Right identity</code>：m        &gt;&gt;= return <code>=</code> m</li><li><code>Associativity</code>：(m &gt;&gt;= g) &gt;&gt;= h      <code>=</code> m &gt;&gt;= (\x -&gt; g x &gt;&gt;= h)</li></ol><p>前两个定律很好理解：</p><ul><li>将a注入上下文之后绑定（bind）给函数k(:: a -&gt; m a)，相当于直接将a直接传入函数k</li><li>将已经包含在上下文中的值绑定给return函数，相当于保持不变</li></ul><p>第三个定律是结合律，把它写成更像结合律的表示方法是：</p><p style="text-align: center;">(m >>= (\x -> g x)) >>= h <code>=</code> m >>= (\x -> g x >>= h)</p><h4 id="组合运算符（-gt-gt-）形式"><a href="#组合运算符（-gt-gt-）形式" class="headerlink" title="组合运算符（&gt;=&gt;）形式"></a>组合运算符（&gt;=&gt;）形式</h4><p><code>Control.Monad</code>模块中还定义了函数<code>&gt;=&gt;</code>（Kleisli-composition operator）：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">infixr</span> <span class="number">1</span> &gt;=&gt;</span><br><span class="line">(&gt;=&gt;) :: <span class="type">Monad</span> m =&gt; (a -&gt; m b) -&gt; (b -&gt; m c) -&gt; (a -&gt; m c)</span><br><span class="line"><span class="title">f</span> &gt;=&gt; g = \x -&gt; f x &gt;&gt;= g</span><br></pre></td></tr></table></figure><p>使用&gt;=&gt;运算符可以将两个用于绑定的函数结合在一起。用它表示的Monad定律更加清晰直观：</p><ol><li><code>Left identity</code>：return &gt;=&gt; f <code>=</code> f</li><li><code>Right identity</code>：f &gt;=&gt; return <code>=</code> f</li><li><code>Associativity</code>：(f &gt;=&gt; g) &gt;=&gt; h <code>=</code> f &gt;=&gt; (g &gt;=&gt; h)</li></ol><h4 id="do-notation形式"><a href="#do-notation形式" class="headerlink" title="do-notation形式"></a>do-notation形式</h4><p>Monad的这三个定律还可以使用do语句来描述：</p><ol><li><code>Left identity</code>： <figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">do</span> &#123; x&#x27; &lt;- return x;</span><br><span class="line">     f x&#x27;             =   <span class="keyword">do</span> &#123; f x &#125; </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><code>Right identity</code>： <figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">do</span> &#123; x &lt;- m; </span><br><span class="line">     return x         =   <span class="keyword">do</span> &#123; m &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><code>Associativity</code>： <figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">do</span> &#123; y &lt;- <span class="keyword">do</span> &#123; x &lt;- m;       <span class="keyword">do</span> &#123; x &lt;- m;              <span class="keyword">do</span> &#123; x &lt;- m;</span><br><span class="line">               f x                <span class="keyword">do</span> &#123; y &lt;- f x;            y &lt;- f x;</span><br><span class="line">             &#125;           =             g y         =        g y</span><br><span class="line">     g y                             &#125;                    &#125;</span><br><span class="line">   &#125;                            &#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="Intuition-2"><a href="#Intuition-2" class="headerlink" title="Intuition"></a>Intuition</h3><p>Monad也可以很自然地看成Applicative的升级版，比如Applicative的操作全部是固定的，而Monad的操作可以在中途突然改变</p><p>同时Monad也完成了Functor和Applicative无法完成的操作。比如要用fmap和实现&gt;&gt;=函数（即达成操作 m a -&gt; (a -&gt; m b) -&gt; m b），先假设 f :: a -&gt; m b，那么fmap f的类型就会是 m a -&gt; m (m b)，将m a应用在fmap f上会得到结果m (m b)，而不是m b。但是目前只可以使用pure将一个值装入上下文中（a -&gt; m a），而没有一个函数可以从上下文中提取值（m a -&gt; a）。那么就需要定义一个新的函数来实现这个操作的效果（m (m b) -&gt; m b）。因此Monad的另一个等效的定义方法是：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Applicative</span> m =&gt; <span class="type">Monad&#x27;</span> m <span class="keyword">where</span></span></span><br><span class="line">    join :: m (m a) -&gt; m a </span><br><span class="line">    </span><br><span class="line">    (&gt;&gt;=) :: m a -&gt; (a -&gt; m b) -&gt; m b </span><br><span class="line">    x &gt;&gt;= f = join $ fmap f x</span><br></pre></td></tr></table></figure><p>但是定义&gt;&gt;=函数会更为直观方便，所以Haskell采用了用&gt;&gt;=函数定义Monad的方法</p><p>同时Haskell还提供了join函数的定义：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">join</span> :: <span class="type">Monad</span> m =&gt; m (m a) -&gt; m a </span><br><span class="line"><span class="title">join</span> x = x &gt;&gt;= id</span><br></pre></td></tr></table></figure><h3 id="常用函数-2"><a href="#常用函数-2" class="headerlink" title="常用函数"></a>常用函数</h3><h4 id="liftM-amp-ap"><a href="#liftM-amp-ap" class="headerlink" title="liftM &amp; ap"></a>liftM &amp; ap</h4><p style="text-align: center;">liftM :: Monad m => (a -> b) -> m a -> m b</p><p style="text-align: center;">ap :: Monad m => m (a -> b) -> m a -> m b</p><p>所以liftM其实就是fmap、ap就是&lt;*&gt;，但是老版本的GHC定义Monad并没有Functor、Applicative的约束，所以实现了liftM、ap，并且保留了这个名字</p><p>因此一个单子也可以通过<code>pure = return</code>、<code>(&lt;*&gt;) = ap</code>直接成为应用函子的实例</p><h4 id="sequence-1"><a href="#sequence-1" class="headerlink" title="sequence"></a>sequence</h4><p style="text-align: center;">sequence :: Monad m => [m a] -> m [a]</p><p>sequence的作用显而易见，而且在IO部分也使用到了。但是这个版本是在<code>GHC.Base</code>模块中定义的，还有一个更广泛的使用Traversable的定义在<code>Data.Traversable</code>模块中 </p><h4 id="replicateM"><a href="#replicateM" class="headerlink" title="replicateM"></a>replicateM</h4><p style="text-align: center;">replicateM :: Applicative m => Int -> m a -> m [a]</p><h4 id="mapM-amp-forM"><a href="#mapM-amp-forM" class="headerlink" title="mapM &amp; forM"></a>mapM &amp; forM</h4><p style="text-align: center;">mapM :: Monad m => (a -> m b) -> [a] -> m [b]</p><p style="text-align: center;">forM :: Monad m => [a] -> (a -> m b) -> m [b]</p><p>forM的用法在IO部分已经说过，mapM和forM都在<code>Data.Traversable</code>模块中有广泛版本</p><p>还有一些其他的函数：filterM、zipWithM、foldM、forever，通过名字就可以看出用法，是将原来仅使用与列表的函数提升至可以适用于所有单子</p><p>并且在函数名后加下划线，比如sequence_、mapM_，会忽略返回值（最终结果为<code>m ()</code>）</p><h4 id="lt-lt-amp-gt-gt-amp-lt-lt"><a href="#lt-lt-amp-gt-gt-amp-lt-lt" class="headerlink" title="=&lt;&lt; &amp; &gt;=&gt; &amp; &lt;=&lt;"></a>=&lt;&lt; &amp; &gt;=&gt; &amp; &lt;=&lt;</h4><p>（<code>&gt;=&gt;</code>操作符在上面<a href="#%E7%BB%84%E5%90%88%E8%BF%90%E7%AE%97%E7%AC%A6%EF%BC%88-gt-gt-%EF%BC%89%E5%BD%A2%E5%BC%8F">Monad Laws</a>部分已经给出了定义）</p><ul><li>x &gt;&gt;= f <code>=</code> f =&lt;&lt; x </li><li>f &gt;=&gt; g <code>=</code> g &lt;=&lt; f </li></ul><h2 id="MonadFail"><a href="#MonadFail" class="headerlink" title="MonadFail"></a>MonadFail</h2><p>MonadFail定义在<code>Control.Monad.Fail</code>模块中：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Monad</span> m =&gt; <span class="type">MonadFail</span> m <span class="keyword">where</span></span></span><br><span class="line">    fail :: <span class="type">String</span> -&gt; m a </span><br></pre></td></tr></table></figure><p>它只要求在Monad的基础上实现fail函数，接收一个字符串返回一个单子。这会使在do语句中产生错误时直接变为错误值（空值）使最终的返回值为错误值</p><h3 id="MonadFail实例"><a href="#MonadFail实例" class="headerlink" title="MonadFail实例"></a>MonadFail实例</h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">MonadFail</span> <span class="type">Maybe</span> <span class="keyword">where</span></span></span><br><span class="line">    fail _ = <span class="type">Nothing</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">MonadFail</span> [] <span class="keyword">where</span></span></span><br><span class="line">    fail _ = []</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">MonadFail</span> <span class="type">IO</span> <span class="keyword">where</span></span></span><br><span class="line">    fail = failIO</span><br></pre></td></tr></table></figure><p>Maybe和[]的fail函数都与第一个参数无关，直接返回空值（Nothing、[]）；而IO的fail函数直接使用failIO，实现方法也是深奥（接着逃</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">exampleFail</span> :: <span class="type">Maybe</span> <span class="type">Char</span> </span><br><span class="line"><span class="title">exampleFail</span> = <span class="keyword">do</span></span><br><span class="line">    (x:xs) &lt;- <span class="type">Just</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    return x </span><br><span class="line"></span><br><span class="line"><span class="title">ghci</span>&gt; exampleFail</span><br><span class="line"><span class="type">Nothing</span></span><br></pre></td></tr></table></figure><p>在这个例子的do语句中，在提取Just “”中的值时用了模式匹配，但是因为其内容为空字符串，x:xs匹配会出现错误，这时就会触发fail函数直接返回Nothing</p><h3 id="MonadFail-Law"><a href="#MonadFail-Law" class="headerlink" title="MonadFail Law"></a>MonadFail Law</h3><ul><li>fail s &gt;&gt;= m <code>=</code> fail s </li></ul><h2 id="Semigroup"><a href="#Semigroup" class="headerlink" title="Semigroup"></a>Semigroup</h2><p>半群（semigroup）是一个集合$S$，它需要指定一个二元运算符$\oplus$，并且满足</p><p>$$<br>a\oplus b \in S\quad a, b\in S<br>$$</p><p>以及结合（associative）律：</p><p>$$<br>(a\oplus b)\oplus c = a\oplus (b\oplus c)<br>$$</p><p>这个二元运算符在Haskell的Semigroup中被定义为<code>&lt;&gt;</code>函数：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Semigroup</span> a <span class="keyword">where</span></span></span><br><span class="line">    (&lt;&gt;) :: a -&gt; a -&gt; a </span><br><span class="line"></span><br><span class="line">    sconcat :: <span class="type">NonEmpty</span> a -&gt; a </span><br><span class="line">    sconcat (a :| <span class="keyword">as</span>) = go a <span class="keyword">as</span> <span class="keyword">where</span> </span><br><span class="line">        go b (c:cs) = b &lt;&gt; go c cs </span><br><span class="line">        go b []     = b</span><br><span class="line">    </span><br><span class="line">    stimes :: <span class="type">Integarl</span> b =&gt; b -&gt; a -&gt; a </span><br><span class="line">    stimes = ...</span><br></pre></td></tr></table></figure><p>除此之外还有<code>sconcat</code>和<code>stimes</code>函数，都给出了默认实现。对于列表，&lt;&gt;相当于(++)，stimes相当于concat . replicate：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; [<span class="number">1</span>, <span class="number">2</span>] &lt;&gt; [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; sconcat $ fromList [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]]</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; stimes <span class="number">3</span> [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br></pre></td></tr></table></figure><h3 id="Semigroup-Law"><a href="#Semigroup-Law" class="headerlink" title="Semigroup Law"></a>Semigroup Law</h3><ul><li>(x &lt;&gt; y) &lt;&gt; z <code>=</code> x &lt;&gt; (y &lt;&gt; z)</li></ul><h3 id="补：NonEmpty"><a href="#补：NonEmpty" class="headerlink" title="补：NonEmpty"></a>补：NonEmpty</h3><p>NonEmpty表示非空列表，定义是：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">NonEmpty</span> a = a :| [a] <span class="keyword">deriving</span> (<span class="type">Eq</span>, <span class="type">Ord</span>)</span></span><br></pre></td></tr></table></figure><p>使用一个元素和一个列表用<code>:|</code>连接就可以生成一个NonEmpty类型的列表</p><p><code>Data.List.NonEmpty</code>模块中实现了很多普通列表有的函数，需要qualified import后调用，使用fromList、toList函数可以在普通列表和非空列表之间转换</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; <span class="keyword">import</span> <span class="keyword">qualified</span> Data.List.NonEmpty <span class="keyword">as</span> NE</span><br><span class="line"><span class="title">ghci</span>&gt; arr = <span class="type">NE</span>.fromList [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; arr</span><br><span class="line"><span class="number">1</span> :| [<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; <span class="type">NE</span>.head arr </span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="title">ghci</span>&gt; <span class="type">NE</span>.tail arr </span><br><span class="line">[<span class="number">2</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure><h2 id="Monoid"><a href="#Monoid" class="headerlink" title="Monoid"></a>Monoid</h2><p>幺半群（Monoid）是一个有单位元素$e$的半群，即$e$满足：</p><p>$$<br>e\oplus x = x\oplus e = x<br>$$</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Semigroup</span> a =&gt; <span class="type">Monoid</span> a <span class="keyword">where</span></span> </span><br><span class="line">    mempty  :: a </span><br><span class="line">    </span><br><span class="line">    mappend :: a -&gt; a -&gt; a </span><br><span class="line">    mappend = (&lt;&gt;)</span><br><span class="line"></span><br><span class="line">    mconcat :: [a] -&gt; a </span><br><span class="line">    mconcat = foldr mappend mempty </span><br></pre></td></tr></table></figure><p>可以看出Monoid要求了三个函数，其中最少只需要<code>mempty</code>，它直接返回一个值，表示单位元素。<code>mappend</code>即Semigroup中的&lt;&gt;运算符，<code>mconcat</code>也提供了默认实现</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><h4 id="a-1"><a href="#a-1" class="headerlink" title="[a]"></a>[a]</h4><p>因为Monoid的实例是一个具体类型，而不是像Functor等一样等类型构造器，所以[]并不是Monoid的实例，但是具体类型[a]是一个幺半群：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Semigroup</span> [a] <span class="keyword">where</span></span> </span><br><span class="line">    (&lt;&gt;) = (++)</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Monoid</span> [a] <span class="keyword">where</span></span> </span><br><span class="line">    mempty = [] </span><br><span class="line">    mconcat xss = [x | xs &lt;- xss, x &lt;- xs]</span><br></pre></td></tr></table></figure><p>列表的单位元素(mempty)就是空列表[]，运算符就是合并列表(++)，mconcat也用列表推导重新实现提高效率</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; mempty :: [<span class="type">Int</span>] </span><br><span class="line">[]</span><br><span class="line"><span class="title">ghci</span>&gt; [<span class="number">1</span>, <span class="number">2</span>] &lt;&gt; [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; [<span class="number">1</span>, <span class="number">2</span>] `mappend` [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; mconcat [[<span class="number">1</span>,<span class="number">2</span>], [<span class="number">3</span>,<span class="number">4</span>]]</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br></pre></td></tr></table></figure><h4 id="Ordering"><a href="#Ordering" class="headerlink" title="Ordering"></a>Ordering</h4><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Semigroup</span> <span class="type">Ordering</span> <span class="keyword">where</span></span></span><br><span class="line">    <span class="type">LT</span> &lt;&gt; _ = <span class="type">LT</span></span><br><span class="line">    <span class="type">EQ</span> &lt;&gt; y = y</span><br><span class="line">    <span class="type">GT</span> &lt;&gt; _ = <span class="type">GT</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Monoid</span> <span class="type">Ordering</span> <span class="keyword">where</span></span></span><br><span class="line">    mempty = <span class="type">EQ</span></span><br></pre></td></tr></table></figure><p>主要可以用于比较字典序：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; mconcat (zipWith compare <span class="string">&quot;abcd&quot;</span> <span class="string">&quot;acbd&quot;</span>)</span><br><span class="line"><span class="type">LT</span></span><br></pre></td></tr></table></figure><h4 id="Sum-amp-Product"><a href="#Sum-amp-Product" class="headerlink" title="Sum &amp; Product"></a>Sum &amp; Product</h4><p>对于数字，加法和乘法都满足结合律，所以对于Num，有两种实现Monoid的方式，但是不能为同一类型设置两种实例方式，所以<code>Data.Monoid</code>中提供了两个包装器————Sum和Product：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">newtype</span> <span class="type">Sum</span> a = <span class="type">Sum</span> &#123;<span class="title">getSum</span> :: <span class="title">a</span>&#125; <span class="keyword">deriving</span> (...)</span></span><br><span class="line"><span class="class"><span class="keyword">newtype</span> <span class="type">Product</span> a = <span class="type">Product</span> &#123;<span class="title">getProduct</span> :: <span class="title">a</span>&#125; <span class="keyword">deriving</span> (...)</span></span><br></pre></td></tr></table></figure><p>它们使用Sum或Product来包装起一个数字，可以通过getSum或getProduct来获取其中的值</p><p>对于加法，二元操作为(+)，单位元素为0；对于乘法，二元操作为(*)，单位元素为1:</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Num</span> a =&gt; <span class="type">Semigroup</span> (<span class="type">Sum</span> <span class="title">a</span>) <span class="keyword">where</span></span></span><br><span class="line">    (&lt;&gt;) = coerce ((+) :: a -&gt; a -&gt; a)</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Num</span> a =&gt; <span class="type">Monoid</span> (<span class="type">Sum</span> <span class="title">a</span>) <span class="keyword">where</span></span></span><br><span class="line">    mempty = <span class="type">Sum</span> <span class="number">0</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Num</span> a =&gt; <span class="type">Semigroup</span> (<span class="type">Product</span> <span class="title">a</span>) <span class="keyword">where</span></span></span><br><span class="line">    (&lt;&gt;) = coerce ((*) :: a -&gt; a -&gt; a)</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Num</span> a =&gt; <span class="type">Monoid</span> (<span class="type">Product</span> <span class="title">a</span>) <span class="keyword">where</span></span></span><br><span class="line">    mempty = <span class="type">Product</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; <span class="type">Sum</span> <span class="number">5</span> &lt;&gt; <span class="type">Sum</span> <span class="number">6</span> &lt;&gt; <span class="type">Sum</span> <span class="number">10</span></span><br><span class="line"><span class="type">Sum</span> &#123;getSum = <span class="number">21</span>&#125;</span><br><span class="line"><span class="title">ghci</span>&gt; getSum . mconcat . fmap <span class="type">Sum</span> $ [<span class="number">5</span>, <span class="number">6</span>, <span class="number">10</span>]</span><br><span class="line"><span class="number">21</span></span><br><span class="line"><span class="title">ghci</span>&gt; <span class="type">Product</span> <span class="number">5</span> &lt;&gt; <span class="type">Product</span> <span class="number">6</span> &lt;&gt; <span class="type">Product</span> <span class="number">10</span></span><br><span class="line"><span class="type">Product</span> &#123;getProduct = <span class="number">300</span>&#125;</span><br><span class="line"><span class="title">ghci</span>&gt; getProduct . mconcat . fmap <span class="type">Product</span> $ [<span class="number">5</span>, <span class="number">6</span>, <span class="number">10</span>]</span><br><span class="line"><span class="number">300</span></span><br></pre></td></tr></table></figure><h4 id="All-amp-Any"><a href="#All-amp-Any" class="headerlink" title="All &amp; Any"></a>All &amp; Any</h4><p>和数字一样，布尔值也有两种实现Monoid的方式，因此<code>Data.Monoid</code>模块中也提供了两个包装器，分别实现了这两种Monoid：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">newtype</span> <span class="type">All</span> = <span class="type">All</span> &#123; <span class="title">getAll</span> :: <span class="type">Bool</span> &#125; <span class="keyword">deriving</span> (...)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Semigroup</span> <span class="type">All</span> <span class="keyword">where</span></span></span><br><span class="line">        (&lt;&gt;) = coerce (&amp;&amp;)</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Monoid</span> <span class="type">All</span> <span class="keyword">where</span></span></span><br><span class="line">        mempty = <span class="type">All</span> <span class="type">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">newtype</span> <span class="type">Any</span> = <span class="type">Any</span> &#123; <span class="title">getAny</span> :: <span class="type">Bool</span> &#125; <span class="keyword">deriving</span> (...)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Semigroup</span> <span class="type">Any</span> <span class="keyword">where</span></span></span><br><span class="line">        (&lt;&gt;) = coerce (||)</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Monoid</span> <span class="type">Any</span> <span class="keyword">where</span></span></span><br><span class="line">        mempty = <span class="type">Any</span> <span class="type">False</span></span><br></pre></td></tr></table></figure><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; getAll (<span class="type">All</span> <span class="type">True</span> &lt;&gt; mempty &lt;&gt; <span class="type">All</span> <span class="type">False</span>)</span><br><span class="line"><span class="type">False</span></span><br><span class="line"><span class="title">ghci</span>&gt; getAll (mconcat (map (\x -&gt; <span class="type">All</span> (even x)) [<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]))</span><br><span class="line"><span class="type">False</span></span><br><span class="line"><span class="title">ghci</span>&gt; getAny (<span class="type">Any</span> <span class="type">True</span> &lt;&gt; mempty &lt;&gt; <span class="type">Any</span> <span class="type">False</span>)</span><br><span class="line"><span class="type">True</span></span><br><span class="line"><span class="title">ghci</span>&gt; getAny (mconcat (map (\x -&gt; <span class="type">Any</span> (even x)) [<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]))</span><br><span class="line"><span class="type">True</span></span><br></pre></td></tr></table></figure><h4 id="Monoid-a-gt-Maybe-a"><a href="#Monoid-a-gt-Maybe-a" class="headerlink" title="Monoid a =&gt; Maybe a"></a>Monoid a =&gt; Maybe a</h4><p>如果a是一个(幺)半群，那么Maybe a也是一个幺半群，单位元就是Nothing：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Semigroup</span> a =&gt; <span class="type">Semigroup</span> (<span class="type">Maybe</span> <span class="title">a</span>) <span class="keyword">where</span></span></span><br><span class="line">    <span class="type">Nothing</span> &lt;&gt; b       = b</span><br><span class="line">    a       &lt;&gt; <span class="type">Nothing</span> = a</span><br><span class="line">    <span class="type">Just</span> a  &lt;&gt; <span class="type">Just</span> b  = <span class="type">Just</span> (a &lt;&gt; b)</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Semigroup</span> a =&gt; <span class="type">Monoid</span> (<span class="type">Maybe</span> <span class="title">a</span>) <span class="keyword">where</span></span></span><br><span class="line">    mempty = <span class="type">Nothing</span></span><br></pre></td></tr></table></figure><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; <span class="type">Nothing</span> &lt;&gt; <span class="type">Just</span> <span class="string">&quot;andy&quot;</span></span><br><span class="line"><span class="type">Just</span> <span class="string">&quot;andy&quot;</span></span><br><span class="line"><span class="title">ghci</span>&gt; <span class="type">Just</span> <span class="type">LT</span> &lt;&gt; <span class="type">Nothing</span></span><br><span class="line"><span class="type">Just</span> <span class="type">LT</span></span><br><span class="line"><span class="title">ghci</span>&gt; <span class="type">Just</span> (<span class="type">Sum</span> <span class="number">3</span>) &lt;&gt; <span class="type">Just</span> (<span class="type">Sum</span> <span class="number">4</span>) </span><br><span class="line"><span class="type">Just</span> (<span class="type">Sum</span> &#123;getSum = <span class="number">7</span>&#125;)</span><br></pre></td></tr></table></figure><h4 id="First-amp-Last"><a href="#First-amp-Last" class="headerlink" title="First &amp; Last"></a>First &amp; Last</h4><p>对于Maybe也有两种实现Monoid的方法，即&lt;&gt;操作每次恒取左边和每次恒取右边（在没有Nothing的情况下），所以<code>Data.Monoid</code>模块中也提供了两个新的包装器：First和Last：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">newtype</span> <span class="type">First</span> a = <span class="type">First</span> &#123; <span class="title">getFirst</span> :: <span class="type">Maybe</span> <span class="title">a</span> &#125; <span class="keyword">deriving</span> (...)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Semigroup</span> (<span class="type">First</span> <span class="title">a</span>) <span class="keyword">where</span></span></span><br><span class="line">    <span class="type">First</span> <span class="type">Nothing</span> &lt;&gt; b = b</span><br><span class="line">    a             &lt;&gt; _ = a</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Monoid</span> (<span class="type">First</span> <span class="title">a</span>) <span class="keyword">where</span></span></span><br><span class="line">    mempty = <span class="type">First</span> <span class="type">Nothing</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">newtype</span> <span class="type">Last</span> a = <span class="type">Last</span> &#123; <span class="title">getLast</span> :: <span class="type">Maybe</span> <span class="title">a</span> &#125; <span class="keyword">deriving</span> (...)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Semigroup</span> (<span class="type">Last</span> <span class="title">a</span>) <span class="keyword">where</span></span></span><br><span class="line">    a &lt;&gt; <span class="type">Last</span> <span class="type">Nothing</span> = a</span><br><span class="line">    _ &lt;&gt; b            = b</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Monoid</span> (<span class="type">Last</span> <span class="title">a</span>) <span class="keyword">where</span></span></span><br><span class="line">    mempty = <span class="type">Last</span> <span class="type">Nothing</span></span><br></pre></td></tr></table></figure><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; getFirst (<span class="type">First</span> (<span class="type">Just</span> <span class="string">&quot;hello&quot;</span>) &lt;&gt; <span class="type">First</span> <span class="type">Nothing</span> &lt;&gt; <span class="type">First</span> (<span class="type">Just</span> <span class="string">&quot;world&quot;</span>))</span><br><span class="line"><span class="type">Just</span> <span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="title">ghci</span>&gt; getLast (<span class="type">Last</span> (<span class="type">Just</span> <span class="string">&quot;hello&quot;</span>) &lt;&gt; <span class="type">Last</span> <span class="type">Nothing</span> &lt;&gt; <span class="type">Last</span> (<span class="type">Just</span> <span class="string">&quot;world&quot;</span>))</span><br><span class="line"><span class="type">Just</span> <span class="string">&quot;world&quot;</span></span><br><span class="line"><span class="title">ghci</span>&gt; getFirst . mconcat . map <span class="type">First</span> $ [<span class="type">Nothing</span>, <span class="type">Just</span> <span class="number">9</span>, <span class="type">Just</span> <span class="number">10</span>]  </span><br><span class="line"><span class="type">Just</span> <span class="number">9</span></span><br><span class="line"><span class="title">ghci</span>&gt; getLast . mconcat . map <span class="type">Last</span> $ [<span class="type">Nothing</span>, <span class="type">Just</span> <span class="number">9</span>, <span class="type">Just</span> <span class="number">10</span>]  </span><br><span class="line"><span class="type">Just</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><h4 id="Min-amp-Max"><a href="#Min-amp-Max" class="headerlink" title="Min &amp; Max"></a>Min &amp; Max</h4><p>对于有界的类型，也有两种实现Monoid的方式，每次二元操作都取最小或最大。<code>Data.Semigroup</code>模块中提供了两个包装其器：Min和Max：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">newtype</span> <span class="type">Min</span> a = <span class="type">Min</span> &#123; <span class="title">getMin</span> :: <span class="title">a</span> &#125; <span class="keyword">deriving</span> (...)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Ord</span> a =&gt; <span class="type">Semigroup</span> (<span class="type">Min</span> <span class="title">a</span>) <span class="keyword">where</span></span></span><br><span class="line">    (&lt;&gt;) = coerce (min :: a -&gt; a -&gt; a)</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> (<span class="type">Ord</span> <span class="title">a</span>, <span class="type">Bounded</span> <span class="title">a</span>) =&gt; <span class="type">Monoid</span> (<span class="type">Min</span> <span class="title">a</span>) <span class="keyword">where</span></span></span><br><span class="line">    mempty = maxBound</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">newtype</span> <span class="type">Max</span> a = <span class="type">Max</span> &#123; <span class="title">getMax</span> :: <span class="title">a</span> &#125; <span class="keyword">deriving</span> (...)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Ord</span> a =&gt; <span class="type">Semigroup</span> (<span class="type">Max</span> <span class="title">a</span>) <span class="keyword">where</span></span></span><br><span class="line">    (&lt;&gt;) = coerce (max :: a -&gt; a -&gt; a)</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> (<span class="type">Ord</span> <span class="title">a</span>, <span class="type">Bounded</span> <span class="title">a</span>) =&gt; <span class="type">Monoid</span> (<span class="type">Max</span> <span class="title">a</span>) <span class="keyword">where</span></span></span><br><span class="line">    mempty = minBound</span><br></pre></td></tr></table></figure><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; <span class="type">Min</span> <span class="number">3</span> &lt;&gt; <span class="type">Min</span> <span class="number">5</span></span><br><span class="line"><span class="type">Min</span> &#123;getMin = <span class="number">3</span>&#125;</span><br><span class="line"><span class="title">ghci</span>&gt; <span class="type">Max</span> <span class="number">3</span> &lt;&gt; <span class="type">Max</span> <span class="number">5</span></span><br><span class="line"><span class="type">Max</span> &#123;getMax = <span class="number">5</span>&#125;</span><br><span class="line"><span class="title">ghci</span>&gt; getMin . mconcat . map <span class="type">Min</span> $ [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] :: <span class="type">Int</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="title">ghci</span>&gt; getMax . mconcat . map <span class="type">Max</span> $ [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] :: <span class="type">Int</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h4><p>当元组内的所有元素都是幺半群时，整个元组也是一个幺半群：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> (<span class="type">Semigroup</span> <span class="title">a</span>, <span class="type">Semigroup</span> <span class="title">b</span>) =&gt; <span class="type">Semigroup</span> (<span class="title">a</span>, <span class="title">b</span>) <span class="keyword">where</span></span></span><br><span class="line">        (a,b) &lt;&gt; (a&#x27;,b&#x27;) = (a&lt;&gt;a&#x27;,b&lt;&gt;b&#x27;)</span><br><span class="line">        stimes n (a,b) = (stimes n a, stimes n b)</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> (<span class="type">Monoid</span> <span class="title">a</span>, <span class="type">Monoid</span> <span class="title">b</span>) =&gt; <span class="type">Monoid</span> (<span class="title">a</span>,<span class="title">b</span>) <span class="keyword">where</span></span></span><br><span class="line">        mempty = (mempty, mempty)</span><br></pre></td></tr></table></figure><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; mconcat $ map (\x -&gt; (<span class="type">Min</span> x, <span class="type">Max</span> x)) [<span class="number">1.</span><span class="number">.10</span>] :: (<span class="type">Min</span> <span class="type">Int</span>, <span class="type">Max</span> <span class="type">Int</span>)</span><br><span class="line">(<span class="type">Min</span> &#123;getMin = <span class="number">1</span>&#125;,<span class="type">Max</span> &#123;getMax = <span class="number">10</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="Monoid-Laws"><a href="#Monoid-Laws" class="headerlink" title="Monoid Laws"></a>Monoid Laws</h3><ul><li>mempty &lt;&gt; x <code>=</code> x</li><li>x &lt;&gt; mempty <code>=</code> x</li><li>(x &lt;&gt; y) &lt;&gt; z <code>=</code> x &lt;&gt; (y &lt;&gt; z)</li></ul><h2 id="Monoidal-classes"><a href="#Monoidal-classes" class="headerlink" title="Monoidal classes"></a>Monoidal classes</h2><p>Applicative、Monad、Arrow都有有幺半群性质的子类型类，分别是Alternative、MonadPlus、ArrowPlus</p><h3 id="Alternative"><a href="#Alternative" class="headerlink" title="Alternative"></a>Alternative</h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Applicative</span> f =&gt; <span class="type">Alternative</span> f <span class="keyword">where</span></span></span><br><span class="line">    <span class="comment">-- | The identity of &#x27;&lt;|&gt;&#x27;</span></span><br><span class="line">    empty :: f a</span><br><span class="line">    <span class="comment">-- | An associative binary operation</span></span><br><span class="line">    (&lt;|&gt;) :: f a -&gt; f a -&gt; f a</span><br><span class="line"></span><br><span class="line">    some :: f a -&gt; f [a]</span><br><span class="line">    some v = (:) &lt;$&gt; v &lt;*&gt; many v</span><br><span class="line">    many :: f a -&gt; f [a]</span><br><span class="line">    many v = some v &lt;|&gt; pure []</span><br></pre></td></tr></table></figure><p>其中empty是幺半群中的单位元素，&lt;|&gt;是幺半群中的二元运算符。some和many是两个函数（<del>意义还不懂</del>）</p><h4 id="Alternative实例"><a href="#Alternative实例" class="headerlink" title="Alternative实例"></a>Alternative实例</h4><h5 id="-3"><a href="#-3" class="headerlink" title="[]"></a>[]</h5><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Alternative</span> [] <span class="keyword">where</span></span></span><br><span class="line">    empty = []</span><br><span class="line">    (&lt;|&gt;) = (++)</span><br></pre></td></tr></table></figure><p>和Monoid一样，单位元素是空列表，二元运算是列表合并</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] &lt;|&gt; empty &lt;|&gt; [<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; some []</span><br><span class="line">[]</span><br><span class="line"><span class="title">ghci</span>&gt; many []</span><br><span class="line">[[]]</span><br></pre></td></tr></table></figure><h5 id="Maybe-3"><a href="#Maybe-3" class="headerlink" title="Maybe"></a>Maybe</h5><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Alternative</span> <span class="type">Maybe</span> <span class="keyword">where</span></span></span><br><span class="line">    empty = <span class="type">Nothing</span></span><br><span class="line">    <span class="type">Nothing</span> &lt;|&gt; r = r</span><br><span class="line">    l       &lt;|&gt; _ = l</span><br></pre></td></tr></table></figure><p>Maybe作为Alternative的单位元素是Nothing，二元运算是始终取左边（当左边不为Nothing时）</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; <span class="type">Nothing</span> &lt;|&gt; <span class="type">Just</span> <span class="number">1</span> &lt;|&gt; <span class="type">Just</span> <span class="number">2</span> </span><br><span class="line"><span class="type">Just</span> <span class="number">1</span> </span><br><span class="line"><span class="title">ghci</span>&gt; some <span class="type">Nothing</span></span><br><span class="line"><span class="type">Nothing</span> </span><br><span class="line"><span class="title">ghci</span>&gt; many <span class="type">Nothing</span> </span><br><span class="line"><span class="type">Just</span> []</span><br></pre></td></tr></table></figure><h5 id="ZipList-1"><a href="#ZipList-1" class="headerlink" title="ZipList"></a>ZipList</h5><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Alternative</span> <span class="type">ZipList</span> <span class="keyword">where</span></span></span><br><span class="line">   empty = <span class="type">ZipList</span> []</span><br><span class="line">   <span class="type">ZipList</span> xs &lt;|&gt; <span class="type">ZipList</span> ys = <span class="type">ZipList</span> (xs ++ drop (length xs) ys)</span><br></pre></td></tr></table></figure><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;&gt;getZipList $ <span class="type">ZipList</span> [<span class="number">1</span>,<span class="number">2</span>] &lt;|&gt; <span class="type">ZipList</span> [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">&lt;&gt;getZipList $ <span class="type">ZipList</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>] &lt;|&gt; <span class="type">ZipList</span> [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br></pre></td></tr></table></figure><h4 id="Alternative-Laws"><a href="#Alternative-Laws" class="headerlink" title="Alternative Laws"></a>Alternative Laws</h4><ul><li><code>Monoid laws</code>:  <figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">empty</span> &lt;|&gt; x = x </span><br><span class="line"><span class="title">x</span> &lt;|&gt; empty = x </span><br><span class="line">(x &lt;|&gt; y) &lt;|&gt; z = x &lt;|&gt; (y &lt;|&gt; z)</span><br></pre></td></tr></table></figure></li><li><code>Left zero law</code>：empty &lt;*&gt; f <code>=</code> empty<br>以上的定律是都满足都，下面的定律只有部分满足：</li><li><code>Right zero law</code>：f &lt;*&gt; empty <code>=</code> empty （大部分包括Maybe、[]满足，IO不满足）</li><li><code>Left distribution</code>：(a &lt;|&gt; b) &lt;*&gt; c <code>=</code> (a &lt;*&gt; c) &lt;|&gt; (b &lt;*&gt; c) （Maybe、[]满足，IO及大部分parsers不满足）</li><li><code>Right distribution</code>：a &lt;*&gt; (b &lt;|&gt; c) <code>=</code> (a &lt;*&gt; b) &lt;|&gt; (a &lt;*&gt; c) （大部分不满足，但Maybe满足）</li><li><code>Left catch</code>：(pure a) &lt;|&gt; x = pure a （Maybe、IO、parsers满足，但[]不满足）</li></ul><h4 id="常用函数-3"><a href="#常用函数-3" class="headerlink" title="常用函数"></a>常用函数</h4><ul><li><code>asum</code> :: (Foldable t, Alternative f) =&gt; t (f a) -&gt; f a，相当于foldr (&lt;|&gt;) empty：  <figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; asum [<span class="type">Nothing</span>, <span class="type">Just</span> <span class="number">5</span>, <span class="type">Just</span> <span class="number">3</span>]</span><br><span class="line"><span class="type">Just</span> <span class="number">5</span></span><br><span class="line"><span class="title">ghci</span>&gt; asum [[<span class="number">2</span>],[<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>]]</span><br><span class="line">[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br></pre></td></tr></table></figure></li><li><code>guard</code> :: (Alternative f) =&gt; Bool -&gt; f ()：  <figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">guard</span> <span class="type">True</span>  = pure ()</span><br><span class="line"><span class="title">guard</span> <span class="type">False</span> = empty </span><br></pre></td></tr></table></figure></li></ul><h3 id="MonadPlus"><a href="#MonadPlus" class="headerlink" title="MonadPlus"></a>MonadPlus</h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> (<span class="type">Alternative</span> <span class="title">m</span>, <span class="type">Monad</span> <span class="title">m</span>) =&gt; <span class="type">MonadPlus</span> m <span class="keyword">where</span></span></span><br><span class="line">   mzero :: m a</span><br><span class="line">   mzero = empty</span><br><span class="line"></span><br><span class="line">   mplus :: m a -&gt; m a -&gt; m a</span><br><span class="line">   mplus = (&lt;|&gt;)</span><br></pre></td></tr></table></figure><h4 id="MonadPlus实例"><a href="#MonadPlus实例" class="headerlink" title="MonadPlus实例"></a>MonadPlus实例</h4><p>[]、Maybe都是MonadPlus的实例，mzero和mplus都由Alternative实现</p><h4 id="MonadPlus-Laws"><a href="#MonadPlus-Laws" class="headerlink" title="MonadPlus Laws"></a>MonadPlus Laws</h4><ul><li><code>Monoid laws</code></li><li><code>Left zero</code>：mzero &gt;&gt;= f <code>=</code> mzero</li><li><code>Right zero</code>：m &gt;&gt; mzero <code>=</code> mzero </li></ul><h4 id="常用函数-4"><a href="#常用函数-4" class="headerlink" title="常用函数"></a>常用函数</h4><ul><li><code>msum</code> = asum </li><li><code>mfilter</code>：  <figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">mfilter</span> p ma = <span class="keyword">do</span></span><br><span class="line">    a &lt;- ma</span><br><span class="line">    <span class="keyword">if</span> p a <span class="keyword">then</span> return a <span class="keyword">else</span> mzero</span><br></pre></td></tr></table></figure></li></ul><h3 id="ArrowPlus"><a href="#ArrowPlus" class="headerlink" title="ArrowPlus"></a>ArrowPlus</h3><p>ArrowZero和ArrowPlus分别为Arrow设置了Monoid中的单位元素和二元运算符，使之成为了一个幺半群：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Arrow</span> arr =&gt; <span class="type">ArrowZero</span> arr <span class="keyword">where</span></span></span><br><span class="line">    zeroArrow :: b `arr` c</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">ArrowZero</span> arr =&gt; <span class="type">ArrowPlus</span> arr <span class="keyword">where</span></span></span><br><span class="line">    (&lt;+&gt;) :: (b `arr` c) -&gt; (b `arr` c) -&gt; (b `arr` c)</span><br></pre></td></tr></table></figure><h2 id="一些其它typeclasses"><a href="#一些其它typeclasses" class="headerlink" title="一些其它typeclasses"></a>一些其它typeclasses</h2><h3 id="Foldable"><a href="#Foldable" class="headerlink" title="Foldable"></a>Foldable</h3><p>Foldable是表示可以折叠（fold）的类型类，在<code>Data.Foldable</code>中定义，这使得和fold相关的函数可以用在任意Foldable的实例类型上。它的定义是：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Foldable</span> t <span class="keyword">where</span></span></span><br><span class="line">    fold     :: <span class="type">Monoid</span> m =&gt; t m -&gt; m</span><br><span class="line">    foldMap  :: <span class="type">Monoid</span> m =&gt; (a -&gt; m) -&gt; t a -&gt; m</span><br><span class="line">    foldMap&#x27; :: <span class="type">Monoid</span> m =&gt; (a -&gt; m) -&gt; t a -&gt; m</span><br><span class="line">    foldr    :: (a -&gt; b -&gt; b) -&gt; b -&gt; t a -&gt; b</span><br><span class="line">    foldr&#x27;   :: (a -&gt; b -&gt; b) -&gt; b -&gt; t a -&gt; b</span><br><span class="line">    foldl    :: (b -&gt; a -&gt; b) -&gt; b -&gt; t a -&gt; b</span><br><span class="line">    foldl&#x27;   :: (b -&gt; a -&gt; b) -&gt; b -&gt; t a -&gt; b</span><br><span class="line">    foldr1   :: (a -&gt; a -&gt; a) -&gt; t a -&gt; a</span><br><span class="line">    foldl1   :: (a -&gt; a -&gt; a) -&gt; t a -&gt; a</span><br><span class="line">    toList   :: t a -&gt; [a]</span><br><span class="line">    null     :: t a -&gt; <span class="type">Bool</span></span><br><span class="line">    length   :: t a -&gt; <span class="type">Int</span></span><br><span class="line">    elem     :: <span class="type">Eq</span> a =&gt; a -&gt; t a -&gt; <span class="type">Bool</span></span><br><span class="line">    maximum  :: <span class="type">Ord</span> a =&gt; t a -&gt; a</span><br><span class="line">    minimum  :: <span class="type">Ord</span> a =&gt; t a -&gt; a</span><br><span class="line">    sum      :: <span class="type">Num</span> a =&gt; t a -&gt; a</span><br><span class="line">    product  :: <span class="type">Num</span> a =&gt; t a -&gt; a</span><br><span class="line">    <span class="meta">&#123;-# MINIMAL foldMap | foldr #-&#125;</span></span><br></pre></td></tr></table></figure><p>最少只要实现<code>foldr</code>和<code>foldMap</code>其中之一就可以使一个类型成为Foldable的实例，其它的函数都有由这两个函数提供的默认实现，而且这两个函数之间也有相互实现。因此只要实现foldr或foldMap一个函数就可以使用所有其它Foldable中的函数。foldr函数在前面已经有学过，foldMap的例子是：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; foldMap <span class="type">Sum</span> [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line"><span class="type">Sum</span> &#123;getSum = <span class="number">9</span>&#125;</span><br><span class="line"><span class="title">ghci</span>&gt; foldMap <span class="type">Product</span> [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line"><span class="type">Product</span> &#123;getProduct = <span class="number">15</span>&#125;</span><br><span class="line"><span class="title">ghci</span>&gt; foldMap (replicate <span class="number">3</span>) [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>]</span><br></pre></td></tr></table></figure><h4 id="Foldable实例"><a href="#Foldable实例" class="headerlink" title="Foldable实例"></a>Foldable实例</h4><p>[]、Maybe、Either a、(,) a都是Foldable的实例，标准容器库中的Map、Set等也都是Foldable的实例。也可以自定义二叉树类型，并使其成为Foldable的实例：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">Tree</span> a = <span class="type">Empty</span> | <span class="type">Leaf</span> a | <span class="type">Node</span> (<span class="type">Tree</span> <span class="title">a</span>) a (<span class="type">Tree</span> <span class="title">a</span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Foldable</span> <span class="type">Tree</span> <span class="keyword">where</span></span> </span><br><span class="line">    foldMap :: <span class="type">Monoid</span> m =&gt; (a -&gt; m) -&gt; <span class="type">Tree</span> a -&gt; m</span><br><span class="line">    foldMap f <span class="type">Empty</span>        = mempty</span><br><span class="line">    foldMap f (<span class="type">Leaf</span> x)     = f x</span><br><span class="line">    foldMap f (<span class="type">Node</span> l k r) = foldMap f l `mappend` f k `mappend` foldMap f r</span><br></pre></td></tr></table></figure><h4 id="常用函数-5"><a href="#常用函数-5" class="headerlink" title="常用函数"></a>常用函数</h4><ul><li><code>asum</code> :: (Alternative f, Foldable t) =&gt; t (f a) -&gt; f a，用&lt;|&gt;逐个连接所有元素</li><li><code>sequenceA_</code> :: (Applicative f, Foldable t) =&gt; t (f a) -&gt; f ()，由于丢弃结果，所以Foldable t就可以满足；因此不同于sequenceA需要Traversable</li><li><code>traverse_</code> :: (Applicative f, Foldable t) =&gt; (a -&gt; f b) -&gt; t a -&gt; f ()</li><li><code>for_</code> :: (Applicative f, Foldable t) =&gt; t a -&gt; (a -&gt; f b) -&gt; f ()</li></ul><h3 id="Traversable"><a href="#Traversable" class="headerlink" title="Traversable"></a>Traversable</h3><p>Traversable是表示可遍历的类型类，在<code>Data.Traversable</code>模块中定义，它是Foldable的升级版，同时也是一个Functor，它的定义是：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> (<span class="type">Functor</span> <span class="title">t</span>, <span class="type">Foldable</span> <span class="title">t</span>) =&gt; <span class="type">Traversable</span> t <span class="keyword">where</span></span> </span><br><span class="line">    traverse  :: <span class="type">Applicative</span> f =&gt; (a -&gt; f b) -&gt; t a -&gt; f (t b)</span><br><span class="line">    sequenceA :: <span class="type">Applicative</span> f =&gt; t (f a) -&gt; f (t a)</span><br><span class="line">    mapM      ::       <span class="type">Monad</span> m =&gt; (a -&gt; m b) -&gt; t a -&gt; m (t b)</span><br><span class="line">    sequence  ::       <span class="type">Monad</span> m =&gt; t (m a) -&gt; m (t a)</span><br><span class="line">    <span class="meta">&#123;-# MINIMAL traverse | sequenceA #-&#125;</span></span><br></pre></td></tr></table></figure><p>最少只需要实现traverse函数或者sequenceA函数。其中各个函数的功能通过类型签名也都能推测出来。但是其中mapM就是traverse，sequence就是sequenceA，它们存在只是历史遗留（</p><h4 id="Traversable实例"><a href="#Traversable实例" class="headerlink" title="Traversable实例"></a>Traversable实例</h4><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Traversable</span> <span class="type">Maybe</span> <span class="keyword">where</span></span></span><br><span class="line">    traverse _ <span class="type">Nothing</span> = pure <span class="type">Nothing</span></span><br><span class="line">    traverse f (<span class="type">Just</span> x) = <span class="type">Just</span> &lt;$&gt; f x</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Traversable</span> [] <span class="keyword">where</span></span></span><br><span class="line">    <span class="meta">&#123;-# INLINE traverse #-&#125;</span></span><br><span class="line">    traverse f = foldr cons_f (pure [])</span><br><span class="line">      <span class="keyword">where</span> cons_f x ys = liftA2 (:) (f x) ys</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Traversable</span> (<span class="type">Either</span> <span class="title">a</span>) <span class="keyword">where</span></span></span><br><span class="line">    traverse _ (<span class="type">Left</span> x) = pure (<span class="type">Left</span> x)</span><br><span class="line">    traverse f (<span class="type">Right</span> y) = <span class="type">Right</span> &lt;$&gt; f y</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Traversable</span> ((,) a) <span class="keyword">where</span></span></span><br><span class="line">    traverse f (x, y) = (,) x &lt;$&gt; f y</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>上面的Tree也可以成为Traversable的实例：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Functor</span> <span class="type">Tree</span> <span class="keyword">where</span></span></span><br><span class="line">    fmap :: (a -&gt; b) -&gt; <span class="type">Tree</span> a -&gt; <span class="type">Tree</span> b</span><br><span class="line">    fmap     g <span class="type">Empty</span>        = <span class="type">Empty</span></span><br><span class="line">    fmap     g (<span class="type">Leaf</span> x)     = <span class="type">Leaf</span> $ g x</span><br><span class="line">    fmap     g (<span class="type">Node</span> l x r) = <span class="type">Node</span> (fmap g l)</span><br><span class="line">                                   (g x)</span><br><span class="line">                                   (fmap g r)</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Traversable</span> <span class="type">Tree</span> <span class="keyword">where</span></span></span><br><span class="line">    traverse :: <span class="type">Applicative</span> f =&gt; (a -&gt; f b) -&gt; <span class="type">Tree</span> a -&gt; f (<span class="type">Tree</span> b) </span><br><span class="line">    traverse g <span class="type">Empty</span>        = pure <span class="type">Empty</span></span><br><span class="line">    traverse g (<span class="type">Leaf</span> x)     = <span class="type">Leaf</span> &lt;$&gt; g x</span><br><span class="line">    traverse g (<span class="type">Node</span> l x r) = <span class="type">Node</span> &lt;$&gt; traverse g l</span><br><span class="line">                                   &lt;*&gt; g x</span><br><span class="line">                                   &lt;*&gt; traverse g r</span><br></pre></td></tr></table></figure><h4 id="Traversable-Laws"><a href="#Traversable-Laws" class="headerlink" title="Traversable Laws"></a>Traversable Laws</h4><p>Traversable也有两条定律：</p><ol><li>traverse Identity <code>=</code> Identity</li><li>traverse (Compose . fmap g . f) <code>=</code> Compose . fmap (traverse g) . traverse f </li></ol><p>其中Identity和Compose分别定义在<code>Data.Functor.Identity</code>和<code>Data.Functor.Compose</code>两个模块中：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">newtype</span> <span class="type">Identity</span> a = <span class="type">Identity</span> &#123; <span class="title">runIdentity</span> :: <span class="title">a</span> &#125; <span class="keyword">deriving</span> (...)</span></span><br><span class="line"><span class="class"><span class="keyword">newtype</span> <span class="type">Compose</span> f g a = <span class="type">Compose</span> &#123; <span class="title">getCompose</span> :: <span class="title">f</span> (<span class="title">g</span> <span class="title">a</span>) &#125; <span class="keyword">deriving</span> (...)</span></span><br></pre></td></tr></table></figure><h3 id="Bifunctor"><a href="#Bifunctor" class="headerlink" title="Bifunctor"></a>Bifunctor</h3><p>Functor的实例的kind都是* -&gt; *，因此fmap只能将一个函数映射到一个值上。而Bifunctor（在<code>Data.Bifunctor</code>模块中定义）的实例的kind是* -&gt; * -&gt; *，而且它的bimap可以同时将两个函数映射到两个值上：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Bifunctor</span> p <span class="keyword">where</span></span> </span><br><span class="line">    bimap  :: (a -&gt; b) -&gt; (c -&gt; d) -&gt; p a c -&gt; p b d </span><br><span class="line">    first  :: (a -&gt; b) -&gt; p a c -&gt; p b c </span><br><span class="line">    second :: (b -&gt; c) -&gt; p a b -&gt; p a c </span><br><span class="line">    <span class="meta">&#123;-# MINIMAL bimap | first, second #-&#125;</span></span><br></pre></td></tr></table></figure><p>同时bimap和first,second之间也可以相互转换：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">bimap</span> f g = first f . second g</span><br><span class="line"></span><br><span class="line"><span class="title">first</span>  f = bimap f id</span><br><span class="line"><span class="title">second</span> g = bimap id g</span><br></pre></td></tr></table></figure><p>对于Functor，((,) e)和Either e才是Functor的实例，因为他们是* -&gt; *。但是对于Bifunctor，(,)和Either就是Bifunctor的实例：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; bimap (+<span class="number">1</span>) length (<span class="number">4</span>, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">(<span class="number">5</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure><h4 id="Bifunctor-Laws"><a href="#Bifunctor-Laws" class="headerlink" title="Bifunctor Laws"></a>Bifunctor Laws</h4><ol><li>bimap id id <code>=</code> id<br> first id <code>=</code> id<br> second id <code>=</code> id</li><li>bimap (f . g) (h . i) <code>=</code> bimap f h . bimap g i<br> first  (f . g) <code>=</code> first f  . first g<br> second (f . g) <code>=</code> second f . second g</li></ol><h3 id="Category"><a href="#Category" class="headerlink" title="Category"></a>Category</h3><p>Haskell中的Category将一般的函数推广到了普遍的态射上，它在<code>Control.Category</code>模块中，定义是：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Category</span> cat <span class="keyword">where</span></span> </span><br><span class="line">    id  :: cat a a </span><br><span class="line">    (.) :: cat b c -&gt; cat a b -&gt; cat a c</span><br></pre></td></tr></table></figure><p>它的实例有<code>(-&gt;)</code>和<code>Kleisli m</code>：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Category</span> (-&gt;) <span class="keyword">where</span></span></span><br><span class="line">    id = <span class="type">GHC</span>.<span class="type">Base</span>.id</span><br><span class="line">    (.) = (<span class="type">GHC</span>.<span class="type">Base</span>..)</span><br></pre></td></tr></table></figure><p>Kleisli是一个范畴，用来表示函数a -&gt; m b，Haskell中，它在<code>Control.Arrow</code>模块中定义：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">newtype</span> <span class="type">Kleisli</span> m a b = <span class="type">Kleisli</span> &#123; <span class="title">runKleisli</span> :: <span class="title">a</span> -&gt; <span class="title">m</span> <span class="title">b</span> &#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Monad</span> m =&gt; <span class="type">Category</span> (<span class="type">Kleisli</span> <span class="title">m</span>) <span class="keyword">where</span></span></span><br><span class="line">    id :: <span class="type">Kleisli</span> m a a</span><br><span class="line">    id = <span class="type">Kleisli</span> return</span><br><span class="line"></span><br><span class="line">    (.) :: <span class="type">Kleisli</span> m b c -&gt; <span class="type">Kleisli</span> m a b -&gt; <span class="type">Kleisli</span> m a c</span><br><span class="line">    <span class="type">Kleisli</span> g . <span class="type">Kleisli</span> h = <span class="type">Kleisli</span> (h &gt;=&gt; g)</span><br></pre></td></tr></table></figure><p>Category要满足的定律只有id是(.)操作的单位元，以及(.)操作是可结合的</p><p>同时Category还提供了两个函数<code>&lt;&lt;&lt;</code>和<code>&gt;&gt;&gt;</code>：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(&lt;&lt;&lt;) :: <span class="type">Category</span> cat =&gt; cat b c -&gt; cat a b -&gt; cat a c</span><br><span class="line">(&lt;&lt;&lt;) = (.)</span><br><span class="line"></span><br><span class="line">(&gt;&gt;&gt;) :: <span class="type">Category</span> cat =&gt; cat a b -&gt; cat b c -&gt; cat a c </span><br><span class="line"><span class="title">f</span> &gt;&gt;&gt; g = g . f </span><br></pre></td></tr></table></figure><h3 id="Arrow"><a href="#Arrow" class="headerlink" title="Arrow"></a>Arrow</h3><p>Arrow将函数进一步抽象化，它定义在<code>Control.Arrow</code>模块中：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Category</span> a =&gt; <span class="type">Arrow</span> a <span class="keyword">where</span></span> </span><br><span class="line">    arr    :: (b -&gt; c) -&gt; a b c </span><br><span class="line">    first  :: a b c -&gt; a (b, d) (c, d)</span><br><span class="line">    second :: a b c -&gt; a (d, b) (d, c)</span><br><span class="line">    (***)  :: a b c -&gt; a b&#x27; c&#x27; -&gt; a (b, b&#x27;) (c, c&#x27;)</span><br><span class="line">    (&amp;&amp;&amp;)  :: a b c -&gt; a b c&#x27; -&gt; a b (c, c&#x27;)</span><br><span class="line">    <span class="meta">&#123;-# MINIMAL arr, (first | (***)) #-&#125;</span></span><br></pre></td></tr></table></figure><p>其中：</p><ul><li><code>arr</code>函数将一个函数变成一个Arrow</li><li><code>first</code>函数将一个Arrow变成一个二元组间的Arrow，且只会对一个元素进行操作，第二个元素保持不变</li><li><code>second</code>函数与first相反，第一个元素保持不变</li><li><code>***</code>函数是Arrow之间的parallel composition，对于函数: (g *** h) (x, y) = (g x, h y)</li><li><code>&amp;&amp;&amp;</code>函数是Arrow之间的fanout composition，对于函数: (g &amp;&amp;&amp; h) x = (g x, h x)</li></ul><p>它的实例也有(-&gt;)和Kleisli：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Arrow</span> (-&gt;) <span class="keyword">where</span></span></span><br><span class="line">  arr :: (b -&gt; c) -&gt; (b -&gt; c)</span><br><span class="line">  arr g = g</span><br><span class="line"></span><br><span class="line">  first :: (b -&gt; c) -&gt; ((b,d) -&gt; (c,d))</span><br><span class="line">  first g (x,y) = (g x, y)</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Monad</span> m =&gt; <span class="type">Arrow</span> (<span class="type">Kleisli</span> <span class="title">m</span>) <span class="keyword">where</span></span></span><br><span class="line">  arr :: (b -&gt; c) -&gt; <span class="type">Kleisli</span> m b c</span><br><span class="line">  arr f = <span class="type">Kleisli</span> (return . f)</span><br><span class="line"></span><br><span class="line">  first :: <span class="type">Kleisli</span> m b c -&gt; <span class="type">Kleisli</span> m (b,d) (c,d)</span><br><span class="line">  first (<span class="type">Kleisli</span> f) = <span class="type">Kleisli</span> (\ ~(b,d) -&gt; <span class="keyword">do</span> c &lt;- f b</span><br><span class="line">                                              return (c,d) )</span><br></pre></td></tr></table></figure><p>常用函数：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">returnA</span> :: <span class="type">Arrow</span> a =&gt; a b b</span><br><span class="line"><span class="title">returnA</span> = arr id</span><br><span class="line"></span><br><span class="line">(^&gt;&gt;) :: <span class="type">Arrow</span> a =&gt; (b -&gt; c) -&gt; a c d -&gt; a b d</span><br><span class="line"><span class="title">f</span> ^&gt;&gt; a = arr f &gt;&gt;&gt; a</span><br><span class="line"></span><br><span class="line">(&gt;&gt;^) :: <span class="type">Arrow</span> a =&gt; a b c -&gt; (c -&gt; d) -&gt; a b d</span><br><span class="line"><span class="title">a</span> &gt;&gt;^ f = a &gt;&gt;&gt; arr f</span><br><span class="line"></span><br><span class="line">(&lt;&lt;^) :: <span class="type">Arrow</span> a =&gt; a c d -&gt; (b -&gt; c) -&gt; a b d</span><br><span class="line"><span class="title">a</span> &lt;&lt;^ f = a &lt;&lt;&lt; arr f</span><br><span class="line"></span><br><span class="line">(^&lt;&lt;) :: <span class="type">Arrow</span> a =&gt; (c -&gt; d) -&gt; a b c -&gt; a b d</span><br><span class="line"><span class="title">f</span> ^&lt;&lt; a = arr f &lt;&lt;&lt; a</span><br></pre></td></tr></table></figure><h4 id="Arrow-notation"><a href="#Arrow-notation" class="headerlink" title="Arrow notation"></a>Arrow notation</h4><p>类似do-notation，Arrow也提供了一套方便的语句：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">proc</span> x -&gt; <span class="keyword">do</span> </span><br><span class="line">    y &lt;- action1 -&lt; ... </span><br><span class="line">    z &lt;- action2 -&lt; ...</span><br><span class="line">    returnA -&lt; ...</span><br></pre></td></tr></table></figure><p>其中proc代替了lambda表达式中的斜杠\，-&lt;右边的为输入，左边的为接收输入的函数。比如，下面三种写法达成的效果是一样的：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">f</span> :: <span class="type">Int</span> -&gt; (<span class="type">Int</span>, <span class="type">Int</span>)</span><br><span class="line"><span class="title">f</span> = \x -&gt;</span><br><span class="line">    <span class="keyword">let</span> y  = <span class="number">2</span> * x</span><br><span class="line">        z1 = y + <span class="number">3</span></span><br><span class="line">        z2 = y - <span class="number">5</span></span><br><span class="line">    <span class="keyword">in</span> (z1, z2) </span><br><span class="line"><span class="comment">-- ghci&gt; f 10 </span></span><br><span class="line"><span class="comment">-- (23,15)</span></span><br><span class="line"></span><br><span class="line"><span class="title">fM</span> :: <span class="type">Int</span> -&gt; <span class="type">Identity</span> (<span class="type">Int</span>, <span class="type">Int</span>)</span><br><span class="line"><span class="title">fM</span> = \x -&gt; <span class="keyword">do</span></span><br><span class="line">    y  &lt;- return (<span class="number">2</span> * x)</span><br><span class="line">    z1 &lt;- return (y + <span class="number">3</span>)</span><br><span class="line">    z2 &lt;- return (y - <span class="number">5</span>)</span><br><span class="line">    return (z1, z2)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ghci&gt; runIdentity (fM 10)</span></span><br><span class="line"><span class="comment">-- (23,15)</span></span><br><span class="line"></span><br><span class="line"><span class="title">fA</span> :: <span class="type">Int</span> -&gt; (<span class="type">Int</span>, <span class="type">Int</span>)</span><br><span class="line"><span class="title">fA</span> = <span class="keyword">proc</span> x -&gt; <span class="keyword">do</span></span><br><span class="line">    y  &lt;- (<span class="number">2</span> *) -&lt; x</span><br><span class="line">    z1 &lt;- (+ <span class="number">3</span>) -&lt; y</span><br><span class="line">    z2 &lt;- (subtract <span class="number">5</span>) -&lt; y</span><br><span class="line">    returnA -&lt; (z1, z2)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ghci&gt; fA 10</span></span><br><span class="line"><span class="comment">-- (23,15)</span></span><br></pre></td></tr></table></figure><h4 id="ArrowChoice"><a href="#ArrowChoice" class="headerlink" title="ArrowChoice"></a>ArrowChoice</h4><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Arrow</span> a =&gt; <span class="type">ArrowChoice</span> a <span class="keyword">where</span></span></span><br><span class="line">    left :: a b c -&gt; a (<span class="type">Either</span> b d) (<span class="type">Either</span> c d)</span><br><span class="line">    left = (+++ id)</span><br><span class="line"></span><br><span class="line">    right :: a b c -&gt; a (<span class="type">Either</span> d b) (<span class="type">Either</span> d c)</span><br><span class="line">    right = (id +++)</span><br><span class="line"></span><br><span class="line">    (+++) :: a b c -&gt; a b&#x27; c&#x27; -&gt; a (<span class="type">Either</span> b b&#x27;) (<span class="type">Either</span> c c&#x27;)</span><br><span class="line">    f +++ g = left f &gt;&gt;&gt; arr mirror &gt;&gt;&gt; left g &gt;&gt;&gt; arr mirror</span><br><span class="line">      <span class="keyword">where</span></span><br><span class="line">        mirror :: <span class="type">Either</span> x y -&gt; <span class="type">Either</span> y x</span><br><span class="line">        mirror (<span class="type">Left</span> x) = <span class="type">Right</span> x</span><br><span class="line">        mirror (<span class="type">Right</span> y) = <span class="type">Left</span> y</span><br><span class="line"></span><br><span class="line">    (|||) :: a b d -&gt; a c d -&gt; a (<span class="type">Either</span> b c) d</span><br><span class="line">    f ||| g = f +++ g &gt;&gt;&gt; arr untag</span><br><span class="line">      <span class="keyword">where</span></span><br><span class="line">        untag (<span class="type">Left</span> x) = x</span><br><span class="line">        untag (<span class="type">Right</span> y) = y</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">ArrowChoice</span> (-&gt;) <span class="keyword">where</span></span></span><br><span class="line">    left f = f +++ id</span><br><span class="line">    right f = id +++ f</span><br><span class="line">    f +++ g = (<span class="type">Left</span> . f) ||| (<span class="type">Right</span> . g)</span><br><span class="line">    (|||) = either</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">Monad</span> m =&gt; <span class="type">ArrowChoice</span> (<span class="type">Kleisli</span> <span class="title">m</span>) <span class="keyword">where</span></span></span><br><span class="line">    left f = f +++ arr id</span><br><span class="line">    right f = arr id +++ f</span><br><span class="line">    f +++ g = (f &gt;&gt;&gt; arr <span class="type">Left</span>) ||| (g &gt;&gt;&gt; arr <span class="type">Right</span>)</span><br><span class="line">    <span class="type">Kleisli</span> f ||| <span class="type">Kleisli</span> g = <span class="type">Kleisli</span> (either f g)</span><br></pre></td></tr></table></figure><h4 id="ArrowZero-amp-ArrowPlus"><a href="#ArrowZero-amp-ArrowPlus" class="headerlink" title="ArrowZero &amp; ArrowPlus"></a>ArrowZero &amp; ArrowPlus</h4><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Arrow</span> a =&gt; <span class="type">ArrowZero</span> a <span class="keyword">where</span></span></span><br><span class="line">    zeroArrow :: a b c</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">ArrowZero</span> a =&gt; <span class="type">ArrowPlus</span> a <span class="keyword">where</span></span></span><br><span class="line">    (&lt;+&gt;) :: a b c -&gt; a b c -&gt; a b c</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">MonadPlus</span> m =&gt; <span class="type">ArrowZero</span> (<span class="type">Kleisli</span> <span class="title">m</span>) <span class="keyword">where</span></span></span><br><span class="line">    zeroArrow = <span class="type">Kleisli</span> (\_ -&gt; mzero)</span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="keyword">instance</span> <span class="type">MonadPlus</span> m =&gt; <span class="type">ArrowPlus</span> (<span class="type">Kleisli</span> <span class="title">m</span>) <span class="keyword">where</span></span></span><br><span class="line">    <span class="type">Kleisli</span> f &lt;+&gt; <span class="type">Kleisli</span> g = <span class="type">Kleisli</span> (\x -&gt; f x `mplus` g x)</span><br></pre></td></tr></table></figure><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ghci</span>&gt; runKleisli ((<span class="type">Kleisli</span> (\x -&gt; [x * <span class="number">2</span>])) &lt;+&gt; (<span class="type">Kleisli</span> (\x -&gt; [x, -x]))) <span class="number">2</span></span><br><span class="line">[<span class="number">4</span>,<span class="number">2</span>,<span class="number">-2</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; either (+<span class="number">2</span>) (*<span class="number">3</span>) (<span class="type">Left</span> <span class="number">3</span>)</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="title">ghci</span>&gt; either (+<span class="number">2</span>) (*<span class="number">3</span>) (<span class="type">Right</span> <span class="number">3</span>)</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="title">ghci</span>&gt; (+<span class="number">2</span>) ||| (*<span class="number">3</span>) $ (<span class="type">Left</span> <span class="number">3</span>)</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="title">ghci</span>&gt; (+<span class="number">2</span>) +++ (*<span class="number">3</span>) $ (<span class="type">Left</span> <span class="number">3</span>)</span><br><span class="line"><span class="type">Left</span> <span class="number">5</span></span><br><span class="line"><span class="title">ghci</span>&gt; (+<span class="number">2</span>) ||| (*<span class="number">3</span>) $ (<span class="type">Right</span> <span class="number">3</span>)</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="title">ghci</span>&gt; (+<span class="number">2</span>) +++ (*<span class="number">3</span>) $ (<span class="type">Right</span> <span class="number">3</span>)</span><br><span class="line"><span class="type">Right</span> <span class="number">9</span></span><br><span class="line"><span class="title">ghci</span>&gt; left (+<span class="number">2</span>) (<span class="type">Left</span> <span class="number">3</span>)</span><br><span class="line"><span class="type">Left</span> <span class="number">5</span></span><br><span class="line"><span class="title">ghci</span>&gt; right (*<span class="number">3</span>) (<span class="type">Right</span> <span class="number">3</span>)</span><br><span class="line"><span class="type">Right</span> <span class="number">9</span></span><br><span class="line"><span class="title">ghci</span>&gt; left (+<span class="number">2</span>) (<span class="type">Right</span> <span class="number">3</span>)</span><br><span class="line"><span class="type">Right</span> <span class="number">3</span></span><br><span class="line"><span class="title">ghci</span>&gt; right (*<span class="number">3</span>) (<span class="type">Left</span> <span class="number">3</span>)</span><br><span class="line"><span class="type">Left</span> <span class="number">3</span></span><br><span class="line"><span class="title">ghci</span>&gt; runKleisli ((<span class="type">Kleisli</span> (\x -&gt; [x * <span class="number">2</span>])) ||| (<span class="type">Kleisli</span> (\x -&gt; [x, -x]))) (<span class="type">Left</span> <span class="number">3</span>)</span><br><span class="line">[<span class="number">6</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; runKleisli ((<span class="type">Kleisli</span> (\x -&gt; [x * <span class="number">2</span>])) ||| (<span class="type">Kleisli</span> (\x -&gt; [x, -x]))) (<span class="type">Right</span> <span class="number">3</span>)</span><br><span class="line">[<span class="number">3</span>,<span class="number">-3</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; runKleisli ((<span class="type">Kleisli</span> (\x -&gt; [x * <span class="number">2</span>])) +++ (<span class="type">Kleisli</span> (\x -&gt; [x, -x]))) (<span class="type">Left</span> <span class="number">3</span>)</span><br><span class="line">[<span class="type">Left</span> <span class="number">6</span>]</span><br><span class="line"><span class="title">ghci</span>&gt; runKleisli ((<span class="type">Kleisli</span> (\x -&gt; [x * <span class="number">2</span>])) +++ (<span class="type">Kleisli</span> (\x -&gt; [x, -x]))) (<span class="type">Right</span> <span class="number">3</span>)</span><br><span class="line">[<span class="type">Right</span> <span class="number">3</span>,<span class="type">Right</span> (<span class="number">-3</span>)]</span><br></pre></td></tr></table></figure><h2 id="Haskell与范畴论"><a href="#Haskell与范畴论" class="headerlink" title="Haskell与范畴论"></a>Haskell与范畴论</h2><p>Haskell中的函子单子等都与范畴论（category theory）有很多联系，所以打算简单了解一下范畴论的相关内容。</p><blockquote><p><strong>范畴论</strong>是数学的一门学科，以抽象的方法处理数学概念，将这些概念形式化成一组组的“物件”及“态射”。数学中许多重要的领域可以形式化为范畴。使用范畴论可以令这些领域中许多难理解、难捉摸的数学结论更容易叙述证明。</p><div style="text-align: right">———— 维基百科</div></blockquote><h3 id="范畴（Category）"><a href="#范畴（Category）" class="headerlink" title="范畴（Category）"></a>范畴（Category）</h3><p>范畴本质上是一个简单的集合，一个范畴$\mathbf{C}$包含三个组成成分：</p><!--more--><ul><li>一个类$\mathrm{ob}(\mathbf{C})$：其中元素称为<strong>对象（objects）</strong></li><li>一个类$\mathrm{hom}(\mathbf{C})$：其中元素称为<strong>态射（morphisms）</strong>（或<strong>箭号（arrows）</strong>）：每个态射连接了两个对象：源对象（source object）、目标对象（target object）。如果$f$是从源对象$A$到目标对象$B$（$A, B\in \mathrm{ob}(\mathbf{C})$）的态射，那么记为$f : A\to B$</li><li>一个二元运算，称为态射<strong>复合（composition）</strong>：两个态射$g : A\to B$、$f : B\to C$的复合记为$f\circ g : A\to C$<br>在Haskell和大部分数学理论中都是从右向左计算，即$f\circ g$中是先计算$g : A\to B$再计算$f : B\to C$</li></ul><p>许多东西都可以组成范畴。比如:</p><p>&emsp;$\mathbf{Set}$是一个范畴，对象为所有集合，态射为集合之间的函数，复合即函数之间的复合</p><p>&emsp;$\mathbf{Grp}$是一个范畴，对象为所有群，态射为群同态（group homomorphisms），例如对于群$(G,*)$和$(H,\cdot )$，有群同态$h : (G,*)\to (H,\cdot )$，则需要对于$G$中的任意元素$u,v$满足<br>$$h(u*v)=h(u)\cdot h(v)$$</p><p><strong>注意</strong>：态射不必须为函数；而且可以存在源对象和目标对象都相同的不同态射</p><h4 id="范畴公理"><a href="#范畴公理" class="headerlink" title="范畴公理"></a>范畴公理</h4><p>每个范畴都需要满足三条定律：</p><ol><li>态射复合需要满足<strong>结合律（associativity）</strong>：<br>$$f\circ (g\circ h) = (f\circ g)\circ h$$</li><li>范畴在复合操作下是<strong>闭合的（closed）</strong>：<br>&emsp;&emsp;&emsp;如果范畴$\mathbf{C}$中存在态射$f : B\to C$、$g : A\to B$，那么范畴$\mathbf{C}$中也一定存在态射$h : A\to C$，且$h=f\circ g$</li><li>每个对象都需要有<strong>单位态射（identity morphisms）</strong>：<br>&emsp;&emsp;&emsp;对于范畴$\mathbf{C}$中的对象$A$，一定存在单位态射$\mathrm{id}_A : A\to A$，且对于每个态射$g : A\to B$，一定有：<br>$$g\circ\mathrm{id}_A = \mathrm{id}_B\circ g = g$$</li></ol><h4 id="mathbf-Hask-范畴"><a href="#mathbf-Hask-范畴" class="headerlink" title="$\mathbf{Hask}$范畴"></a>$\mathbf{Hask}$范畴</h4><p>范畴$\mathbf{Hask}$的对象为Haskell中的类型（types），态射是Haskell中的函数，复合运算是<code>(.)</code>。即从类型A到类型B的函数 f :: A -&gt; B 就是$\mathbf{Hask}$范畴中的一个态射。而函数 f :: B -&gt; C 、g :: A -&gt; B 的组合 f . g 就是一个新的函数 h :: A -&gt; C。</p><p>对于三条定律：</p><ol><li>第一条显然满足：f . (g . h) = (f . g) . h</li><li>第二条也显然满足，如果有函数 f :: B -&gt; C 、g :: A -&gt; B，一定有函数 h = (f . g) :: A -&gt; C </li><li>对于第三条定律，Haskell中存在单位函数 id ，但id是多态（polymorphic）的，要为其指定类型使其变成单态（monomorphic）的。比如态射$\mathrm{id}_A$在Haskell中就可以表示为 id :: A -&gt; A。并且显然满足第三条定律（其中 f :: A -&gt; B）：<p style="text-align: center;">(id :: B -> B) . f = f . (id :: A -> A) = f</p></li></ol><h3 id="函子（Functors）"><a href="#函子（Functors）" class="headerlink" title="函子（Functors）"></a>函子（Functors）</h3><p>一个范畴中的态射将两个对象联系起来，而函子则会将两个范畴联系起来。换句话说，函子就是从一个范畴到另一个范畴的变换。比如对于范畴$\mathbf{C}$、$\mathbf{D}$，定义函子$F : \mathbf{C}\to\mathbf{D}$满足：</p><ul><li>对于$\mathbf{C}$中的任意对象$A$，在$\mathbf{D}$中都有对象$F(A)$</li><li>对于$\mathbf{C}$中的任意态射$f : A\to B$，在$\mathbf{D}$中都有态射$F(f) : F(A)\to F(B)$</li></ul><p>比如：</p><p>&emsp;遗忘函子（forgetful functor）$U : \mathbf{Grp}\to\mathbf{Set}$，将一个群映射到一个集合中，将群同态映射到集合间的函数</p><p>&emsp;幂集函子（power set functor）$P : \mathbf{Set}\to\mathbf{Set}$，将一个集合映射到它的幂集，将原集合中的函数$f : A\to B$映射到函数$P(f) : \mathcal{P}(A)\to\mathcal{P}(B)$，即从$U\subseteq A$到值域$f(U)\subseteq B$的映射</p><p>&emsp;自函子（endofunctor）$1_{\mathbf{C}} : \mathbf{C}\to\mathbf{C}$，将一个范畴映射到它本身</p><h4 id="函子公理"><a href="#函子公理" class="headerlink" title="函子公理"></a>函子公理</h4><p>函子$F : \mathbf{C}\to\mathbf{D}$也需要满足两个公理：</p><ol><li>对于任意对象$X\in\mathbf{C}$，恒有$F(\mathrm{id}_X)=\mathrm{id}_{F(X)}$</li><li>对于态射$f : Y\to Z$、$g : X\to Y$，恒有$F(f\circ g) = F(f)\circ F(g)$</li></ol><h4 id="mathbf-Hask-范畴上的函子"><a href="#mathbf-Hask-范畴上的函子" class="headerlink" title="$\mathbf{Hask}$范畴上的函子"></a>$\mathbf{Hask}$范畴上的函子</h4><p>Haskell中的Functor定义是：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Functor</span> (<span class="title">f</span> :: * -&gt; *) <span class="keyword">where</span></span> </span><br><span class="line">    fmap :: (a -&gt; b) -&gt; f a -&gt; f b</span><br></pre></td></tr></table></figure><p>对于Haskell中的Functor，它实际上是从$\mathbf{Hask}$范畴（types）到它子范畴的变换。比如列表函子$\mathtt{[]} : \mathbf{Hask}\to\mathbf{Lst}$（其中$\mathbf{Lst}$是所有Haskell中列表类型构成的范畴）</p><p>它也达成了范畴论中对于函子的要求。函子需要进行两个操作：将一个范畴中的对象映射到另一个范畴中、将一个范畴中的态射映射到另一个范畴中。以Maybe为例，它实现了函子的要求：</p><ol><li>Maybe是一个类型构造器，他可以将任意类型 T 变成新类型 Maybe T，相当于从$\mathbf{Hask}$范畴的对象变成了$\mathbf{Maybe}$范畴的对象 </li><li>fmap函数接收一个 a -&gt; b 类型的函数，返回一个 Maybe a -&gt; Maybe b 类型的函数，相当于将$\mathbf{Hask}$范畴中的态射$f : A\to B$映射成了$\mathbf{Maybe}$范畴中的态射$\mathbf{Maybe}(f) : \mathbf{Maybe}(A)\to\mathbf{Maybe}(B)$</li></ol><p><strong>注意</strong>：时刻记住这里研究的是$\mathbf{Hask}$范畴和它的子范畴，对象是类型而不是值，态射是函数也指的是从类型到类型</p><p>同时，Haskell中的Functor也满足函子公理：</p><ol><li>fmap id = id 即 fmap (id :: A -&gt; A) = (id :: f A -&gt; f A)</li><li>fmap (f . g) = fmap f . fmap g</li></ol><h3 id="单子（Monads）"><a href="#单子（Monads）" class="headerlink" title="单子（Monads）"></a>单子（Monads）</h3><blockquote><p>一个单子说白了不过就是自函子范畴上的一个幺半群而已 _(:з」∠)_</p></blockquote><p>自函子在前面说到过是从一个范畴到自身的一个函子，如范畴$\mathbf{C}$上的自函子是$F : \mathbf{C}\to\mathbf{C}$。自函子范畴就是对象都是自函子的范畴。幺半群和Haskell中学到的Monoid类型类一样，是一个有可结合二元运算和单位元的代数结构。因此单子就是一个自函子，而且它有可结合二元运算（Haskell中<code>&gt;=&gt;</code>）和单位元（Haskell中<code>return</code>）。</p><p>一个单子$M : \mathbf{C}\to\mathbf{C}$还包含两个态射（对于范畴$\mathbf{C}$中的所有对象$X$）：</p><ol><li>$\mathrm{unit}_X^M : X\to M(X)$</li><li>$\mathrm{join}_X^M : M(M(X))\to M(X)$</li></ol><p>（当式子中的单子明显是$M$时，可以省略上标${}^M$）</p><p>Haskell中Monad的定义是：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Functor</span> m =&gt; <span class="type">Monad</span> m <span class="keyword">where</span></span> </span><br><span class="line">    return :: a -&gt; m a </span><br><span class="line">    (&gt;&gt;=)  :: m a -&gt; (a -&gt; m b) -&gt; m b</span><br></pre></td></tr></table></figure><p>其中很显然多态函数<code>return</code>对应了定义中的$\mathrm{unit}$，但是<code>&gt;&gt;=</code>和$mathrm{join}$的对应关系并不明显。因此Haskell中有一个工具函数<code>join</code>，它的效果就是定义中的$\mathrm{join}$，而且它可以和<code>&gt;&gt;=</code>互相定义：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">join</span> :: <span class="type">Monad</span> m =&gt; m (m a) -&gt; m a</span><br><span class="line"><span class="title">join</span> x = x &gt;&gt;= id</span><br><span class="line"></span><br><span class="line">(&gt;&gt;=) :: m a -&gt; (a -&gt; m b) -&gt; m b </span><br><span class="line"><span class="title">x</span> &gt;&gt;= f = join $ fmap f x</span><br></pre></td></tr></table></figure><p>所以Haskell中为Monad要求定义<code>&gt;&gt;=</code>就相当于定义了$\mathrm{join}$</p><p>例如，幂集函子$P : \mathbf{Set}\to\mathbf{Set}$也是一个单子，可以为它定义$\mathrm{unit}$和$\mathrm{join}$两个态射。Haskell中的列表也可以近似看作幂集函子。</p><p>&emsp;态射/函数的类型：</p><table><thead><tr><th align="center">幂集函子</th><th align="center">Haskell中列表</th></tr></thead><tbody><tr><td align="center">一个集合$S$和一个态射$f : A\to B$</td><td align="center">一个类型 T 和一个函数 f :: A -&gt; B</td></tr><tr><td align="center">$P(f) : \mathcal{P}(A)\to\mathcal{P}(B)$</td><td align="center">fmap f :: [A] -&gt; [B]</td></tr><tr><td align="center">$\mathrm{unit}_S : S\to\mathcal{P}(S)$</td><td align="center">return :: T -&gt; [T]</td></tr><tr><td align="center">$\mathrm{join}_S : \mathcal{P}(\mathcal{P}(S))\to\mathcal{P}(S)$</td><td align="center">join :: [[T]] -&gt; [T]</td></tr></tbody></table><p>&emsp;态射/函数的定义：</p><table><thead><tr><th align="center">幂集函子</th><th align="center">Haskell中列表</th></tr></thead><tbody><tr><td align="center">$(\mathcal{P}(f))(S) = \{f(a):a\in S\}$</td><td align="center">fmap f xs = [ f a | a &lt;- xs ]</td></tr><tr><td align="center">$\mathrm{unit}_S(x) = \{x\}$</td><td align="center">return x = [x]</td></tr><tr><td align="center">$\mathrm{join}_S(L) = \bigcup L$</td><td align="center">join xs = concat xs</td></tr></tbody></table><h4 id="单子公理"><a href="#单子公理" class="headerlink" title="单子公理"></a>单子公理</h4><p>给定一个单子$M : \mathbf{C}\to\mathbf{C}$，和一个态射$f : A\to B$（其中$A,B\in \mathbf{C}$），那么满足下面四条定律：</p><ol><li>$\mathrm{join}\circ M(\mathrm{join})=\mathrm{join}\circ\mathrm{join}$</li><li>$\mathrm{join}\circ M(\mathrm{unit})=\mathrm{join}\circ\mathrm{unit}=\mathrm{id}$</li><li>$\mathrm{unit}\circ f = M(f)\circ\mathrm{unit}$</li><li>$\mathrm{join}\circ M(M(f)) = M(f)\circ\mathrm{join}$</li></ol><p>也可以很自然地将其转化为Haskell中的表述：</p><ol><li>join . fmap join <code>=</code> join . join </li><li>join . fmap return <code>=</code> join . return <code>=</code> id </li><li>return . f <code>=</code> fmap f . return </li><li>join . fmap (fmap f) <code>=</code> fmap f . join</li></ol><p>在Haskell中，使用<code>&gt;&gt;=</code>也有三个定律和这四个定律是等价的：</p><ol><li>return x &gt;&gt;= f <code>=</code> f x <figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  return x &gt;&gt;= f </span><br><span class="line">= join (fmap f (return x)) = join (fmap f . return $ x)</span><br><span class="line">= join (return (f x)) = join (return . f $ x)</span><br><span class="line">= join . return $ (f x)</span><br><span class="line">= id (f x)</span><br><span class="line">= f x</span><br></pre></td></tr></table></figure></li><li>m &gt;&gt;= return <code>=</code> m<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  m &gt;&gt;= return </span><br><span class="line">= join (fmap return m) = join . fmap return $ m </span><br><span class="line">= id m</span><br><span class="line">= m </span><br></pre></td></tr></table></figure></li><li>(m &gt;&gt;= f) &gt;&gt;= g <code>=</code> m &gt;&gt;= (\x -&gt; f x &gt;&gt;= g)<figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  (m &gt;&gt;= f) &gt;&gt;= g </span><br><span class="line">= (join (fmap f m)) &gt;&gt;= g = join (fmap g (join (fmap f m)))</span><br><span class="line">= join . fmap g . join $ fmap f m </span><br><span class="line">= join . join . fmap (fmap g) $ fmap f m </span><br><span class="line">= join . join . fmap (fmap g) . fmap f $ m </span><br><span class="line">= join . join . fmap (fmap g . f) $ m </span><br><span class="line">= join . fmap join . fmap (fmap g . f) $ m </span><br><span class="line">= join . fmap (join . (fmap g . f)) $ m </span><br><span class="line">= join . fmap (\x -&gt; join (fmap g (f x))) $ m </span><br><span class="line">= join . fmap (\x -&gt; f x &gt;&gt;= g) $ m </span><br><span class="line">= join (fmap (\x -&gt; f x &gt;&gt;= g) m)</span><br><span class="line">= m &gt;&gt;= (\x -&gt; f x &gt;&gt;= g)</span><br></pre></td></tr></table></figure></li></ol><p>有关do语句和<code>&gt;=&gt;</code>的公理表述在上文中已经说过</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>啃了将近一个月，算是把Haskell的主要内容都啃完了。主要就是前期看<a href="http://learnyouahaskell.com/chapters">Learn You a Haskell</a>，后期看<a href="https://wiki.haskell.org/Typeclassopedia">Typeclassopedia</a>，都是pdcxs推荐给的教程。但是一堆视频一个都没有耐心看进去qwq</p><p>后面的部分的理解感觉也没到位，Category、Arrow等这些类型类也就是大致地看了一眼，甚至有什么用都不太清楚_(:з」∠)_</p><p>感觉Haskell这门语言确实很神奇，很多语法都很有意思，而且可以做到非常贴近数学、贴近数学概念。学的时候也是越学坑越多，先是函数式编程引申到了lambda演算，然后是函子等一系列概念引申到了范畴论，目前范畴论简单地看了一部分，lambda演算也没深入研究，以后有时间再说了（咕咕咕）</p><p>现在感觉我学到的Haskell简直是皮毛，还有一堆源码里的东西不知道是怎么回事（包括但不限于#，~），也还有一堆类型类和用法没有学到（包括但不限于Monad Transformer、Writer、Reader、State、Comonad、MonadFix、Lens、Parsec、……）<del>md，这么一看差的还真多</del>，以后有时间再慢慢学了，这个假期还有好多其它事要干呢，Haskell这边先摸了_(:з」∠)_</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="http://learnyouahaskell.com/chapters">Learn You a Haskell</a></li><li><a href="https://stackoverflow.com/questions/6172004/writing-foldl-using-foldr">Writing foldl using foldr - StackOverflow</a></li><li><a href="https://blog.csdn.net/WinterShiver/article/details/103308165">Haskell：用foldr定义foldl</a></li><li><a href="https://wiki.haskell.org/Typeclassopedia">Typeclassopedia - Haskell wiki</a></li><li><a href="https://hoogle.haskell.org/">Hoogle</a></li><li><a href="https://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html">Functors, Applicatives, And Monads In Pictures</a></li><li><a href="http://02s949.coding-pages.com/2018/08/15/haskellc/">Haskell学习 - functor</a></li><li><a href="https://blog.csdn.net/zwvista/article/details/54863519">Haskell语言学习笔记（8）Monoid - zwvista</a></li><li><a href="https://blog.csdn.net/zwvista/article/details/62238541">Haskell语言学习笔记（16）Alternative - zwvista</a></li><li><a href="https://blog.csdn.net/zwvista/article/details/78679542">Haskell语言学习笔记（40）Arrow（1） - zwvista</a></li><li><a href="https://ocharles.org.uk/blog/guest-posts/2014-12-21-arrows.html">24 Days of GHC Extensions: Arrows - Tom Ellis</a></li><li><a href="https://blog.csdn.net/zwvista/article/details/78690485">Haskell语言学习笔记（47）Arrow（2） - zwvista</a></li><li><a href="https://en.wikibooks.org/wiki/Haskell/Category_theory">Haskell/Category theory - wikibooks</a></li><li><a href="https://en.wikipedia.org/wiki/Category_theory">Category theory - wikipedia</a></li><li><a href="https://zh.wikipedia.org/wiki/%E8%8C%83%E7%95%B4%E8%AE%BA">范畴论 - 维基百科</a></li><li><a href="https://en.wikipedia.org/wiki/Monad_(category_theory)">Monad (category theory) - wikipedia</a></li><li><a href="https://en.wikipedia.org/wiki/Functor">Functor - wikipedia</a></li></ul><p style="text-align: center; font-size: x-large; font-weight: bolder"> "The End?" </p>]]></content>
    
    
    <summary type="html">&lt;p style=&quot;text-align: center;&quot;&gt;学习一门新语言之Haskell&lt;/p&gt;

&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;之前一直很好奇函数式编程，觉得Haskell挺有意思的，想学学&lt;br&gt;现在高考完放假了，可以有时间具体学一学了&lt;br&gt;这里没有Haskell的教程，只有我在学习Haskell时写下的笔记&lt;/p&gt;</summary>
    
    
    
    
    <category term="Haskell" scheme="https://blog.tonycrane.cc/tags/Haskell/"/>
    
    <category term="笔记" scheme="https://blog.tonycrane.cc/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>修复manim中Text类的bug</title>
    <link href="https://blog.tonycrane.cc/p/b6815e8.html"/>
    <id>https://blog.tonycrane.cc/p/b6815e8.html</id>
    <published>2020-05-05T23:59:39.000Z</published>
    <updated>2021-06-21T14:47:07.558Z</updated>
    
    <content type="html"><![CDATA[<p>在使用manim时,对于Text类,会有一些bug,我尝试修复了它们</p><ol><li>在<code>shaders</code>分支下无法使用Text类</li><li>Text文字的stroke边框不完整,导致显示stroke会非常难看</li><li>含有空格的Text的空格不在文字内部,而在<code>ORIGIN</code>的位置,导致<code>Transform</code>时会有字符在原位置和<code>ORIGIN</code>之间 <del>反复横跳</del></li><li>Text文字的默认大小要比TextMobject大,不容易像TextMobject一样控制大小</li></ol><p>这些问题已经通过<a href="https://github.com/3b1b/manim/pull/1030">#1030</a>修复到了manim的master分支中</p><span id="more"></span><h2 id="mathcal-Bug-1"><a href="#mathcal-Bug-1" class="headerlink" title="$\mathcal{Bug\ 1.}$"></a>$\mathcal{Bug\ 1.}$</h2><p>当在<code>shaders</code>分支下使用Text类时会出现如下报错:<br><img src="../images/text_bug1.png"><br>其中最后一行让我发现此时的p0和p1的大小不相等,不能相加(broadcast),而p0和p1是通过贝赛尔曲线的次数(在shaders下是3)来拆分<code>self.points</code>的<br>所以可能是<code>self.points</code>的长度不为3的倍数,导致了错误.在<code>print(len(self.points))</code>后发现确实是这样<br>然后我又用了 <del>玄学</del> 手段,删掉了SVGMobject的最后一个点,发现可以正常渲染</p><p>此时我又去看了cairo自动生成的svg代码,根据我之前学svg的一点经验,发现每个<code>&lt;path/&gt;</code>的路径结尾都为<code>Z M ... ... /&quot;&gt;</code><br>而<code>Z</code>是将路径闭合,但闭合后又多出了一个<code>M</code>控制符,这会导致manim在处理svg时额外生成一个点<br>而删掉每个路径字符串的最后一个<code>M</code>控制符,可以直接使用正则表达式匹配出来,然后替换掉<br><img src="../images/text_bug1_svg.png"></p><p>我第一个想到的正则表达式是<code>Z M .*? /&quot;&gt;</code>,但是如果在路径的中间出现<code>Z M</code>,则会将其后面有用的部分一起删除<br>而有用的部分一定含有控制符,所以将控制符排除,就可以仅仅匹配掉最后一个<code>M</code>,正则表达式:<code>Z M [^A-Za-z]*? /&quot;&gt;</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">remove_last_M</span>(<span class="params">self, file_name</span>):</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_name, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> fpr:</span><br><span class="line">        content = fpr.read()</span><br><span class="line">    content = re.sub(<span class="string">r&#x27;Z M [^[A-Za-z]*? &quot;\/&gt;&#x27;</span>, <span class="string">&#x27;Z &quot;/&gt;&#x27;</span>, content)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_name, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> fpw:</span><br><span class="line">        fpw.write(content)</span><br></pre></td></tr></table></figure><h2 id="mathcal-Bug-2"><a href="#mathcal-Bug-2" class="headerlink" title="$\mathcal{Bug\ 2.}$"></a>$\mathcal{Bug\ 2.}$</h2><p>Text文字的stroke边框不完整,导致stroke显示不全,也会对<code>DrawBorderThenFill</code>造成影响,也有B站的观众向我提了这个问题</p><blockquote><p>– 话说，感觉每个Chapter之间的文字是不是先画出轮廓再填充上色，画完轮廓的时候停顿了一下。但是停顿的时候轮廓没有画完，有些地方有点断续的感觉<br>– Text类的bug，stroke日常乱套</p></blockquote><p>为了解决这个问题,我只显示了stroke,并且用<code>debugTeX</code>标出了构成每个字符的<code>self.points</code>的位置,比如”manim”如下:<br><img src="../images/text_bug2_before.png"><br>通过观察和与<a href="https://github.com/xy-23">@XiaoYoung</a>交流之后,确定了cairo生成的svg并不能使路径自动闭合<br>而在一般查看svg的软件(Chrome)中,svg图像只显示内部(fill),而stroke被忽略(很细),所以正常使用没问题<br>但是在manim中有时需要使用stroke,这时cairo生成的svg出现了bug,路径没有完全闭合</p><p>我最开始的想法是直接通过<code>.add_line_to()</code>方法将svg收尾相连,但是这显然只解决了m和n<br>而a和i是由两条路径复合而成的,其中的每条路径都没有闭合,所以都需要手动闭合,所以我决定遍历<code>self.points</code><br>这时我使用了一个<code>last</code>变量来记录遍历到当前位置所在的路径上的起点,并且如果到了下一条路径(索引为nppc的倍数,并且不与前一个点相重合),就将首尾连接上,并更新<code>last</code></p><p>而这样做还需要一个特判,当points为空时(空格)直接跳过,否则<code>points[0]</code>会报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">nppc = self.n_points_per_cubic_curve</span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> self:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(each.points) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    points = each.points</span><br><span class="line">    last = points[<span class="number">0</span>]</span><br><span class="line">    each.clear_points()</span><br><span class="line">    <span class="keyword">for</span> index, point <span class="keyword">in</span> <span class="built_in">enumerate</span>(points):</span><br><span class="line">        each.append_points([point])</span><br><span class="line">        <span class="keyword">if</span> index != <span class="built_in">len</span>(points) - <span class="number">1</span> <span class="keyword">and</span> (index + <span class="number">1</span>) % nppc == <span class="number">0</span> <span class="keyword">and</span> <span class="built_in">any</span>(point != points[index+<span class="number">1</span>]):</span><br><span class="line">            each.add_line_to(last)</span><br><span class="line">            last = points[index + <span class="number">1</span>]</span><br><span class="line">    each.add_line_to(last)</span><br></pre></td></tr></table></figure><p>这样做之后,这个bug就完全解决了,而且中文也同时适用,对比如下,上为修复之前,下为修复之后(都为仅显示stroke)<br><img src="../images/text_bug2_after.png"><br><img src="../images/text_bug2_en.png"><br><img src="../images/text_bug2_cn.png"></p><h2 id="mathcal-Bug-3"><a href="#mathcal-Bug-3" class="headerlink" title="$\mathcal{Bug\ 3.}$"></a>$\mathcal{Bug\ 3.}$</h2><p>这个是非常常见的问题了,如下:<br><img src="../images/text_bug3_before.gif"><br>之前解决这个问题是通过’假空格’,即用一个不常用字符表示空格,并将其设为背景色,或者opacity改成0<br>通过debugTeX可以发现,Text的空格占字符而且位置在ORIGIN<br>而TextMobject中的空格直接不占位置.所以我直接在处理bug2的同时,将<code>len(each.points) == 0</code>的处理中加上了<code>self.remove(each)</code>,这样就暂时解决了<br><img src="../images/text_bug3.png"><br><img src="../images/text_bug3_after.gif"><br>而<a href="https://github.com/xy-23">@XiaoYoung</a>也提醒了我,这样的处理会干扰t2c的自动上色(下标改变了),在<a href="https://github.com/3b1b/manim/pull/1018">#1018</a>这里,他决定单开一个pr来修复这个bug,所以我就把这一个commit删除掉了</p><h2 id="mathcal-Bug-4"><a href="#mathcal-Bug-4" class="headerlink" title="$\mathcal{Bug\ 4.}$"></a>$\mathcal{Bug\ 4.}$</h2><p>Text文字的默认大小要比TextMobject大,不容易像TextMobject一样控制大小<br>通过阅读源码可以发现,TextMobject在<code>__init__()</code>的结尾,有一句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> self.height <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    self.scale(TEX_MOB_SCALE_FACTOR)</span><br></pre></td></tr></table></figure><p>而这个<code>TEX_MOB_SCALE_FACTOR</code>默认为<code>0.05</code>,即将默认的SVGMobject(高度为固定默认值)缩小为0.05倍<br>而Text类最后缩小了0.1倍,导致了大小不等,将其改为0.05后,就方便统一大小了<br><img src="../images/text_bug4.png"></p><h2 id="mathcal-Pull-Requests"><a href="#mathcal-Pull-Requests" class="headerlink" title="$\mathcal{Pull\ Requests}$"></a>$\mathcal{Pull\ Requests}$</h2><p>第一次提交pr,记录一下</p><ol><li>将原repo fork到自己的用户上</li><li>clone下来fork的repo</li><li>进行更改,add/commit/push,commit的注释要规范</li><li>在GitHub网页上,打开fork的repo,会有一个按钮<code>New Pull Request</code></li><li>比较,确认更改,然后<code>Create Pull Request</code>,表述出pr的必要性和验证,提交pr</li><li>等待repo管理员merge</li></ol><p>这次修复bug的pr在<a href="https://github.com/3b1b/manim/pull/1030">#1030</a>和<a href="https://github.com/3b1b/manim/pull/1031">#1031</a><br>其中<a href="https://github.com/3b1b/manim/pull/1030">#1030</a>被merge了,而<a href="https://github.com/3b1b/manim/pull/1031">#1031</a>还在等待</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在使用manim时,对于Text类,会有一些bug,我尝试修复了它们&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在&lt;code&gt;shaders&lt;/code&gt;分支下无法使用Text类&lt;/li&gt;
&lt;li&gt;Text文字的stroke边框不完整,导致显示stroke会非常难看&lt;/li&gt;
&lt;li&gt;含有空格的Text的空格不在文字内部,而在&lt;code&gt;ORIGIN&lt;/code&gt;的位置,导致&lt;code&gt;Transform&lt;/code&gt;时会有字符在原位置和&lt;code&gt;ORIGIN&lt;/code&gt;之间 &lt;del&gt;反复横跳&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;Text文字的默认大小要比TextMobject大,不容易像TextMobject一样控制大小&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这些问题已经通过&lt;a href=&quot;https://github.com/3b1b/manim/pull/1030&quot;&gt;#1030&lt;/a&gt;修复到了manim的master分支中&lt;/p&gt;</summary>
    
    
    
    <category term="manim" scheme="https://blog.tonycrane.cc/categories/manim/"/>
    
    <category term="笔记" scheme="https://blog.tonycrane.cc/categories/manim/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="github" scheme="https://blog.tonycrane.cc/tags/github/"/>
    
    <category term="笔记" scheme="https://blog.tonycrane.cc/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="manim" scheme="https://blog.tonycrane.cc/tags/manim/"/>
    
    <category term="python" scheme="https://blog.tonycrane.cc/tags/python/"/>
    
    <category term="bug" scheme="https://blog.tonycrane.cc/tags/bug/"/>
    
  </entry>
  
  <entry>
    <title>树上莫队-笔记  /「SPOJ 10707」COT2-题解</title>
    <link href="https://blog.tonycrane.cc/p/24f5ddbc.html"/>
    <id>https://blog.tonycrane.cc/p/24f5ddbc.html</id>
    <published>2020-04-30T06:35:44.000Z</published>
    <updated>2020-05-05T02:33:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>通过<a href="https://www.luogu.com.cn/problem/SP10707">SPOJ 10707 COT2-Count on a tree II</a>这道题目来学习一下 <strong>树上莫队</strong><br>当需要离线查询 <strong>树上</strong> 的多区间问题时,可以使用 <strong>树上莫队</strong> 来解决</p><p>主要通过 <strong>欧拉序</strong> 将树转化为一条链,然后在链上执行普通莫队的操作</p><span id="more"></span><h2 id="树上莫队"><a href="#树上莫队" class="headerlink" title="树上莫队"></a>树上莫队</h2><h3 id="欧拉序"><a href="#欧拉序" class="headerlink" title="欧拉序"></a>欧拉序</h3><p>正常进行<code>dfs</code>,在入和出时各加入序列中<br>比如样例的树如下:<br><img src="/p/24f5ddbc/graph.png"><br>其欧拉序为<code>1 2 2 3 5 5 6 6 7 7 3 4 8 8 4 1</code><br>可以很好地呈现出子树的关系,即两个相同的数$x$之间的部分为$x$子树中的节点<br>其有一个性质:<strong>区间内出现两次的点不在其路径上</strong><br>根据这个性质,可以将树转化为链来求解了</p><h3 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h3><p>除了将树转化为欧拉序之外,还需要求出左右端点的$LCA$,以及一个点$\texttt{u}$在欧拉序中第一次出现的位置$\texttt{fst[u]}$,第二次(最后一次)出现的位置$\texttt{lst[u]}$</p><p>在进行莫队操作时,如果第一次经过这个点,则<code>add</code>其贡献,第二次经过这个点,则说明这个点不在所求链上,<code>del</code>其贡献<br>这个用一个<code>vis</code>数组,反复进行异或操作就可以解决</p><p>再考虑询问的区间的$l,r$应该赋值为$\texttt{fst}$还是$\texttt{lst}$<br>设左端点的深度小于右端点</p><ol><li>如果$LCA$和左端点相等,则说明$[l,r]$在一条链上,$l$和$r$均取$\texttt{fst}$即可</li><li>否则是两条链$[l, LCA],[LCA,r]$, 防止左右端点被统计两次导致贡献被删除,需要$l$取$\texttt{lst}$,$r$取$\texttt{fst}$</li></ol><p>最后考虑贡献</p><ol><li>若是上面第一种情况,在一条链上,直接统计欧拉序区间内所有点即可,重复两次的根据前文的性质会直接删掉</li><li>若是上面第二种情况,由于左右端点都在$LCA$这颗子树内,所以区间中并不会出现$LCA$,但是却一定会经过,所以额外将$LCA$加入贡献,并且记录下当前结果之后,再将其贡献减去,防止影响下一个查询</li></ol><p><strong>注意:</strong> 转化为欧拉序之后的序列长度为$2n$</p><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><ol><li><code>dfs</code>: $O(n)$</li><li>求$LCA$:$O(n\log n)$</li><li>莫队: $O(n\sqrt{n})$</li></ol><p>综上,树上莫队的复杂度 <del>差不多</del> 也是$O(n\sqrt{n})$</p><h2 id="针对-mathcal-SP10707-的具体实现"><a href="#针对-mathcal-SP10707-的具体实现" class="headerlink" title="针对$\mathcal{SP10707}$的具体实现"></a>针对$\mathcal{SP10707}$的具体实现</h2><p>没啥说的,模板题,做法全在上面了</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">1</span>; <span class="keyword">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) &#123;<span class="keyword">if</span> (ch == <span class="string">&#x27;-&#x27;</span>) f = <span class="number">-1</span>; ch = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))  &#123;x = x * <span class="number">10</span> + ch - <span class="number">48</span>; ch = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">200020</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, l, r, Ans, len, ocnt;</span><br><span class="line"><span class="keyword">int</span> cnt[maxn], fst[maxn], lst[maxn], vis[maxn], ans[maxn];</span><br><span class="line"><span class="keyword">int</span> ord[maxn], val[maxn], dep[maxn], fa[maxn][<span class="number">25</span>], old[maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Query</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, id, pos, lca;</span><br><span class="line">&#125;q[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Query a, Query b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.pos != b.pos) <span class="keyword">return</span> a.pos &lt; b.pos;</span><br><span class="line">    <span class="keyword">if</span> (a.pos &amp; <span class="number">1</span>) <span class="keyword">return</span> a.r &lt; b.r;</span><br><span class="line">    <span class="keyword">return</span> a.r &gt; b.r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> from, to;</span><br><span class="line">    <span class="built_in">Edge</span>(<span class="keyword">int</span> f, <span class="keyword">int</span> t): <span class="built_in">from</span>(f), <span class="built_in">to</span>(t) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;Edge&gt; edges;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; G[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> f, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    edges.<span class="built_in">push_back</span>(<span class="built_in">Edge</span>(f, t));</span><br><span class="line">    edges.<span class="built_in">push_back</span>(<span class="built_in">Edge</span>(t, f));</span><br><span class="line">    <span class="keyword">int</span> mm = edges.<span class="built_in">size</span>();</span><br><span class="line">    G[t].<span class="built_in">push_back</span>(mm - <span class="number">1</span>);</span><br><span class="line">    G[f].<span class="built_in">push_back</span>(mm - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line">    ord[++ocnt] = u; fst[u] = ocnt;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G[u].<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">        Edge&amp; e = edges[G[u][i]];</span><br><span class="line">        <span class="keyword">if</span> (e.to == f) <span class="keyword">continue</span>;</span><br><span class="line">        dep[e.to] = dep[u] + <span class="number">1</span>;</span><br><span class="line">        fa[e.to][<span class="number">0</span>] = u;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">20</span>; ++j) &#123;</span><br><span class="line">            fa[e.to][j] = fa[fa[e.to][j - <span class="number">1</span>]][j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">dfs</span>(e.to, u);</span><br><span class="line">    &#125;</span><br><span class="line">    ord[++ocnt] = u; lst[u] = ocnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dep[x] &gt; dep[y]) <span class="built_in">swap</span>(x, y);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">20</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dep[fa[y][i]] &gt;= dep[x]) y = fa[y][i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x == y) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">20</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (fa[x][i] != fa[y][i]) &#123;</span><br><span class="line">            x = fa[x][i];</span><br><span class="line">            y = fa[y][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fa[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    cnt[val[x]]--;</span><br><span class="line">    <span class="keyword">if</span> (!cnt[val[x]]) Ans--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    cnt[val[x]]++;</span><br><span class="line">    <span class="keyword">if</span> (cnt[val[x]] == <span class="number">1</span>) Ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">chg</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (vis[x]) <span class="built_in">add</span>(x);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">del</span>(x);</span><br><span class="line">    vis[x] ^= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    n = <span class="built_in">read</span>(); m = <span class="built_in">read</span>(); len = <span class="built_in">sqrt</span>(<span class="number">2</span> * n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) old[i] = val[i] = <span class="built_in">read</span>();</span><br><span class="line">    <span class="built_in">sort</span>(old + <span class="number">1</span>, old + <span class="number">1</span> + n); <span class="keyword">int</span> len_ = <span class="built_in">unique</span>(old + <span class="number">1</span>, old + <span class="number">1</span> + n) - old - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) val[i] = <span class="built_in">lower_bound</span>(old + <span class="number">1</span>, old + <span class="number">1</span> + len_, val[i]) - old;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) <span class="built_in">add</span>(<span class="built_in">read</span>(), <span class="built_in">read</span>()); </span><br><span class="line">    dep[<span class="number">1</span>] = <span class="number">1</span>; <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> il = <span class="built_in">read</span>(), ir = <span class="built_in">read</span>();</span><br><span class="line">        <span class="keyword">int</span> LCA = <span class="built_in">lca</span>(il, ir);</span><br><span class="line">        <span class="keyword">if</span> (fst[il] &gt; fst[ir]) <span class="built_in">swap</span>(il, ir);</span><br><span class="line">        <span class="keyword">if</span> (il == LCA) &#123;</span><br><span class="line">            q[i].l = fst[il]; q[i].r = fst[ir];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            q[i].l = lst[il]; q[i].r = fst[ir]; q[i].lca = LCA;</span><br><span class="line">        &#125;</span><br><span class="line">        q[i].id = i; q[i].pos = (q[i].l - <span class="number">1</span>) / len + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(q + <span class="number">1</span>, q + <span class="number">1</span> + m, cmp); l = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; q[i].l) <span class="built_in">chg</span>(ord[l++]);</span><br><span class="line">        <span class="keyword">while</span> (r &gt; q[i].r) <span class="built_in">chg</span>(ord[r--]);</span><br><span class="line">        <span class="keyword">while</span> (l &gt; q[i].l) <span class="built_in">chg</span>(ord[--l]);</span><br><span class="line">        <span class="keyword">while</span> (r &lt; q[i].r) <span class="built_in">chg</span>(ord[++r]);</span><br><span class="line">        <span class="keyword">if</span> (q[i].lca) <span class="built_in">chg</span>(q[i].lca);</span><br><span class="line">        ans[q[i].id] = Ans;</span><br><span class="line">        <span class="keyword">if</span> (q[i].lca) <span class="built_in">chg</span>(q[i].lca);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;通过&lt;a href=&quot;https://www.luogu.com.cn/problem/SP10707&quot;&gt;SPOJ 10707 COT2-Count on a tree II&lt;/a&gt;这道题目来学习一下 &lt;strong&gt;树上莫队&lt;/strong&gt;&lt;br&gt;当需要离线查询 &lt;strong&gt;树上&lt;/strong&gt; 的多区间问题时,可以使用 &lt;strong&gt;树上莫队&lt;/strong&gt; 来解决&lt;/p&gt;
&lt;p&gt;主要通过 &lt;strong&gt;欧拉序&lt;/strong&gt; 将树转化为一条链,然后在链上执行普通莫队的操作&lt;/p&gt;</summary>
    
    
    
    <category term="C++算法" scheme="https://blog.tonycrane.cc/categories/C-%E7%AE%97%E6%B3%95/"/>
    
    <category term="笔记" scheme="https://blog.tonycrane.cc/categories/C-%E7%AE%97%E6%B3%95/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Cpp" scheme="https://blog.tonycrane.cc/tags/Cpp/"/>
    
    <category term="算法" scheme="https://blog.tonycrane.cc/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="笔记" scheme="https://blog.tonycrane.cc/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="NOIp" scheme="https://blog.tonycrane.cc/tags/NOIp/"/>
    
    <category term="题解" scheme="https://blog.tonycrane.cc/tags/%E9%A2%98%E8%A7%A3/"/>
    
    <category term="莫队" scheme="https://blog.tonycrane.cc/tags/%E8%8E%AB%E9%98%9F/"/>
    
    <category term="SPOJ" scheme="https://blog.tonycrane.cc/tags/SPOJ/"/>
    
  </entry>
  
  <entry>
    <title>回滚莫队-笔记  /「AtCoder 1219」歴史の研究-题解</title>
    <link href="https://blog.tonycrane.cc/p/7d7b5548.html"/>
    <id>https://blog.tonycrane.cc/p/7d7b5548.html</id>
    <published>2020-04-30T02:58:35.000Z</published>
    <updated>2020-05-05T02:33:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>通过<a href="https://www.luogu.com.cn/problem/AT1219">AtCoder 1219 歴史の研究</a>这道题目来学习一下 <strong>回滚莫队</strong><br><strong>回滚莫队</strong> 适用于容易进行<code>add</code>操作,而不容易实现<code>del</code>的情况</p><p>通过莫队的分块,指针移动的思想,可以让左指针进行回滚操作, <em>近似</em> 达到<code>del</code>的效果</p><span id="more"></span><h2 id="回滚莫队"><a href="#回滚莫队" class="headerlink" title="回滚莫队"></a>回滚莫队</h2><h3 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h3><p>由于莫队对所有询问离线排序后,当左端点在同一个块内时,右端点递增<br>所以对于每个块,右指针直接向右依次执行<code>add</code>操作即可</p><p>对于左指针,在一个块内时,可以每次都从块的右边界向左进行<code>add</code>,由于不方便进行<code>del</code>操作,所以可以先记录下左指针在右边界时的<code>Ans</code>,然后每次向左移动到<code>q[i].l</code>时,将左指针再移回右边界,并且将<code>Ans</code>回滚到移动之前的值。由于分块,这样做的复杂度也不会很大</p><p>综上,对于每个块,<strong>右指针依次向右推进,左指针在右边界和查询的左端点之间反复横跳</strong><br>这样,执行的就只剩<code>add</code>操作,通过左指针的横跳,避免了<code>del</code>操作</p><p>注意,当左右端点都在同一个块时,只要暴力求出结果就可以了<br><strong>一定要注意</strong>: 不要使用奇偶排序,必须保证右端点的 <strong>单调递增</strong></p><p>对于每个块内的处理,大概如下图:<br><img src="/p/7d7b5548/RollBackMosAlgo.png" alt="橙色箭头:左指针的移动 蓝色箭头:右指针的移动"></p><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>时间复杂度由以下几个方面组成</p><ol><li>询问排序</li><li>同一个块内的暴力求解</li><li>左指针的移动(<del>横跳</del>)</li><li>右指针的顺次移动</li></ol><p>下面来 <del>不严谨</del> 简要地计算一下时间复杂度</p><ol><li><strong>排序</strong>:$O(n\log n)$</li><li><strong>暴力</strong>:暴力的区间最长为$\sqrt{n}$,所以单次暴力的复杂度为$O(\sqrt{n})$,$n$次暴力的复杂度为$O(n\sqrt{n})$<del>其实到不了n次</del></li><li><strong>左指针移动</strong>: 进行<code>add</code>操作的复杂度为$O(1)$,块长$\sqrt{n}$,每次左移最坏复杂度$O(\sqrt{n})$,回滚时仍需要$O(\sqrt{n})$清除贡献<br>所以对于所有块,一共要移动$q$次,总的复杂度为$O(2q\sqrt{n})$</li><li><strong>右指针移动</strong>: 对于每个块,最坏只要移动$n$次,一共$\sqrt{n}$个块,所以复杂度为$O(n\sqrt{n})$</li></ol><p>综上,总的复杂度为$O(n\log n)+O(2q\sqrt{n})+O(n\sqrt{n})\ \sim\ O(n\sqrt{n})$</p><h2 id="针对-mathcal-AT1219-的具体实现"><a href="#针对-mathcal-AT1219-的具体实现" class="headerlink" title="针对$\mathcal{AT1219}$的具体实现"></a>针对$\mathcal{AT1219}$的具体实现</h2><p>添加贡献的<code>add</code>操作很容易实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    cnt[a[x]]++;</span><br><span class="line">    Ans = <span class="built_in">max</span>(Ans, <span class="number">1LL</span> * cnt[a[x]] * old[a[x]]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同一块内的暴力也很容易实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LL <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    LL res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; ++i) cnt2[a[i]] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; ++i) &#123;</span><br><span class="line">        cnt2[a[i]]++;</span><br><span class="line">        res = <span class="built_in">max</span>(res, <span class="number">1LL</span> * cnt2[a[i]] * old[a[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其余情况下根据前面所说,可以实现</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (r &lt; q[i].r) <span class="built_in">add</span>(++r);  <span class="comment">// 右指针右移,添加贡献</span></span><br><span class="line">LL tmp = Ans;                 <span class="comment">// 记录左指针移动前的答案</span></span><br><span class="line"><span class="keyword">while</span> (l &gt; q[i].l) <span class="built_in">add</span>(--l);  <span class="comment">// 左指针左移,添加贡献</span></span><br><span class="line">ans[q[i].id] = Ans;</span><br><span class="line"><span class="keyword">while</span> (l &lt; rpos[k] + <span class="number">1</span>) cnt[a[l++]]--; <span class="comment">// 左指针移动回右边界,并途中删除对cnt的贡献</span></span><br><span class="line">Ans = tmp;                    <span class="comment">// 回滚到移动前的答案</span></span><br></pre></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">1</span>; <span class="keyword">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) &#123;<span class="keyword">if</span> (ch == <span class="string">&#x27;-&#x27;</span>) f = <span class="number">-1</span>; ch = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))  &#123;x = x * <span class="number">10</span> + ch - <span class="number">48</span>; ch = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, len, l, r;</span><br><span class="line"><span class="keyword">int</span> a[maxn], cnt[maxn], rpos[maxn], old[maxn], cnt2[maxn];</span><br><span class="line">LL Ans, ans[maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Query</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, id, pos;</span><br><span class="line">&#125;q[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Query a, Query b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.pos != b.pos) <span class="keyword">return</span> a.pos &lt; b.pos;</span><br><span class="line">    <span class="keyword">return</span> a.r &lt; b.r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    LL res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; ++i) cnt2[a[i]] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= r; ++i) &#123;</span><br><span class="line">        cnt2[a[i]]++;</span><br><span class="line">        res = <span class="built_in">max</span>(res, <span class="number">1LL</span> * cnt2[a[i]] * old[a[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    cnt[a[x]]++;</span><br><span class="line">    Ans = <span class="built_in">max</span>(Ans, <span class="number">1LL</span> * cnt[a[x]] * old[a[x]]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    n = <span class="built_in">read</span>(); m = <span class="built_in">read</span>(); len = <span class="built_in">sqrt</span>(n); <span class="keyword">int</span> num = <span class="built_in">ceil</span>((<span class="keyword">double</span>)n / len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num; ++i) rpos[i] = len * i; rpos[num] = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) old[i] = a[i] = <span class="built_in">read</span>();</span><br><span class="line">    <span class="built_in">sort</span>(old + <span class="number">1</span>, old + <span class="number">1</span> + n);</span><br><span class="line">    <span class="keyword">int</span> len_ = <span class="built_in">unique</span>(old + <span class="number">1</span>, old + <span class="number">1</span> + n) - old - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) a[i] = <span class="built_in">lower_bound</span>(old + <span class="number">1</span>, old + <span class="number">1</span> + len_, a[i]) - old;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        q[i].l = <span class="built_in">read</span>(); q[i].r = <span class="built_in">read</span>();</span><br><span class="line">        q[i].id = i; q[i].pos = (q[i].l - <span class="number">1</span>) / len + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(q + <span class="number">1</span>, q + <span class="number">1</span> + m, cmp); l = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>, i = <span class="number">1</span>; k &lt;= num; ++k) &#123;</span><br><span class="line">        l = rpos[k] + <span class="number">1</span>, r = rpos[k], Ans = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(cnt, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(cnt));</span><br><span class="line">        <span class="keyword">while</span> (q[i].pos == k) &#123;</span><br><span class="line">            <span class="keyword">if</span> (q[i].l / len == q[i].r / len) &#123;</span><br><span class="line">                ans[q[i].id] = <span class="built_in">solve</span>(q[i].l, q[i].r);</span><br><span class="line">                i++; <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (r &lt; q[i].r) <span class="built_in">add</span>(++r);</span><br><span class="line">            LL tmp = Ans;</span><br><span class="line">            <span class="keyword">while</span> (l &gt; q[i].l) <span class="built_in">add</span>(--l);</span><br><span class="line">            ans[q[i].id] = Ans;</span><br><span class="line">            <span class="keyword">while</span> (l &lt; rpos[k] + <span class="number">1</span>) cnt[a[l++]]--;</span><br><span class="line">            Ans = tmp; i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;通过&lt;a href=&quot;https://www.luogu.com.cn/problem/AT1219&quot;&gt;AtCoder 1219 歴史の研究&lt;/a&gt;这道题目来学习一下 &lt;strong&gt;回滚莫队&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;回滚莫队&lt;/strong&gt; 适用于容易进行&lt;code&gt;add&lt;/code&gt;操作,而不容易实现&lt;code&gt;del&lt;/code&gt;的情况&lt;/p&gt;
&lt;p&gt;通过莫队的分块,指针移动的思想,可以让左指针进行回滚操作, &lt;em&gt;近似&lt;/em&gt; 达到&lt;code&gt;del&lt;/code&gt;的效果&lt;/p&gt;</summary>
    
    
    
    <category term="C++算法" scheme="https://blog.tonycrane.cc/categories/C-%E7%AE%97%E6%B3%95/"/>
    
    <category term="笔记" scheme="https://blog.tonycrane.cc/categories/C-%E7%AE%97%E6%B3%95/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Cpp" scheme="https://blog.tonycrane.cc/tags/Cpp/"/>
    
    <category term="算法" scheme="https://blog.tonycrane.cc/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="笔记" scheme="https://blog.tonycrane.cc/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="NOIp" scheme="https://blog.tonycrane.cc/tags/NOIp/"/>
    
    <category term="题解" scheme="https://blog.tonycrane.cc/tags/%E9%A2%98%E8%A7%A3/"/>
    
    <category term="莫队" scheme="https://blog.tonycrane.cc/tags/%E8%8E%AB%E9%98%9F/"/>
    
    <category term="AtCoder" scheme="https://blog.tonycrane.cc/tags/AtCoder/"/>
    
  </entry>
  
  <entry>
    <title>带修莫队-笔记  /「Luogu P1903」数颜色-题解</title>
    <link href="https://blog.tonycrane.cc/p/838c5e29.html"/>
    <id>https://blog.tonycrane.cc/p/838c5e29.html</id>
    <published>2020-04-29T01:00:14.000Z</published>
    <updated>2020-05-05T02:33:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>通过<a href="https://www.luogu.com.cn/problem/P1903">Luogu P1903 数颜色/维护序列</a>这道题目来学习一下 <strong>带修莫队</strong><br>顾名思义,<strong>带修莫队</strong> 不仅要支持普通莫队的查询操作,还要支持数据中途的修改</p><p>比如这道题目,需要实现以下目标</p><ol><li>查询$[L,R]$区间内不同颜色画笔的种数</li><li>将$pos$处的画笔替换为$color$颜色</li></ol><p>达到这个目标,可以在普通莫队的基础上加一个时间维度,实现 <strong>带修莫队</strong></p><span id="more"></span> <h2 id="带修莫队"><a href="#带修莫队" class="headerlink" title="带修莫队"></a>带修莫队</h2><h3 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h3><p>这里的每个查询的时间戳规定为 <strong>最近修改操作的时间戳</strong>,即最近一次修改是第几次修改<br>修改操作会增加总时间戳,查询操作不会增加时间戳</p><h3 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h3><p>在普通莫队的左右两个指针的基础之上 <em>增加</em> 一个 <strong>时间戳指针</strong><br>当左右端点及时间戳移动到均和当前查询的一致,就可以记录下当前答案</p><p>所以需要在普通莫队的基础之上加上修改时间戳的修改操作,并加上以下两个判断</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (t &lt; q[i].t) <span class="built_in">chg</span>(++t);</span><br><span class="line"><span class="keyword">while</span> (t &gt; q[i].t) <span class="built_in">chg</span>(t--);</span><br></pre></td></tr></table></figure><p>当当前时间小于询问时间时,先将当前时间$+1$,再修改<br>当当前时间大于询问时间时,先修改,再将当前时间$-1$</p><p>与普通莫队还有一点不同:<br>所有询问的排序方法,先按照左端点分块升序,再按照右端点 <strong>分块升序</strong>,最后按照时间戳升序<br>这样复杂度才会达到最优,节省了一系列不必要的操作</p><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>当分块的大小为$n^{\frac{2}{3}}$时,复杂度最小为$O(n^{\frac{5}{3}})$<br>具体分析见上一篇文章:<a href="681257d9.html">浅析莫队算法的时间复杂度</a></p><h2 id="针对-mathcal-P1903-的具体实现"><a href="#针对-mathcal-P1903-的具体实现" class="headerlink" title="针对$\mathcal{P1903}$的具体实现"></a>针对$\mathcal{P1903}$的具体实现</h2><p>在每个询问<code>Query</code>的结构体内加一个时间戳$t$,并且按照上文实现排序</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Query</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, t, id;</span><br><span class="line">&#125;q[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Query a, Query b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (block[a.l] != block[b.l]) <span class="keyword">return</span> block[a.l] &lt; block[b.l];</span><br><span class="line">    <span class="keyword">if</span> (block[a.r] != block[b.r]) <span class="keyword">return</span> block[a.r] &lt; block[b.r];</span><br><span class="line">    <span class="keyword">return</span> a.t &lt; b.t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再建一个结构体<code>Change</code>,表示每次修改操作的数据,需要$pos$和$color$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Change</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> pos, color;</span><br><span class="line">&#125;c[maxn];</span><br></pre></td></tr></table></figure><p>正常的<code>add/del</code>操作不再赘述<br>现在来看一下修改时间对应数据的操作</p><ol><li>当当前时间的操作的位置$pos$在当前区间$[l,r]$时,对答案有影响,需要调整当前答案<br>先将$pos$位置上的贡献删去,再将当前修改操作的$color$添加进去</li><li>将$pos$位置上的数与$color$交换,这样可以保证之后可以再换回来</li></ol><p>实现如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">chg</span><span class="params">(<span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= c[t].pos &amp;&amp; c[t].pos &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">if</span> (--cnt[a[c[t].pos]] == <span class="number">0</span>) Ans--; <span class="comment">// 删除贡献</span></span><br><span class="line">        <span class="keyword">if</span> (cnt[c[t].color]++  == <span class="number">0</span>) Ans++; <span class="comment">// 添加贡献</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">swap</span>(a[c[t].pos], c[t].color); <span class="comment">// 交换</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外这题修改数据后严重卡常,手动开了O3,Ofast,inline才过</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">&quot;Ofast&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">&quot;inline&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">1</span>; <span class="keyword">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) &#123;<span class="keyword">if</span> (ch == <span class="string">&#x27;-&#x27;</span>) f = <span class="number">-1</span>; ch = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))  &#123;x = x * <span class="number">10</span> + ch - <span class="number">48</span>; ch = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">140000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, l, r, t, len, cntq, cntr, Ans;</span><br><span class="line"><span class="keyword">int</span> a[maxn], cnt[<span class="number">1000010</span>], ans[maxn], block[maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Query</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, t, id;</span><br><span class="line">&#125;q[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Query a, Query b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (block[a.l] != block[b.l]) <span class="keyword">return</span> block[a.l] &lt; block[b.l];</span><br><span class="line">    <span class="keyword">if</span> (block[a.r] != block[b.r]) <span class="keyword">return</span> block[a.r] &lt; block[b.r];</span><br><span class="line">    <span class="keyword">return</span> a.t &lt; b.t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Change</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> pos, color;</span><br><span class="line">&#125;c[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cnt[a[x]] == <span class="number">0</span>) Ans++;</span><br><span class="line">    cnt[a[x]]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (cnt[a[x]] == <span class="number">1</span>) Ans--;</span><br><span class="line">    cnt[a[x]]--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">chg</span><span class="params">(<span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= c[t].pos &amp;&amp; c[t].pos &lt;= r) &#123;</span><br><span class="line">        <span class="built_in">del</span>(c[t].pos);</span><br><span class="line">        <span class="keyword">if</span> (cnt[c[t].color] == <span class="number">0</span>) Ans++;</span><br><span class="line">        cnt[c[t].color]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">swap</span>(a[c[t].pos], c[t].color);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    n = <span class="built_in">read</span>(); m = <span class="built_in">read</span>(); len = <span class="built_in">pow</span>(n, <span class="number">2.0</span> / <span class="number">3.0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        a[i] = <span class="built_in">read</span>();</span><br><span class="line">        block[i] = (i - <span class="number">1</span>) / len + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="keyword">char</span> opt[<span class="number">10</span>]; <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, opt);</span><br><span class="line">        <span class="keyword">if</span> (opt[<span class="number">0</span>] == <span class="string">&#x27;Q&#x27;</span>) &#123;</span><br><span class="line">            q[++cntq].l = <span class="built_in">read</span>(); q[cntq].r = <span class="built_in">read</span>();</span><br><span class="line">            q[cntq].id = cntq; q[cntq].t = cntr;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            c[++cntr].pos = <span class="built_in">read</span>();</span><br><span class="line">            c[cntr].color = <span class="built_in">read</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(q + <span class="number">1</span>, q + <span class="number">1</span> + cntq, cmp); l = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cntq; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; q[i].l) <span class="built_in">del</span>(l++);</span><br><span class="line">        <span class="keyword">while</span> (r &gt; q[i].r) <span class="built_in">del</span>(r--);</span><br><span class="line">        <span class="keyword">while</span> (l &gt; q[i].l) <span class="built_in">add</span>(--l);</span><br><span class="line">        <span class="keyword">while</span> (r &lt; q[i].r) <span class="built_in">add</span>(++r);</span><br><span class="line">        <span class="keyword">while</span> (t &lt; q[i].t) <span class="built_in">chg</span>(++t);</span><br><span class="line">        <span class="keyword">while</span> (t &gt; q[i].t) <span class="built_in">chg</span>(t--);</span><br><span class="line">        ans[q[i].id] = Ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cntq; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;通过&lt;a href=&quot;https://www.luogu.com.cn/problem/P1903&quot;&gt;Luogu P1903 数颜色/维护序列&lt;/a&gt;这道题目来学习一下 &lt;strong&gt;带修莫队&lt;/strong&gt;&lt;br&gt;顾名思义,&lt;strong&gt;带修莫队&lt;/strong&gt; 不仅要支持普通莫队的查询操作,还要支持数据中途的修改&lt;/p&gt;
&lt;p&gt;比如这道题目,需要实现以下目标&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;查询$[L,R]$区间内不同颜色画笔的种数&lt;/li&gt;
&lt;li&gt;将$pos$处的画笔替换为$color$颜色&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;达到这个目标,可以在普通莫队的基础上加一个时间维度,实现 &lt;strong&gt;带修莫队&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="C++算法" scheme="https://blog.tonycrane.cc/categories/C-%E7%AE%97%E6%B3%95/"/>
    
    <category term="笔记" scheme="https://blog.tonycrane.cc/categories/C-%E7%AE%97%E6%B3%95/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Cpp" scheme="https://blog.tonycrane.cc/tags/Cpp/"/>
    
    <category term="算法" scheme="https://blog.tonycrane.cc/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="笔记" scheme="https://blog.tonycrane.cc/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="NOIp" scheme="https://blog.tonycrane.cc/tags/NOIp/"/>
    
    <category term="题解" scheme="https://blog.tonycrane.cc/tags/%E9%A2%98%E8%A7%A3/"/>
    
    <category term="莫队" scheme="https://blog.tonycrane.cc/tags/%E8%8E%AB%E9%98%9F/"/>
    
    <category term="Luogu" scheme="https://blog.tonycrane.cc/tags/Luogu/"/>
    
  </entry>
  
  <entry>
    <title>浅析莫队算法的时间复杂度</title>
    <link href="https://blog.tonycrane.cc/p/681257d9.html"/>
    <id>https://blog.tonycrane.cc/p/681257d9.html</id>
    <published>2020-04-28T23:29:52.000Z</published>
    <updated>2020-05-05T02:33:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章来记录一下莫队算法时间复杂度的简单(<del>不严谨</del>)计算</p><p>首先分析一下莫队算法的时间复杂度有哪些方面构成</p><ol><li>对询问<code>Query</code>数组的排序</li><li>区间左指针的移动</li><li>区间右指针的移动<span id="more"></span> </li></ol><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>每个<code>add/del</code>操作的复杂度为$O(1)$</p><ol><li><p>排序使用<code>sort</code>可以在$O(n\log n)$内完成</p></li><li><p>由于左指针在排序中被分块,所以又分为块内移动和块间移动</p><ul><li><strong>块内</strong>: 设每块中含左端点$x_i$个,由于每块大小为$\sqrt{n}$,所以在块内移动的最坏复杂度为$O(x_i\sqrt{n})$。<br>因此对于所有块,将复杂度求和,即为$O(\displaystyle\sum_ix_i\sqrt{n})=O(n\sqrt{n})$</li><li><strong>块间</strong>: 左指针在每个块内移动之后,需要移动到下一个块内的左端点处,块间跳转最坏跨两个整块需要$O(2\sqrt{n})$。<br>总共需要跨$\sqrt{n}-1$个块,所以复杂度为$O((\sqrt{n}-1)\times 2\sqrt{n})\sim O(n)$</li></ul></li></ol><p>综上,左指针移动的复杂度为$O(n\sqrt{n})$<br>3. 当左指针在同一个块内时,右指针是有序的,因此当左指针在同一个块内时,右指针移动的最坏复杂度为$O(n)$即全部移动一遍。而每个块长度为$\sqrt{n}$,总长为$n$,所以一共$\sqrt{n}$个块,所以最坏复杂度为$O(n\sqrt{n})$</p><p>综上,普通莫队算法的时间复杂度为<br>$$<br>O(n\log n)+O(n\sqrt{n})+O(n\sqrt{n})\ \sim\ O(n\sqrt{n})<br>$$</p><h2 id="玄学的奇偶排序优化"><a href="#玄学的奇偶排序优化" class="headerlink" title="玄学的奇偶排序优化"></a><del>玄学</del>的奇偶排序优化</h2><p>见图:<br><img src="/p/681257d9/MosAlgoCompare.png" alt="左:无奇偶排序,右:有奇偶排序&lt;/br&gt;图中灰色虚线表示分块的边界;带端点的线段表示需要询问的区间;红色箭头表示两种方法右指针移动相同长度的部分;蓝色箭头表示不同的部分。可以看出,有奇偶排序的蓝色箭头变短,避免了无意义的大幅度跳动,节省了一些常数复杂度"></p><h2 id="分块大小不为-sqrt-n"><a href="#分块大小不为-sqrt-n" class="headerlink" title="分块大小不为$\sqrt{n}$"></a>分块大小不为$\sqrt{n}$</h2><p>还是和前面一样推复杂度,设块大小为$a&gt;1$</p><ol><li><strong>排序</strong>: 需要$O(n\log n)$</li><li><strong>左指针移动</strong>: <ul><li><strong>块内</strong>: $O(\displaystyle\sum_ix_ia)=O(na)$</li><li><strong>块间</strong>: $O((\dfrac{n}{a}-1)\times 2a)=O(n)$</li></ul></li><li><strong>右指针移动</strong>: $O(n\times \dfrac{n}{a})=O(\dfrac{n^2}{a})$</li></ol><p>综上,总的复杂度为$O(n\log n)+O(na)+O(n)+O(\dfrac{n^2}{a})=O(na+\dfrac{n^2}{a})$<br>根据均值不等式,若让上式复杂度最小,则需要$na=\dfrac{n^2}{a}$,即$a=\sqrt{n}$<br>所以当含有左右两个指针时,分块大小为$\sqrt{n}$时总复杂度最小,为$O(n\sqrt{n})$</p><h2 id="带修莫队-三指针"><a href="#带修莫队-三指针" class="headerlink" title="带修莫队(三指针)"></a>带修莫队(三指针)</h2><p>还是设分块的大小为$a&gt;1$,注意带修莫队排序优先级:先左端点所在块,再右端点所在块,后时间戳大小</p><ol><li><strong>排序</strong>: $O(n\log n)$</li><li><strong>左指针移动</strong>: 同上推导,复杂度为$O(na)$</li><li><strong>右指针移动</strong>: 相同右端点的块的复杂度同上$O(na)$,还有换左端点决定的块时的复杂度约为$O(\dfrac{n^2}{a})$</li><li><strong>时间戳移动</strong>: 由排序优先级可见,只有当右端点所在块相同时才会移动时间戳,而每次移动最坏需要移动$\sum t \sim n$<br>对于每个左端点相同的块,右端点块数为$\dfrac{n}{a}$,左端点有$\dfrac{n}{a}$个,所以一共需要$O(\dfrac{n}{a}\times\dfrac{n}{a}\times n)=O(\dfrac{n^3}{a^2})$</li></ol><p>综上,总的复杂度为$O(n\log n)+O(na)+O(na)+O(\dfrac{n^2}{a})+O(\dfrac{n^3}{a^2})\ \sim\  O(na+\dfrac{n^2}{a}+\dfrac{n^3}{a^2})$</p><p>由于$1&lt;a&lt;n$,所以$\dfrac{\dfrac{n^2}{a}}{\dfrac{n^3}{a^2}}=\dfrac{a}{n}&lt;1 \Rightarrow \dfrac{n^2}{a}&lt;\dfrac{n^3}{a^2}$,所以原式可化为$O(na+\dfrac{n^3}{a^2})$</p><p>根据均值不等式,当$na=\dfrac{n^3}{a^2}$时上式最小,即$a=\sqrt[3]{n^2}=n^{\frac{2}{3}}$<br>所以含有三个指针时,分块大小为$n^{\frac{2}{3}}$时总复杂度最小,为$O(n^{\frac{5}{3}})=O(n\sqrt[3]{n^2})$</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这篇文章来记录一下莫队算法时间复杂度的简单(&lt;del&gt;不严谨&lt;/del&gt;)计算&lt;/p&gt;
&lt;p&gt;首先分析一下莫队算法的时间复杂度有哪些方面构成&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对询问&lt;code&gt;Query&lt;/code&gt;数组的排序&lt;/li&gt;
&lt;li&gt;区间左指针的移动&lt;/li&gt;
&lt;li&gt;区间右指针的移动&lt;/li&gt;&lt;/ol&gt;</summary>
    
    
    
    <category term="C++算法" scheme="https://blog.tonycrane.cc/categories/C-%E7%AE%97%E6%B3%95/"/>
    
    <category term="笔记" scheme="https://blog.tonycrane.cc/categories/C-%E7%AE%97%E6%B3%95/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="Cpp" scheme="https://blog.tonycrane.cc/tags/Cpp/"/>
    
    <category term="算法" scheme="https://blog.tonycrane.cc/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="笔记" scheme="https://blog.tonycrane.cc/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="莫队" scheme="https://blog.tonycrane.cc/tags/%E8%8E%AB%E9%98%9F/"/>
    
  </entry>
  
  <entry>
    <title>「网络流24题」总结及图示</title>
    <link href="https://blog.tonycrane.cc/p/dccbc6bb.html"/>
    <id>https://blog.tonycrane.cc/p/dccbc6bb.html</id>
    <published>2020-04-28T03:13:02.000Z</published>
    <updated>2021-06-12T05:21:00.265Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th align="center">问题编号</th><th align="left">问题名称</th><th align="left">问题模型</th><th align="left">转化模型</th></tr></thead><tbody><tr><td align="center">1</td><td align="left"><a href="https://www.luogu.com.cn/problem/P2756">飞行员配对方案问题</a></td><td align="left">二分图最大匹配</td><td align="left">网络最大流</td></tr><tr><td align="center">2</td><td align="left"><a href="https://www.luogu.com.cn/problem/P2762">太空飞行计划问题</a></td><td align="left">最大权闭合图</td><td align="left">网络最小割</td></tr><tr><td align="center">3</td><td align="left"><a href="https://www.luogu.com.cn/problem/P2764">最小路径覆盖问题</a></td><td align="left">有向无环图最小路径覆盖</td><td align="left">网络最大流</td></tr><tr><td align="center">4</td><td align="left"><a href="https://www.luogu.com.cn/problem/P2765">魔术球问题</a></td><td align="left">有向无环图最小路径覆盖</td><td align="left">网络最大流</td></tr><tr><td align="center">5</td><td align="left"><a href="https://www.luogu.com.cn/problem/P3254">圆桌问题</a></td><td align="left">二分图多重匹配</td><td align="left">网络最大流</td></tr><tr><td align="center">6</td><td align="left"><a href="https://www.luogu.com.cn/problem/P2766">最长不下降子序列问题</a></td><td align="left">最多不相交路径</td><td align="left">网络最大流</td></tr><tr><td align="center">7</td><td align="left"><a href="https://www.luogu.com.cn/problem/P2763">试题库问题</a></td><td align="left">二分图多重匹配</td><td align="left">网络最大流</td></tr><tr><td align="center">8</td><td align="left"><a href="https://www.luogu.com.cn/problem/P2775">机器人路径规划问题</a></td><td align="left">$IDA*$</td><td align="left">$IDA*$</td></tr><tr><td align="center">9</td><td align="left"><a href="https://www.luogu.com.cn/problem/P2774">方格取数问题</a></td><td align="left">二分图点权最大独立集</td><td align="left">网络最小割</td></tr><tr><td align="center">10</td><td align="left"><a href="https://www.luogu.com.cn/problem/P1251">餐巾计划问题</a></td><td align="left">线性规划网络优化</td><td align="left">最小费用最大流</td></tr><tr><td align="center">11</td><td align="left"><a href="https://www.luogu.com.cn/problem/P2770">航空路线问题</a></td><td align="left">最长不相交路径</td><td align="left">最小费用最大流</td></tr><tr><td align="center">12</td><td align="left"><a href="https://www.luogu.com.cn/problem/P2761">软件补丁问题</a></td><td align="left">最小转移代价</td><td align="left">最短路径</td></tr><tr><td align="center">13</td><td align="left"><a href="https://www.luogu.com.cn/problem/P2754">星际转移问题</a></td><td align="left">网络判定</td><td align="left">网络最大流</td></tr><tr><td align="center">14</td><td align="left"><a href="https://www.luogu.com.cn/problem/P4011">孤岛营救问题</a></td><td align="left">分层图最短路径</td><td align="left">最短路径</td></tr><tr><td align="center">15</td><td align="left"><a href="https://www.luogu.com.cn/problem/P4009">汽车加油行驶问题</a></td><td align="left">分层图最短路径</td><td align="left">最短路径</td></tr><tr><td align="center">16</td><td align="left"><a href="https://www.luogu.com.cn/problem/P4013">数字梯形问题</a></td><td align="left">最大权不相交路径</td><td align="left">最小费用最大流</td></tr><tr><td align="center">17</td><td align="left"><a href="https://www.luogu.com.cn/problem/P4015">运输问题</a></td><td align="left">网络费用流量</td><td align="left">最小费用最大流</td></tr><tr><td align="center">18</td><td align="left"><a href="https://www.luogu.com.cn/problem/P4014">分配问题</a></td><td align="left">二分图最佳匹配</td><td align="left">最小费用最大流</td></tr><tr><td align="center">19</td><td align="left"><a href="https://www.luogu.com.cn/problem/P4016">负载平衡问题</a></td><td align="left">最小代价供求</td><td align="left">最小费用最大流</td></tr><tr><td align="center">20</td><td align="left"><a href="https://www.luogu.com.cn/problem/P4012">深海机器人问题</a></td><td align="left">线性规划网络优化</td><td align="left">最小费用最大流</td></tr><tr><td align="center">21</td><td align="left"><a href="https://www.luogu.com.cn/problem/P3358">最长k可重区间集问题</a></td><td align="left">最大权不相交路径</td><td align="left">最小费用最大流</td></tr><tr><td align="center">22</td><td align="left"><a href="https://www.luogu.com.cn/problem/P3357">最长k可重线段集问题</a></td><td align="left">最大权不相交路径</td><td align="left">最小费用最大流</td></tr><tr><td align="center">23</td><td align="left"><a href="https://www.luogu.com.cn/problem/P3356">火星探险问题</a></td><td align="left">线性规划网络优化</td><td align="left">最小费用最大流</td></tr><tr><td align="center">24</td><td align="left"><a href="https://www.luogu.com.cn/problem/P3355">骑士共存问题</a></td><td align="left">二分图最大独立集</td><td align="left">网络最小割</td></tr></tbody></table><span id="more"></span><h3 id="二分图"><a href="#二分图" class="headerlink" title="二分图"></a>二分图</h3><ul><li><strong>最大匹配</strong>: 匈牙利/最大流</li><li><strong>带权匹配</strong>: KM/费用流</li><li><strong>最小点覆盖</strong>: =最大匹配</li><li><strong>最小边覆盖</strong>: =总结点数-最大匹配</li><li><strong>最大独立集</strong>: =总结点数-最大匹配</li></ul><h3 id="网络流"><a href="#网络流" class="headerlink" title="网络流"></a>网络流</h3><ul><li>建立超级源点,超级汇点</li><li>点存在限制,拆成出入点,将出入点之间的边看做点,限制流量</li><li>建图考虑左右二部</li><li>超级源点向源点的边可以限制总流量</li><li>无源汇有容量下界:<code>s-下界-&gt;v  u-下界-&gt;t  u-上界减下界-&gt;v</code>,当满流时存在可行流</li><li>最小割中赋流量为inf则一定不会割去</li><li>一些求最大问题,可以用sum-最小割</li><li>最大权闭合图: 建图,最小割,仍和s相连的为最大权闭合图,权值和为sum-最小割</li></ul><h3 id="24题"><a href="#24题" class="headerlink" title="24题"></a>24题</h3><ol><li>直接建二分图,最大流求最大匹配</li><li>最大权闭合图,建边,实验和仪器之间保证不切割容量为inf,跑最小割,找与s相连的实验和仪器</li><li>最大独立集,总结点数-最大流</li><li>贪心</li><li>二分图多重匹配,s-&gt;左点集和右点集-&gt;t之间的边容量不为1(即可以选多次)</li><li>动态规划+按照动态规划的dp数组的意义建边求最大流</li><li>二分图多重匹配,类型-题目数-&gt;汇点,保证可选多个,存在满流则存在答案沿满流输出</li><li>$IDA*$爆搜,但洛谷数据应该有问题</li><li>抽象出两个点集,求最大独立集</li><li>按照题目说明建图,跑费用流</li><li>按照题目说明建图,跑费用流</li><li>将错误状态进行压缩,然后跑最短路</li><li>根据时间逐层建图,直到跑出可行流</li><li>将拥有钥匙进行压缩,跑最短路</li><li>建出分层图,跑最短路或者费用流</li><li>对三个规则分别建图,跑费用流</li><li>纯费用流</li><li>二分图最佳匹配,使用费用流</li><li>费用流,注意环形</li><li>按照题目要求建图,跑费用流</li><li>离散化,将区间转化为边,费用流</li><li>转化问题,变成21题,注意端点处理和垂直于x轴的线段</li><li>按照题目要求建图,跑费用流,方案dfs</li><li>将图上所有格点转化为两个点集,建二分图,求最大独立集</li></ol><h3 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h3><p><strong><del>更新中</del></strong><br><img src="/p/dccbc6bb/NF24P2762.png" alt="2"><br><img src="/p/dccbc6bb/NF24P2754.png" alt="13"><br><img src="/p/dccbc6bb/NF24P3358.png" alt="21"><br><img src="/p/dccbc6bb/NF24P3357.png" alt="22"></p>]]></content>
    
    
    <summary type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;问题编号&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;问题名称&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;问题模型&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;转化模型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/P2756&quot;&gt;飞行员配对方案问题&lt;/a&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;二分图最大匹配&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;网络最大流&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;2&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/P2762&quot;&gt;太空飞行计划问题&lt;/a&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;最大权闭合图&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;网络最小割&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;3&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/P2764&quot;&gt;最小路径覆盖问题&lt;/a&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;有向无环图最小路径覆盖&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;网络最大流&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;4&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/P2765&quot;&gt;魔术球问题&lt;/a&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;有向无环图最小路径覆盖&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;网络最大流&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;5&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/P3254&quot;&gt;圆桌问题&lt;/a&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;二分图多重匹配&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;网络最大流&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;6&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/P2766&quot;&gt;最长不下降子序列问题&lt;/a&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;最多不相交路径&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;网络最大流&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;7&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/P2763&quot;&gt;试题库问题&lt;/a&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;二分图多重匹配&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;网络最大流&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;8&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/P2775&quot;&gt;机器人路径规划问题&lt;/a&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;$IDA*$&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;$IDA*$&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;9&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/P2774&quot;&gt;方格取数问题&lt;/a&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;二分图点权最大独立集&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;网络最小割&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;10&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/P1251&quot;&gt;餐巾计划问题&lt;/a&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;线性规划网络优化&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;最小费用最大流&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;11&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/P2770&quot;&gt;航空路线问题&lt;/a&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;最长不相交路径&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;最小费用最大流&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;12&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/P2761&quot;&gt;软件补丁问题&lt;/a&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;最小转移代价&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;最短路径&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;13&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/P2754&quot;&gt;星际转移问题&lt;/a&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;网络判定&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;网络最大流&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;14&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/P4011&quot;&gt;孤岛营救问题&lt;/a&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;分层图最短路径&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;最短路径&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;15&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/P4009&quot;&gt;汽车加油行驶问题&lt;/a&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;分层图最短路径&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;最短路径&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;16&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/P4013&quot;&gt;数字梯形问题&lt;/a&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;最大权不相交路径&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;最小费用最大流&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;17&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/P4015&quot;&gt;运输问题&lt;/a&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;网络费用流量&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;最小费用最大流&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;18&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/P4014&quot;&gt;分配问题&lt;/a&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;二分图最佳匹配&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;最小费用最大流&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;19&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/P4016&quot;&gt;负载平衡问题&lt;/a&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;最小代价供求&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;最小费用最大流&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;20&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/P4012&quot;&gt;深海机器人问题&lt;/a&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;线性规划网络优化&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;最小费用最大流&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;21&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/P3358&quot;&gt;最长k可重区间集问题&lt;/a&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;最大权不相交路径&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;最小费用最大流&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;22&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/P3357&quot;&gt;最长k可重线段集问题&lt;/a&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;最大权不相交路径&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;最小费用最大流&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;23&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/P3356&quot;&gt;火星探险问题&lt;/a&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;线性规划网络优化&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;最小费用最大流&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;24&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;a href=&quot;https://www.luogu.com.cn/problem/P3355&quot;&gt;骑士共存问题&lt;/a&gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;二分图最大独立集&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;网络最小割&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="题解" scheme="https://blog.tonycrane.cc/categories/%E9%A2%98%E8%A7%A3/"/>
    
    <category term="网络流24题" scheme="https://blog.tonycrane.cc/categories/%E9%A2%98%E8%A7%A3/%E7%BD%91%E7%BB%9C%E6%B5%8124%E9%A2%98/"/>
    
    
    <category term="Cpp" scheme="https://blog.tonycrane.cc/tags/Cpp/"/>
    
    <category term="NOIp" scheme="https://blog.tonycrane.cc/tags/NOIp/"/>
    
    <category term="题解" scheme="https://blog.tonycrane.cc/tags/%E9%A2%98%E8%A7%A3/"/>
    
    <category term="网络流" scheme="https://blog.tonycrane.cc/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
    <category term="费用流" scheme="https://blog.tonycrane.cc/tags/%E8%B4%B9%E7%94%A8%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>「Luogu P1494」小Z的袜子-题解</title>
    <link href="https://blog.tonycrane.cc/p/49548215.html"/>
    <id>https://blog.tonycrane.cc/p/49548215.html</id>
    <published>2020-04-27T06:53:47.000Z</published>
    <updated>2020-05-05T02:33:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>题目传送门: <a href="https://www.luogu.com.cn/problem/P1494">「Luogu P1494」小Z的袜子</a><br>一道推公式，后使用莫队 <del>玄学</del> 优化的题目</p><span id="more"></span><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>给出$n$个袜子,第$i$只袜子的颜色为$c_i$<br>有$m$个询问,用$L,R$表示<br>在区间$[L,R]$中随机取袜子,求取出两只袜子颜色相同的概率(最简分数)</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>考虑区间$[L,R]$,其中颜色为$A$的袜子有$a$只,颜色为$B$的袜子有$b$只$…$</p><p>取出两只袜子的总情况数为<br>$$C_{R-L+1}^2=\frac{(R-L+1)(R-L)}{2}$$<br>取出两只袜子颜色都为$A$的情况数为<br>$$C_a^2=\frac{a(a - 1)}{2}$$<br>所以,取出两只袜子颜色相同的情况数为<br>$$\sum_{i}C_i^2=C_a^2+C_b^2+…=\frac{a(a-1)}{2}+\frac{b(b-1)}{2}+…$$<br>所以最终的概率为<br>$$<br>\begin{aligned}<br>P&amp;=\frac{\displaystyle\sum_{i}C_i^2}{C_{R-L+1}^2}\\\\<br>&amp;=\dfrac{\dfrac{a(a-1)}{2}+\dfrac{b(b-1)}{2}+…}{ \dfrac{(R-L+1)(R-L)}{2} }\\\\<br>&amp;=\dfrac{a^2+b^2+…-a-b-…}{(R-L+1)(R-L)}\\\\<br>&amp;=\dfrac{\displaystyle\sum_ii^2-\displaystyle\sum_ii}{(R-L+1)(R-L)}\\\\<br>&amp;=\dfrac{\displaystyle\sum_ii^2-(R-L+1)}{(R-L+1)(R-L)}<br>\end{aligned}<br>$$<br>所以要求的就是$\displaystyle\sum_ii^2$,可以用莫队来维护区间平方和得到</p><p>对于最终结果的表达式,令$a=$分子,$b=$分母,求出$ab$的最大公约数,并除去<br>最终答案即为$a/b$</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">1</span>; <span class="keyword">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(ch)) &#123;<span class="keyword">if</span> (ch == <span class="string">&#x27;-&#x27;</span>) f = <span class="number">-1</span>; ch = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(ch))  &#123;x = x * <span class="number">10</span> + ch - <span class="number">48</span>; ch = <span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">gcd</span><span class="params">(LL a, LL b)</span> </span>&#123; <span class="keyword">return</span> b == <span class="number">0</span> ? a : <span class="built_in">gcd</span>(b, a % b); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">50010</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Query</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, pos, id;</span><br><span class="line">&#125;q[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(Query a, Query b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.pos != b.pos) <span class="keyword">return</span> a.pos &lt; b.pos;</span><br><span class="line">    <span class="keyword">if</span> (a.pos &amp; <span class="number">1</span>) <span class="keyword">return</span> a.r &lt; b.r;</span><br><span class="line">    <span class="keyword">return</span> a.r &gt; b.r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Answer</span> &#123;</span></span><br><span class="line">    LL a, b;</span><br><span class="line">&#125;ans[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, l, r, Ans, len;</span><br><span class="line">LL c[maxn], cnt[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    Ans -= cnt[c[x]] * cnt[c[x]];</span><br><span class="line">    cnt[c[x]]--;</span><br><span class="line">    Ans += cnt[c[x]] * cnt[c[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    Ans -= cnt[c[x]] * cnt[c[x]];</span><br><span class="line">    cnt[c[x]]++;</span><br><span class="line">    Ans += cnt[c[x]] * cnt[c[x]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    n = <span class="built_in">read</span>(); m = <span class="built_in">read</span>(); len = <span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) c[i] = <span class="built_in">read</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        q[i].l = <span class="built_in">read</span>(); q[i].r = <span class="built_in">read</span>();</span><br><span class="line">        q[i].id = i; q[i].pos = q[i].l / len + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(q + <span class="number">1</span>, q + <span class="number">1</span> + m, cmp); l = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; q[i].l) <span class="built_in">del</span>(l++);</span><br><span class="line">        <span class="keyword">while</span> (r &gt; q[i].r) <span class="built_in">del</span>(r--);</span><br><span class="line">        <span class="keyword">while</span> (l &gt; q[i].l) <span class="built_in">add</span>(--l);</span><br><span class="line">        <span class="keyword">while</span> (r &lt; q[i].r) <span class="built_in">add</span>(++r);</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            ans[q[i].id].a = <span class="number">0</span>; ans[q[i].id].b = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        LL a = Ans - (r - l + <span class="number">1</span>);</span><br><span class="line">        LL b = <span class="number">1LL</span> * (r - l + <span class="number">1</span>) * (LL)(r - l);</span><br><span class="line">        LL g = <span class="built_in">gcd</span>(a, b);</span><br><span class="line">        ans[q[i].id].a = a / g;</span><br><span class="line">        ans[q[i].id].b = b / g;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld/%lld\n&quot;</span>, ans[i].a, ans[i].b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;题目传送门: &lt;a href=&quot;https://www.luogu.com.cn/problem/P1494&quot;&gt;「Luogu P1494」小Z的袜子&lt;/a&gt;&lt;br&gt;一道推公式，后使用莫队 &lt;del&gt;玄学&lt;/del&gt; 优化的题目&lt;/p&gt;</summary>
    
    
    
    <category term="题解" scheme="https://blog.tonycrane.cc/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="Cpp" scheme="https://blog.tonycrane.cc/tags/Cpp/"/>
    
    <category term="NOIp" scheme="https://blog.tonycrane.cc/tags/NOIp/"/>
    
    <category term="题解" scheme="https://blog.tonycrane.cc/tags/%E9%A2%98%E8%A7%A3/"/>
    
    <category term="莫队" scheme="https://blog.tonycrane.cc/tags/%E8%8E%AB%E9%98%9F/"/>
    
    <category term="数论" scheme="https://blog.tonycrane.cc/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>「网络流24题」负载平衡问题-题解</title>
    <link href="https://blog.tonycrane.cc/p/b8624866.html"/>
    <id>https://blog.tonycrane.cc/p/b8624866.html</id>
    <published>2020-04-23T02:44:02.000Z</published>
    <updated>2020-05-05T02:33:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>题目传送门: <a href="https://www.luogu.com.cn/problem/P4016">「Luogu P4016」负载平衡问题</a></p><span id="more"></span><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>有$n$个环形的仓库,每个仓库存储一定数量的货物<br>货物可以在相邻仓库之间搬运,最终达到每个仓货物数量一样的效果</p><p>求最少搬运次数</p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>看题解说可以用数学方法推导,但是在24题里还是选择用费用流水过</p><p>先求出平均数,即目标<br>然后将每个仓库的货物数减去平均数,得出需要移动的数量</p><ol><li>如果大于$0$,则从 源点 向 该仓库 建一条 <strong>容量为差值,费用为$0$</strong> 的边(需要转移出,对答案无贡献)</li><li>如果小于$0$,则从 该仓库 向 汇点 建一条 <strong>容量为差值绝对值,费用为$0$</strong> 的边(吸收这些货物,对答案无贡献)</li><li>从 每个仓库 向 相邻两个仓库 建一条 <strong>容量为$inf$,费用为$1$</strong> 的边(转移货物的数量无要求,对答案贡献为$1$)</li></ol><p>注意建边3.需要考虑环形<br>求出最小费用最大流,最小费用即为结果</p><p>因为费用流大前提是满足最大流,而且此图中源点出发的与流入汇点的边的容量和相等,所以最大流情况下一定会全部流过,即达到仓库货物数量平衡</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 最小费用最大流模板省去了</span></span><br><span class="line"><span class="keyword">int</span> num[<span class="number">110</span>], tot;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    n = <span class="built_in">read</span>(); s = <span class="number">0</span>; t = n + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        num[i] = <span class="built_in">read</span>(); tot += num[i];</span><br><span class="line">    &#125;</span><br><span class="line">    tot /= n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (num[i] - tot &gt; <span class="number">0</span>) <span class="built_in">add</span>(s, i, num[i] - tot, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (num[i] - tot &lt; <span class="number">0</span>) <span class="built_in">add</span>(i, t, tot - num[i], <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (i != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">add</span>(i, i - <span class="number">1</span>, inf, <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">add</span>(i - <span class="number">1</span>, i, inf, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">add</span>(<span class="number">1</span>, n, inf, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">add</span>(n, <span class="number">1</span>, inf, <span class="number">1</span>);</span><br><span class="line">    ansflow = <span class="built_in">MinCostMaxFlow</span>(anscost);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, anscost);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;题目传送门: &lt;a href=&quot;https://www.luogu.com.cn/problem/P4016&quot;&gt;「Luogu P4016」负载平衡问题&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="题解" scheme="https://blog.tonycrane.cc/categories/%E9%A2%98%E8%A7%A3/"/>
    
    <category term="网络流24题" scheme="https://blog.tonycrane.cc/categories/%E9%A2%98%E8%A7%A3/%E7%BD%91%E7%BB%9C%E6%B5%8124%E9%A2%98/"/>
    
    
    <category term="Cpp" scheme="https://blog.tonycrane.cc/tags/Cpp/"/>
    
    <category term="NOIp" scheme="https://blog.tonycrane.cc/tags/NOIp/"/>
    
    <category term="题解" scheme="https://blog.tonycrane.cc/tags/%E9%A2%98%E8%A7%A3/"/>
    
    <category term="网络流" scheme="https://blog.tonycrane.cc/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
    <category term="费用流" scheme="https://blog.tonycrane.cc/tags/%E8%B4%B9%E7%94%A8%E6%B5%81/"/>
    
  </entry>
  
</feed>
